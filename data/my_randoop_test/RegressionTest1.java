import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest1 {

    @Test
    public void test0() throws Throwable {
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.millisOfDay();
        dateTimeFieldType0.toString();
        dateTimeFieldType0.hashCode();
        org.junit.Assert.assertTrue(dateTimeFieldType0.equals(dateTimeFieldType0));
    }

    @Test
    public void test1() throws Throwable {
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.yearMonthDay();
        dateTimeFormatter0.toString();
        dateTimeFormatter0.hashCode();
        org.junit.Assert.assertTrue(dateTimeFormatter0.equals(dateTimeFormatter0));
    }

    @Test
    public void test2() throws Throwable {
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateTimeComparator dateTimeComparator1 = org.joda.time.DateTimeComparator.getInstance(dateTimeFieldType0);
        dateTimeComparator1.toString();
        dateTimeComparator1.hashCode();
        org.junit.Assert.assertTrue(dateTimeComparator1.equals(dateTimeComparator1));
    }

    @Test
    public void test3() throws Throwable {
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType1 = null;
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0, leapYearPatternType1);
        islamicChronology2.toString();
        islamicChronology2.hashCode();
        org.junit.Assert.assertTrue(islamicChronology2.equals(islamicChronology2));
    }

    @Test
    public void test4() throws Throwable {
        java.util.Date date0 = null;
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromDateFields(date0);
        localTime1.toString();
        localTime1.hashCode();
        org.junit.Assert.assertTrue(localTime1.equals(localTime1));
    }

    @Test
    public void test5() throws Throwable {
        org.joda.time.PeriodType periodType0 = null;
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Period period2 = new org.joda.time.Period(1, periodType0, chronology1);
        period2.toString();
        period2.hashCode();
        org.junit.Assert.assertTrue(period2.equals(period2));
    }

    @Test
    public void test6() throws Throwable {
        org.joda.time.PeriodType periodType0 = null;
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(1, 1, periodType0, chronology1);
        mutablePeriod2.toString();
        mutablePeriod2.hashCode();
        org.junit.Assert.assertTrue(mutablePeriod2.equals(mutablePeriod2));
    }

    @Test
    public void test7() throws Throwable {
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateTimeComparator dateTimeComparator1 = org.joda.time.DateTimeComparator.getInstance(dateTimeFieldType0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = dateTimeComparator1.getUpperLimit();
        dateTimeFieldType2.toString();
        dateTimeFieldType2.hashCode();
        org.junit.Assert.assertTrue(dateTimeFieldType2.equals(dateTimeFieldType2));
    }

    @Test
    public void test8() throws Throwable {
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.toString();
        mutableDateTime0.hashCode();
        org.junit.Assert.assertTrue(mutableDateTime0.equals(mutableDateTime0));
    }

    @Test
    public void test9() throws Throwable {
        org.joda.time.PeriodType periodType0 = null;
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Period period2 = new org.joda.time.Period(1, periodType0, chronology1);
        org.joda.time.Period period3 = period2.withMonths(1);
        period3.toString();
        period3.hashCode();
        org.junit.Assert.assertTrue(period3.equals(period3));
    }

    @Test
    public void test10() throws Throwable {
        org.joda.time.DateTimeField dateTimeField0 = null;
        org.joda.time.field.DelegatedDateTimeField delegatedDateTimeField1 = new org.joda.time.field.DelegatedDateTimeField(dateTimeField0);
        delegatedDateTimeField1.toString();
        delegatedDateTimeField1.hashCode();
        org.junit.Assert.assertTrue(delegatedDateTimeField1.equals(delegatedDateTimeField1));
    }

    @Test
    public void test11() throws Throwable {
        org.joda.time.PeriodType periodType0 = null;
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Period period2 = new org.joda.time.Period(1, periodType0, chronology1);
        org.joda.time.Period period3 = period2.minusDays(1);
        period3.toString();
        period3.hashCode();
        org.junit.Assert.assertTrue(period3.equals(period3));
    }

    @Test
    public void test12() throws Throwable {
        java.lang.Object object0 = null;
        org.joda.time.Interval interval1 = new org.joda.time.Interval(object0);
        interval1.toString();
        interval1.hashCode();
        org.junit.Assert.assertTrue(interval1.equals(interval1));
    }

    @Test
    public void test13() throws Throwable {
        org.joda.time.DateTimeField dateTimeField0 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.field.ZeroIsMaxDateTimeField zeroIsMaxDateTimeField2 = new org.joda.time.field.ZeroIsMaxDateTimeField(dateTimeField0, dateTimeFieldType1);
        zeroIsMaxDateTimeField2.toString();
        zeroIsMaxDateTimeField2.hashCode();
        org.junit.Assert.assertTrue(zeroIsMaxDateTimeField2.equals(zeroIsMaxDateTimeField2));
    }

    @Test
    public void test14() throws Throwable {
        org.joda.time.PeriodType periodType0 = null;
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(1, 1, periodType0, chronology1);
        int int3 = mutablePeriod2.getMonths();
    }

    @Test
    public void test15() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        localDate1.toString();
        localDate1.hashCode();
        org.junit.Assert.assertTrue(localDate1.equals(localDate1));
    }

    @Test
    public void test16() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.DateTime dateTime2 = localDate1.toDateTimeAtCurrentTime();
        dateTime2.toString();
        dateTime2.hashCode();
        org.junit.Assert.assertTrue(dateTime2.equals(dateTime2));
    }

    @Test
    public void test17() throws Throwable {
        java.lang.Object object0 = null;
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth(object0);
        yearMonth1.toString();
        yearMonth1.hashCode();
        org.junit.Assert.assertTrue(yearMonth1.equals(yearMonth1));
    }

    @Test
    public void test18() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate2 = localDate1.withDayOfYear(1);
        localDate2.toString();
        localDate2.hashCode();
        org.junit.Assert.assertTrue(localDate2.equals(localDate2));
    }

    @Test
    public void test19() throws Throwable {
        java.lang.Object object0 = null;
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth(object0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = yearMonth1.toInterval(dateTimeZone2);
        interval3.toString();
        interval3.hashCode();
        org.junit.Assert.assertTrue(interval3.equals(interval3));
    }

    @Test
    public void test20() throws Throwable {
        org.joda.time.chrono.IslamicChronology withUTC0 = null;
        org.joda.time.Chronology chronology1 = withUTC0.withUTC();
        chronology1.toString();
        chronology1.hashCode();
        org.junit.Assert.assertTrue(chronology1.equals(chronology1));
    }

    @Test
    public void test21() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        partial1.toString();
        partial1.hashCode();
        org.junit.Assert.assertTrue(partial1.equals(partial1));
    }

    @Test
    public void test22() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.Partial.Property property3 = partial1.property(dateTimeFieldType2);
        property3.toString();
        property3.hashCode();
        org.junit.Assert.assertTrue(property3.equals(property3));
    }

    @Test
    public void test23() throws Throwable {
        org.joda.time.Chronology add0 = null;
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        long long2 = add0.add(readablePeriod1, 1, 1);
    }

    @Test
    public void test24() throws Throwable {
        java.lang.Object object0 = null;
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth(object0);
        org.joda.time.Interval interval2 = yearMonth1.toInterval();
        interval2.toString();
        interval2.hashCode();
        org.junit.Assert.assertTrue(interval2.equals(interval2));
    }

    @Test
    public void test25() throws Throwable {
        java.lang.Object object0 = null;
        org.joda.time.PeriodType periodType1 = null;
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(object0, periodType1);
        mutablePeriod2.toString();
        mutablePeriod2.hashCode();
        org.junit.Assert.assertTrue(mutablePeriod2.equals(mutablePeriod2));
    }

    @Test
    public void test26() throws Throwable {
        org.joda.time.LocalTime toDateTimeToday0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = toDateTimeToday0.toDateTimeToday(dateTimeZone1);
        dateTime2.toString();
        dateTime2.hashCode();
        org.junit.Assert.assertTrue(dateTime2.equals(dateTime2));
    }

    @Test
    public void test27() throws Throwable {
        org.joda.time.LocalTime getMillisOfDay0 = null;
        int int1 = getMillisOfDay0.getMillisOfDay();
    }

    @Test
    public void test28() throws Throwable {
        java.lang.Object object0 = null;
        org.joda.time.PeriodType periodType1 = null;
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(object0, periodType1);
        mutablePeriod2.setMonths(1);
    }

    @Test
    public void test29() throws Throwable {
        java.lang.StringBuffer stringBuffer0 = null;
        org.joda.time.format.FormatUtils.appendUnpaddedInteger(stringBuffer0, 1);
    }

    @Test
    public void test30() throws Throwable {
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.DateTimeField dateTimeField1 = null;
        mutableDateTime0.setRounding(dateTimeField1);
    }

    @Test
    public void test31() throws Throwable {
        org.joda.time.PeriodType periodType0 = null;
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Period period2 = new org.joda.time.Period(1, periodType0, chronology1);
        org.joda.time.Period period3 = period2.minusWeeks(1);
        period3.toString();
        period3.hashCode();
        org.junit.Assert.assertTrue(period3.equals(period3));
    }

    @Test
    public void test32() throws Throwable {
        org.joda.time.PeriodType periodType0 = null;
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(1, 1, periodType0, chronology1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        mutablePeriod2.add(readablePeriod3);
    }

    @Test
    public void test33() throws Throwable {
        long long0 = org.joda.time.field.FieldUtils.safeSubtract(1, 1);
    }

    @Test
    public void test34() throws Throwable {
        org.joda.time.LocalTime minusMillis0 = null;
        org.joda.time.LocalTime localTime1 = minusMillis0.minusMillis(1);
        localTime1.toString();
        localTime1.hashCode();
        org.junit.Assert.assertTrue(localTime1.equals(localTime1));
    }

    @Test
    public void test35() throws Throwable {
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.yearMonthDay();
        java.lang.Appendable appendable1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        dateTimeFormatter0.printTo(appendable1, readableInstant2);
    }

    @Test
    public void test36() throws Throwable {
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(dateTimeZone0);
        localTime1.toString();
        localTime1.hashCode();
        org.junit.Assert.assertTrue(localTime1.equals(localTime1));
    }

    @Test
    public void test37() throws Throwable {
        org.joda.time.PeriodType periodType0 = null;
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Period period2 = new org.joda.time.Period(1, periodType0, chronology1);
        org.joda.time.DurationFieldType durationFieldType3 = null;
        org.joda.time.Period period4 = period2.withField(durationFieldType3, 1);
        period4.toString();
        period4.hashCode();
        org.junit.Assert.assertTrue(period4.equals(period4));
    }

    @Test
    public void test38() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        int int2 = localDate1.getCenturyOfEra();
    }

    @Test
    public void test39() throws Throwable {
        org.joda.time.PeriodType periodType0 = null;
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(1, 1, periodType0, chronology1);
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Chronology chronology4 = null;
        mutablePeriod2.setPeriod(readableDuration3, chronology4);
    }

    @Test
    public void test40() throws Throwable {
        java.lang.String string0 = null;
        org.joda.time.Interval interval1 = org.joda.time.Interval.parse(string0);
        interval1.toString();
        interval1.hashCode();
        org.junit.Assert.assertTrue(interval1.equals(interval1));
    }

    @Test
    public void test41() throws Throwable {
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(dateTimeZone0);
        org.joda.time.LocalTime.Property property2 = localTime1.millisOfDay();
        property2.toString();
        property2.hashCode();
        org.junit.Assert.assertTrue(property2.equals(property2));
    }

    @Test
    public void test42() throws Throwable {
        org.joda.time.chrono.BuddhistChronology buddhistChronology0 = org.joda.time.chrono.BuddhistChronology.getInstance();
        buddhistChronology0.toString();
        buddhistChronology0.hashCode();
        org.junit.Assert.assertTrue(buddhistChronology0.equals(buddhistChronology0));
    }

    @Test
    public void test43() throws Throwable {
        org.joda.time.PeriodType periodType0 = null;
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(1, 1, periodType0, chronology1);
        org.joda.time.Chronology chronology3 = null;
        mutablePeriod2.setPeriod(1, chronology3);
    }

    @Test
    public void test44() throws Throwable {
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(dateTimeZone0);
        org.joda.time.LocalTime localTime2 = localTime1.minusHours(1);
        localTime2.toString();
        localTime2.hashCode();
        org.junit.Assert.assertTrue(localTime2.equals(localTime2));
    }

    @Test
    public void test45() throws Throwable {
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.standard();
        periodType0.toString();
        periodType0.hashCode();
        org.junit.Assert.assertTrue(periodType0.equals(periodType0));
    }

    @Test
    public void test46() throws Throwable {
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortTime();
        dateTimeFormatter0.toString();
        dateTimeFormatter0.hashCode();
        org.junit.Assert.assertTrue(dateTimeFormatter0.equals(dateTimeFormatter0));
    }

    @Test
    public void test47() throws Throwable {
        org.joda.time.Chronology secondOfMinute0 = null;
        org.joda.time.DateTimeField dateTimeField1 = secondOfMinute0.secondOfMinute();
        dateTimeField1.toString();
        dateTimeField1.hashCode();
        org.junit.Assert.assertTrue(dateTimeField1.equals(dateTimeField1));
    }

    @Test
    public void test48() throws Throwable {
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.weekDateTime();
        dateTimeFormatter0.toString();
        dateTimeFormatter0.hashCode();
        org.junit.Assert.assertTrue(dateTimeFormatter0.equals(dateTimeFormatter0));
    }

    @Test
    public void test49() throws Throwable {
        org.joda.time.DateTimeField dateTimeField0 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField2 = new org.joda.time.field.RemainderDateTimeField(dateTimeField0, dateTimeFieldType1, 1);
        remainderDateTimeField2.toString();
        remainderDateTimeField2.hashCode();
        org.junit.Assert.assertTrue(remainderDateTimeField2.equals(remainderDateTimeField2));
    }

    @Test
    public void test50() throws Throwable {
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime(1, 1, 1, 1, 1, 1, 1);
        localDateTime0.toString();
        localDateTime0.hashCode();
        org.junit.Assert.assertTrue(localDateTime0.equals(localDateTime0));
    }

    @Test
    public void test51() throws Throwable {
        java.lang.Object object0 = null;
        org.joda.time.PeriodType periodType1 = null;
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(object0, periodType1);
        mutablePeriod2.addSeconds(1);
    }

    @Test
    public void test52() throws Throwable {
        java.lang.String string0 = null;
        org.joda.time.IllegalInstantException illegalInstantException1 = new org.joda.time.IllegalInstantException(string0);
        illegalInstantException1.toString();
        illegalInstantException1.hashCode();
        org.junit.Assert.assertTrue(illegalInstantException1.equals(illegalInstantException1));
    }

    @Test
    public void test53() throws Throwable {
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        yearMonthDay1.toString();
        yearMonthDay1.hashCode();
        org.junit.Assert.assertTrue(yearMonthDay1.equals(yearMonthDay1));
    }

    @Test
    public void test54() throws Throwable {
        org.joda.time.Chronology hours0 = null;
        org.joda.time.DurationField durationField1 = hours0.hours();
        durationField1.toString();
        durationField1.hashCode();
        org.junit.Assert.assertTrue(durationField1.equals(durationField1));
    }

    @Test
    public void test55() throws Throwable {
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime(1, 1, 1, 1, 1, 1, 1);
        org.joda.time.LocalDateTime localDateTime1 = localDateTime0.plusMillis(1);
        localDateTime1.toString();
        localDateTime1.hashCode();
        org.junit.Assert.assertTrue(localDateTime1.equals(localDateTime1));
    }

    @Test
    public void test56() throws Throwable {
        org.joda.time.field.DelegatedDateTimeField getMaximumValue0 = null;
        int int1 = getMaximumValue0.getMaximumValue();
    }

    @Test
    public void test57() throws Throwable {
        org.joda.time.DateTime withHourOfDay0 = null;
        org.joda.time.DateTime dateTime1 = withHourOfDay0.withHourOfDay(1);
        dateTime1.toString();
        dateTime1.hashCode();
        org.junit.Assert.assertTrue(dateTime1.equals(dateTime1));
    }

    @Test
    public void test58() throws Throwable {
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonth yearMonth1 = org.joda.time.YearMonth.now(dateTimeZone0);
        yearMonth1.toString();
        yearMonth1.hashCode();
        org.junit.Assert.assertTrue(yearMonth1.equals(yearMonth1));
    }

    @Test
    public void test59() throws Throwable {
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.addHours(1);
    }

    @Test
    public void test60() throws Throwable {
        org.joda.time.LocalTime.Property roundFloorCopy0 = null;
        org.joda.time.LocalTime localTime1 = roundFloorCopy0.roundFloorCopy();
        localTime1.toString();
        localTime1.hashCode();
        org.junit.Assert.assertTrue(localTime1.equals(localTime1));
    }

    @Test
    public void test61() throws Throwable {
        org.joda.time.Period period0 = new org.joda.time.Period(1, 1);
        period0.toString();
        period0.hashCode();
        org.junit.Assert.assertTrue(period0.equals(period0));
    }

    @Test
    public void test62() throws Throwable {
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortTime();
        java.util.Locale locale1 = dateTimeFormatter0.getLocale();
        locale1.toString();
        locale1.hashCode();
        org.junit.Assert.assertTrue(locale1.equals(locale1));
    }

    @Test
    public void test63() throws Throwable {
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.weekDate();
        dateTimeFormatter0.toString();
        dateTimeFormatter0.hashCode();
        org.junit.Assert.assertTrue(dateTimeFormatter0.equals(dateTimeFormatter0));
    }

    @Test
    public void test64() throws Throwable {
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.DateTimeField dateTimeField1 = mutableDateTime0.getRoundingField();
        dateTimeField1.toString();
        dateTimeField1.hashCode();
        org.junit.Assert.assertTrue(dateTimeField1.equals(dateTimeField1));
    }

    @Test
    public void test65() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay(chronology0);
        monthDay1.toString();
        monthDay1.hashCode();
        org.junit.Assert.assertTrue(monthDay1.equals(monthDay1));
    }

    @Test
    public void test66() throws Throwable {
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(dateTimeZone0);
        org.joda.time.LocalTime localTime2 = localTime1.minusMinutes(1);
        localTime2.toString();
        localTime2.hashCode();
        org.junit.Assert.assertTrue(localTime2.equals(localTime2));
    }

    @Test
    public void test67() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay(1, 1, 1, 1, chronology0);
        timeOfDay1.toString();
        timeOfDay1.hashCode();
        org.junit.Assert.assertTrue(timeOfDay1.equals(timeOfDay1));
    }

    @Test
    public void test68() throws Throwable {
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.addSeconds(1);
    }

    @Test
    public void test69() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime(dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime4 = localDate1.toLocalDateTime(localTime3);
        localDateTime4.toString();
        localDateTime4.hashCode();
        org.junit.Assert.assertTrue(localDateTime4.equals(localDateTime4));
    }

    @Test
    public void test70() throws Throwable {
        org.joda.time.DateTimeField getMinimumValue0 = null;
        org.joda.time.ReadablePartial readablePartial1 = null;
        int[] intArr2 = null;
        int int3 = getMinimumValue0.getMinimumValue(readablePartial1, intArr2);
    }

    @Test
    public void test71() throws Throwable {
        java.util.Calendar calendar0 = null;
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.fromCalendarFields(calendar0);
        monthDay1.toString();
        monthDay1.hashCode();
        org.junit.Assert.assertTrue(monthDay1.equals(monthDay1));
    }

    @Test
    public void test72() throws Throwable {
        org.joda.time.Period period0 = new org.joda.time.Period(1, 1, 1, 1);
        period0.toString();
        period0.hashCode();
        org.junit.Assert.assertTrue(period0.equals(period0));
    }

    @Test
    public void test73() throws Throwable {
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(dateTimeZone0);
        int int2 = localTime1.getValue(1);
    }

    @Test
    public void test74() throws Throwable {
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Interval interval2 = new org.joda.time.Interval(readableDuration0, readableInstant1);
        interval2.toString();
        interval2.hashCode();
        org.junit.Assert.assertTrue(interval2.equals(interval2));
    }

    @Test
    public void test75() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate2 = localDate1.withWeekyear(1);
        localDate2.toString();
        localDate2.hashCode();
        org.junit.Assert.assertTrue(localDate2.equals(localDate2));
    }

    @Test
    public void test76() throws Throwable {
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime(1, 1, 1, 1, 1, 1, 1);
        org.joda.time.LocalDateTime localDateTime1 = localDateTime0.withMonthOfYear(1);
        localDateTime1.toString();
        localDateTime1.hashCode();
        org.junit.Assert.assertTrue(localDateTime1.equals(localDateTime1));
    }

    @Test
    public void test77() throws Throwable {
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime(1, 1, 1, 1, 1, 1, 1);
        java.lang.Object object1 = null;
        boolean boolean2 = localDateTime0.equals(object1);
    }

    @Test
    public void test78() throws Throwable {
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.standard();
        java.lang.String string1 = periodType0.getName();
        string1.toString();
        string1.hashCode();
        org.junit.Assert.assertTrue(string1.equals(string1));
    }

    @Test
    public void test79() throws Throwable {
        java.lang.Object object0 = null;
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth(object0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.YearMonth yearMonth3 = yearMonth1.plus(readablePeriod2);
        yearMonth3.toString();
        yearMonth3.hashCode();
        org.junit.Assert.assertTrue(yearMonth3.equals(yearMonth3));
    }

    @Test
    public void test80() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay(chronology0);
        org.joda.time.MonthDay.Property property2 = monthDay1.dayOfMonth();
        property2.toString();
        property2.hashCode();
        org.junit.Assert.assertTrue(property2.equals(property2));
    }

    @Test
    public void test81() throws Throwable {
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime(1, 1, 1, 1, 1, 1, 1);
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = localDateTime0.toDateTime(dateTimeZone1);
        dateTime2.toString();
        dateTime2.hashCode();
        org.junit.Assert.assertTrue(dateTime2.equals(dateTime2));
    }

    @Test
    public void test82() throws Throwable {
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortDateTime();
        dateTimeFormatter0.toString();
        dateTimeFormatter0.hashCode();
        org.junit.Assert.assertTrue(dateTimeFormatter0.equals(dateTimeFormatter0));
    }

    @Test
    public void test83() throws Throwable {
        org.joda.time.field.DelegatedDateTimeField add0 = null;
        org.joda.time.ReadablePartial readablePartial1 = null;
        int[] intArr2 = null;
        int[] intArr3 = add0.add(readablePartial1, 1, intArr2, 1);
        intArr3.toString();
        intArr3.hashCode();
        org.junit.Assert.assertTrue(intArr3.equals(intArr3));
    }

    @Test
    public void test84() throws Throwable {
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.addMinutes(1);
    }

    @Test
    public void test85() throws Throwable {
        java.lang.String string0 = null;
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.parse(string0);
        localTime1.toString();
        localTime1.hashCode();
        org.junit.Assert.assertTrue(localTime1.equals(localTime1));
    }

    @Test
    public void test86() throws Throwable {
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime(1, 1, 1, 1, 1, 1, 1);
        org.joda.time.LocalDateTime localDateTime1 = localDateTime0.withWeekOfWeekyear(1);
        localDateTime1.toString();
        localDateTime1.hashCode();
        org.junit.Assert.assertTrue(localDateTime1.equals(localDateTime1));
    }

    @Test
    public void test87() throws Throwable {
        org.joda.time.field.DelegatedDateTimeField set0 = null;
        org.joda.time.ReadablePartial readablePartial1 = null;
        int[] intArr2 = null;
        java.lang.String string3 = null;
        java.util.Locale locale4 = null;
        int[] intArr5 = set0.set(readablePartial1, 1, intArr2, string3, locale4);
        intArr5.toString();
        intArr5.hashCode();
        org.junit.Assert.assertTrue(intArr5.equals(intArr5));
    }

    @Test
    public void test88() throws Throwable {
        org.joda.time.LocalTime.Property roundHalfEvenCopy0 = null;
        org.joda.time.LocalTime localTime1 = roundHalfEvenCopy0.roundHalfEvenCopy();
        localTime1.toString();
        localTime1.hashCode();
        org.junit.Assert.assertTrue(localTime1.equals(localTime1));
    }

    @Test
    public void test89() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        java.lang.String string2 = partial1.toString();
        string2.toString();
        string2.hashCode();
        org.junit.Assert.assertTrue(string2.equals(string2));
    }

    @Test
    public void test90() throws Throwable {
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime(1, 1, 1, 1, 1, 1, 1);
        org.joda.time.LocalDateTime localDateTime1 = localDateTime0.withDate(1, 1, 1);
        localDateTime1.toString();
        localDateTime1.hashCode();
        org.junit.Assert.assertTrue(localDateTime1.equals(localDateTime1));
    }

    @Test
    public void test91() throws Throwable {
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.yearMonthDay();
        periodType0.toString();
        periodType0.hashCode();
        org.junit.Assert.assertTrue(periodType0.equals(periodType0));
    }

    @Test
    public void test92() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.Interval interval2 = new org.joda.time.Interval(readableInstant0, readableDuration1);
        interval2.toString();
        interval2.hashCode();
        org.junit.Assert.assertTrue(interval2.equals(interval2));
    }

    @Test
    public void test93() throws Throwable {
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.time();
        periodType0.toString();
        periodType0.hashCode();
        org.junit.Assert.assertTrue(periodType0.equals(periodType0));
    }

    @Test
    public void test94() throws Throwable {
        org.joda.time.DateTimeField dateTimeField0 = null;
        org.joda.time.DurationField durationField1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField3 = new org.joda.time.field.RemainderDateTimeField(dateTimeField0, durationField1, dateTimeFieldType2, 1);
        remainderDateTimeField3.toString();
        remainderDateTimeField3.hashCode();
        org.junit.Assert.assertTrue(remainderDateTimeField3.equals(remainderDateTimeField3));
    }

    @Test
    public void test95() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = partial1.isMatch(readableInstant2);
    }

    @Test
    public void test96() throws Throwable {
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.YearMonthDay yearMonthDay2 = yearMonthDay1.plusDays(1);
        yearMonthDay2.toString();
        yearMonthDay2.hashCode();
        org.junit.Assert.assertTrue(yearMonthDay2.equals(yearMonthDay2));
    }

    @Test
    public void test97() throws Throwable {
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.yearMonthDay();
        int int1 = periodType0.hashCode();
    }

    @Test
    public void test98() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        java.lang.String string2 = null;
        java.util.Locale locale3 = null;
        java.lang.String string4 = localDate1.toString(string2, locale3);
        string4.toString();
        string4.hashCode();
        org.junit.Assert.assertTrue(string4.equals(string4));
    }

    @Test
    public void test99() throws Throwable {
        org.joda.time.Period period0 = new org.joda.time.Period(1, 1, 1, 1);
        org.joda.time.Period period1 = period0.minusMinutes(1);
        period1.toString();
        period1.hashCode();
        org.junit.Assert.assertTrue(period1.equals(period1));
    }

    @Test
    public void test100() throws Throwable {
        org.joda.time.DateTime toYearMonthDay0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = toYearMonthDay0.toYearMonthDay();
        yearMonthDay1.toString();
        yearMonthDay1.hashCode();
        org.junit.Assert.assertTrue(yearMonthDay1.equals(yearMonthDay1));
    }

    @Test
    public void test101() throws Throwable {
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortTime();
        java.lang.StringBuilder stringBuilder1 = null;
        org.joda.time.ReadablePartial readablePartial2 = null;
        dateTimeFormatter0.printTo(stringBuilder1, readablePartial2);
    }

    @Test
    public void test102() throws Throwable {
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.LocalDate localDate2 = yearMonthDay1.toLocalDate();
        localDate2.toString();
        localDate2.hashCode();
        org.junit.Assert.assertTrue(localDate2.equals(localDate2));
    }

    @Test
    public void test103() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        int int2 = localDate1.getEra();
    }

    @Test
    public void test104() throws Throwable {
        java.lang.String string0 = null;
        java.lang.Number number1 = null;
        java.lang.Number number2 = null;
        java.lang.Number number3 = null;
        org.joda.time.IllegalFieldValueException illegalFieldValueException4 = new org.joda.time.IllegalFieldValueException(string0, number1, number2, number3);
        illegalFieldValueException4.toString();
        illegalFieldValueException4.hashCode();
        org.junit.Assert.assertTrue(illegalFieldValueException4.equals(illegalFieldValueException4));
    }

    @Test
    public void test105() throws Throwable {
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0, 1);
        copticChronology1.toString();
        copticChronology1.hashCode();
        org.junit.Assert.assertTrue(copticChronology1.equals(copticChronology1));
    }

    @Test
    public void test106() throws Throwable {
        org.joda.time.field.DelegatedDateTimeField isLenient0 = null;
        boolean boolean1 = isLenient0.isLenient();
    }

    @Test
    public void test107() throws Throwable {
        org.joda.time.field.RemainderDateTimeField getRangeDurationField0 = null;
        org.joda.time.DurationField durationField1 = getRangeDurationField0.getRangeDurationField();
        durationField1.toString();
        durationField1.hashCode();
        org.junit.Assert.assertTrue(durationField1.equals(durationField1));
    }

    @Test
    public void test108() throws Throwable {
        org.joda.time.chrono.BuddhistChronology buddhistChronology0 = org.joda.time.chrono.BuddhistChronology.getInstanceUTC();
        buddhistChronology0.toString();
        buddhistChronology0.hashCode();
        org.junit.Assert.assertTrue(buddhistChronology0.equals(buddhistChronology0));
    }

    @Test
    public void test109() throws Throwable {
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTimeAtMidnight(dateTimeZone2);
        dateTime3.toString();
        dateTime3.hashCode();
        org.junit.Assert.assertTrue(dateTime3.equals(dateTime3));
    }

    @Test
    public void test110() throws Throwable {
        org.joda.time.field.DelegatedDateTimeField getAsShortText0 = null;
        org.joda.time.ReadablePartial readablePartial1 = null;
        java.util.Locale locale2 = null;
        java.lang.String string3 = getAsShortText0.getAsShortText(readablePartial1, locale2);
        string3.toString();
        string3.hashCode();
        org.junit.Assert.assertTrue(string3.equals(string3));
    }

    @Test
    public void test111() throws Throwable {
        org.joda.time.Period period0 = org.joda.time.Period.years(1);
        period0.toString();
        period0.hashCode();
        org.junit.Assert.assertTrue(period0.equals(period0));
    }

    @Test
    public void test112() throws Throwable {
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime(1, 1, 1);
        localTime0.toString();
        localTime0.hashCode();
        org.junit.Assert.assertTrue(localTime0.equals(localTime0));
    }

    @Test
    public void test113() throws Throwable {
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime(1, 1, 1, 1, 1, 1, 1);
        int int1 = localDateTime0.getDayOfWeek();
    }

    @Test
    public void test114() throws Throwable {
        java.lang.Object object0 = null;
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(object0, chronology1);
        localDateTime2.toString();
        localDateTime2.hashCode();
        org.junit.Assert.assertTrue(localDateTime2.equals(localDateTime2));
    }

    @Test
    public void test115() throws Throwable {
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.years();
        durationFieldType0.toString();
        durationFieldType0.hashCode();
        org.junit.Assert.assertTrue(durationFieldType0.equals(durationFieldType0));
    }

    @Test
    public void test116() throws Throwable {
        org.joda.time.field.DelegatedDateTimeField roundHalfEven0 = null;
        long long1 = roundHalfEven0.roundHalfEven(1);
    }

    @Test
    public void test117() throws Throwable {
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.basicOrdinalDate();
        dateTimeFormatter0.toString();
        dateTimeFormatter0.hashCode();
        org.junit.Assert.assertTrue(dateTimeFormatter0.equals(dateTimeFormatter0));
    }

    @Test
    public void test118() throws Throwable {
        org.joda.time.DateTimeField roundHalfFloor0 = null;
        long long1 = roundHalfFloor0.roundHalfFloor(1);
    }

    @Test
    public void test119() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        java.util.Locale locale1 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket2 = new org.joda.time.format.DateTimeParserBucket(1, chronology0, locale1);
        dateTimeParserBucket2.toString();
        dateTimeParserBucket2.hashCode();
        org.junit.Assert.assertTrue(dateTimeParserBucket2.equals(dateTimeParserBucket2));
    }

    @Test
    public void test120() throws Throwable {
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(dateTimeZone0);
        java.lang.String string2 = localTime1.toString();
        string2.toString();
        string2.hashCode();
        org.junit.Assert.assertTrue(string2.equals(string2));
    }

    @Test
    public void test121() throws Throwable {
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortTime();
        java.lang.StringBuffer stringBuffer1 = null;
        dateTimeFormatter0.printTo(stringBuffer1, 1);
    }

    @Test
    public void test122() throws Throwable {
        org.joda.time.field.DelegatedDateTimeField getMinimumValue0 = null;
        int int1 = getMinimumValue0.getMinimumValue(1);
    }

    @Test
    public void test123() throws Throwable {
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.yearMonthDay();
        org.joda.time.ReadablePartial readablePartial1 = null;
        java.lang.String string2 = dateTimeFormatter0.print(readablePartial1);
        string2.toString();
        string2.hashCode();
        org.junit.Assert.assertTrue(string2.equals(string2));
    }

    @Test
    public void test124() throws Throwable {
        org.joda.time.DateTime toLocalDate0 = null;
        org.joda.time.LocalDate localDate1 = toLocalDate0.toLocalDate();
        localDate1.toString();
        localDate1.hashCode();
        org.junit.Assert.assertTrue(localDate1.equals(localDate1));
    }

    @Test
    public void test125() throws Throwable {
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.setWeekyear(1);
    }

    @Test
    public void test126() throws Throwable {
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.tTimeNoMillis();
        dateTimeFormatter0.toString();
        dateTimeFormatter0.hashCode();
        org.junit.Assert.assertTrue(dateTimeFormatter0.equals(dateTimeFormatter0));
    }

    @Test
    public void test127() throws Throwable {
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(dateTimeZone0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalTime localTime3 = localTime1.withField(dateTimeFieldType2, 1);
        localTime3.toString();
        localTime3.hashCode();
        org.junit.Assert.assertTrue(localTime3.equals(localTime3));
    }

    @Test
    public void test128() throws Throwable {
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.Interval interval1 = new org.joda.time.Interval(1, 1, dateTimeZone0);
        interval1.toString();
        interval1.hashCode();
        org.junit.Assert.assertTrue(interval1.equals(interval1));
    }

    @Test
    public void test129() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate2 = localDate1.plusDays(1);
        localDate2.toString();
        localDate2.hashCode();
        org.junit.Assert.assertTrue(localDate2.equals(localDate2));
    }

    @Test
    public void test130() throws Throwable {
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType1 = dateTimeFieldType0.getDurationType();
        durationFieldType1.toString();
        durationFieldType1.hashCode();
        org.junit.Assert.assertTrue(durationFieldType1.equals(durationFieldType1));
    }

    @Test
    public void test131() throws Throwable {
        org.joda.time.chrono.IslamicChronology equals0 = null;
        java.lang.Object object1 = null;
        boolean boolean2 = equals0.equals(object1);
    }

    @Test
    public void test132() throws Throwable {
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.dateHourMinuteSecond();
        dateTimeFormatter0.toString();
        dateTimeFormatter0.hashCode();
        org.junit.Assert.assertTrue(dateTimeFormatter0.equals(dateTimeFormatter0));
    }

    @Test
    public void test133() throws Throwable {
        java.io.Writer writer0 = null;
        org.joda.time.format.FormatUtils.writeUnpaddedInteger(writer0, 1);
    }

    @Test
    public void test134() throws Throwable {
        org.joda.time.MonthDay monthDay0 = org.joda.time.MonthDay.now();
        monthDay0.toString();
        monthDay0.hashCode();
        org.junit.Assert.assertTrue(monthDay0.equals(monthDay0));
    }

    @Test
    public void test135() throws Throwable {
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime(1, 1, 1);
        java.lang.String string1 = null;
        java.util.Locale locale2 = null;
        java.lang.String string3 = localTime0.toString(string1, locale2);
        string3.toString();
        string3.hashCode();
        org.junit.Assert.assertTrue(string3.equals(string3));
    }

    @Test
    public void test136() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate2 = localDate1.plusWeeks(1);
        localDate2.toString();
        localDate2.hashCode();
        org.junit.Assert.assertTrue(localDate2.equals(localDate2));
    }

    @Test
    public void test137() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalDate localDate3 = localDate1.plus(readablePeriod2);
        localDate3.toString();
        localDate3.hashCode();
        org.junit.Assert.assertTrue(localDate3.equals(localDate3));
    }

    @Test
    public void test138() throws Throwable {
        org.joda.time.chrono.IslamicChronology islamicChronology0 = org.joda.time.chrono.IslamicChronology.getInstance();
        islamicChronology0.toString();
        islamicChronology0.hashCode();
        org.junit.Assert.assertTrue(islamicChronology0.equals(islamicChronology0));
    }

    @Test
    public void test139() throws Throwable {
        org.joda.time.DateTime minusHours0 = null;
        org.joda.time.DateTime dateTime1 = minusHours0.minusHours(1);
        dateTime1.toString();
        dateTime1.hashCode();
        org.junit.Assert.assertTrue(dateTime1.equals(dateTime1));
    }

    @Test
    public void test140() throws Throwable {
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        dateTimeFieldType0.toString();
        dateTimeFieldType0.hashCode();
        org.junit.Assert.assertTrue(dateTimeFieldType0.equals(dateTimeFieldType0));
    }

    @Test
    public void test141() throws Throwable {
        org.joda.time.Period period0 = new org.joda.time.Period(1, 1, 1, 1);
        int int1 = period0.getSeconds();
    }

    @Test
    public void test142() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        int int2 = localDate1.getDayOfWeek();
    }

    @Test
    public void test143() throws Throwable {
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.weekyear();
        property1.toString();
        property1.hashCode();
        org.junit.Assert.assertTrue(property1.equals(property1));
    }

    @Test
    public void test144() throws Throwable {
        org.joda.time.field.ZeroIsMaxDateTimeField addWrapField0 = null;
        org.joda.time.ReadablePartial readablePartial1 = null;
        int[] intArr2 = null;
        int[] intArr3 = addWrapField0.addWrapField(readablePartial1, 1, intArr2, 1);
        intArr3.toString();
        intArr3.hashCode();
        org.junit.Assert.assertTrue(intArr3.equals(intArr3));
    }

    @Test
    public void test145() throws Throwable {
        org.joda.time.MutableDateTime.Property set0 = null;
        java.lang.String string1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = set0.set(string1);
        mutableDateTime2.toString();
        mutableDateTime2.hashCode();
        org.junit.Assert.assertTrue(mutableDateTime2.equals(mutableDateTime2));
    }

    @Test
    public void test146() throws Throwable {
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableDuration0, readableInstant1);
        mutableInterval2.toString();
        mutableInterval2.hashCode();
        org.junit.Assert.assertTrue(mutableInterval2.equals(mutableInterval2));
    }

    @Test
    public void test147() throws Throwable {
        org.joda.time.Period period0 = org.joda.time.Period.years(1);
        org.joda.time.Period period1 = period0.withYears(1);
        period1.toString();
        period1.hashCode();
        org.junit.Assert.assertTrue(period1.equals(period1));
    }

    @Test
    public void test148() throws Throwable {
        org.joda.time.LocalTime.Property addNoWrapToCopy0 = null;
        org.joda.time.LocalTime localTime1 = addNoWrapToCopy0.addNoWrapToCopy(1);
        localTime1.toString();
        localTime1.hashCode();
        org.junit.Assert.assertTrue(localTime1.equals(localTime1));
    }

    @Test
    public void test149() throws Throwable {
        org.joda.time.Period period0 = new org.joda.time.Period(1, 1, 1, 1);
        org.joda.time.Period period1 = period0.minusDays(1);
        period1.toString();
        period1.hashCode();
        org.junit.Assert.assertTrue(period1.equals(period1));
    }

    @Test
    public void test150() throws Throwable {
        org.joda.time.format.PeriodFormatter periodFormatter0 = org.joda.time.format.ISOPeriodFormat.alternateExtended();
        periodFormatter0.toString();
        periodFormatter0.hashCode();
        org.junit.Assert.assertTrue(periodFormatter0.equals(periodFormatter0));
    }

    @Test
    public void test151() throws Throwable {
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval(1, 1);
        mutableInterval0.toString();
        mutableInterval0.hashCode();
        org.junit.Assert.assertTrue(mutableInterval0.equals(mutableInterval0));
    }

    @Test
    public void test152() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = partial1.withChronologyRetainFields(chronology2);
        partial3.toString();
        partial3.hashCode();
        org.junit.Assert.assertTrue(partial3.equals(partial3));
    }

    @Test
    public void test153() throws Throwable {
        java.lang.Object object0 = null;
        org.joda.time.PeriodType periodType1 = null;
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(object0, periodType1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        mutablePeriod2.setPeriod(readablePeriod3);
    }

    @Test
    public void test154() throws Throwable {
        org.joda.time.DateTime toDateTime0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = toDateTime0.toDateTime(dateTimeZone1);
        dateTime2.toString();
        dateTime2.hashCode();
        org.junit.Assert.assertTrue(dateTime2.equals(dateTime2));
    }

    @Test
    public void test155() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        java.util.Locale locale1 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket2 = new org.joda.time.format.DateTimeParserBucket(1, chronology0, locale1);
        java.lang.Integer integer3 = dateTimeParserBucket2.getPivotYear();
        integer3.toString();
        integer3.hashCode();
        org.junit.Assert.assertTrue(integer3.equals(integer3));
    }

    @Test
    public void test156() throws Throwable {
        org.joda.time.field.DelegatedDateTimeField add0 = null;
        long long1 = add0.add(1, 1);
    }

    @Test
    public void test157() throws Throwable {
        org.joda.time.DateTime dayOfWeek0 = null;
        org.joda.time.DateTime.Property property1 = dayOfWeek0.dayOfWeek();
        property1.toString();
        property1.hashCode();
        org.junit.Assert.assertTrue(property1.equals(property1));
    }

    @Test
    public void test158() throws Throwable {
        org.joda.time.DateTimeField getAsText0 = null;
        java.util.Locale locale1 = null;
        java.lang.String string2 = getAsText0.getAsText(1, locale1);
        string2.toString();
        string2.hashCode();
        org.junit.Assert.assertTrue(string2.equals(string2));
    }

    @Test
    public void test159() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod(1, chronology0);
        mutablePeriod1.toString();
        mutablePeriod1.hashCode();
        org.junit.Assert.assertTrue(mutablePeriod1.equals(mutablePeriod1));
    }

    @Test
    public void test160() throws Throwable {
        long long0 = org.joda.time.DateTimeUtils.currentTimeMillis();
    }

    @Test
    public void test161() throws Throwable {
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(1, dateTimeZone0);
        localTime1.toString();
        localTime1.hashCode();
        org.junit.Assert.assertTrue(localTime1.equals(localTime1));
    }

    @Test
    public void test162() throws Throwable {
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        readableInterval1.toString();
        readableInterval1.hashCode();
        org.junit.Assert.assertTrue(readableInterval1.equals(readableInterval1));
    }

    @Test
    public void test163() throws Throwable {
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        readableInterval2.toString();
        readableInterval2.hashCode();
        org.junit.Assert.assertTrue(readableInterval2.equals(readableInterval2));
    }

    @Test
    public void test164() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(1, chronology0);
        dateMidnight1.toString();
        dateMidnight1.hashCode();
        org.junit.Assert.assertTrue(dateMidnight1.equals(dateMidnight1));
    }

    @Test
    public void test165() throws Throwable {
        org.joda.time.DurationField toString0 = null;
        java.lang.String string1 = toString0.toString();
        string1.toString();
        string1.hashCode();
        org.junit.Assert.assertTrue(string1.equals(string1));
    }

    @Test
    public void test166() throws Throwable {
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.GJChronology gJChronology1 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0);
        gJChronology1.toString();
        gJChronology1.hashCode();
        org.junit.Assert.assertTrue(gJChronology1.equals(gJChronology1));
    }

    @Test
    public void test167() throws Throwable {
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.basicWeekDateTime();
        dateTimeFormatter0.toString();
        dateTimeFormatter0.hashCode();
        org.junit.Assert.assertTrue(dateTimeFormatter0.equals(dateTimeFormatter0));
    }

    @Test
    public void test168() throws Throwable {
        org.joda.time.field.DelegatedDateTimeField roundFloor0 = null;
        long long1 = roundFloor0.roundFloor(1);
    }

    @Test
    public void test169() throws Throwable {
        org.joda.time.DateTime.Property setCopy0 = null;
        java.lang.String string1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.DateTime dateTime3 = setCopy0.setCopy(string1, locale2);
        dateTime3.toString();
        dateTime3.hashCode();
        org.junit.Assert.assertTrue(dateTime3.equals(dateTime3));
    }

    @Test
    public void test170() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        chronology1.toString();
        chronology1.hashCode();
        org.junit.Assert.assertTrue(chronology1.equals(chronology1));
    }

    @Test
    public void test171() throws Throwable {
        org.joda.time.LocalTime.Property setCopy0 = null;
        org.joda.time.LocalTime localTime1 = setCopy0.setCopy(1);
        localTime1.toString();
        localTime1.hashCode();
        org.junit.Assert.assertTrue(localTime1.equals(localTime1));
    }

    @Test
    public void test172() throws Throwable {
        org.joda.time.tz.Provider provider0 = null;
        org.joda.time.DateTimeZone.setProvider(provider0);
    }

    @Test
    public void test173() throws Throwable {
        org.joda.time.Period period0 = new org.joda.time.Period(1, 1, 1, 1);
        org.joda.time.DurationFieldType durationFieldType1 = org.joda.time.DurationFieldType.years();
        org.joda.time.Period period2 = period0.withField(durationFieldType1, 1);
        period2.toString();
        period2.hashCode();
        org.junit.Assert.assertTrue(period2.equals(period2));
    }

    @Test
    public void test174() throws Throwable {
        org.joda.time.Period period0 = org.joda.time.Period.years(1);
        int int1 = period0.getSeconds();
    }

    @Test
    public void test175() throws Throwable {
        org.joda.time.DurationField durationField0 = null;
        org.joda.time.DurationFieldType durationFieldType1 = org.joda.time.DurationFieldType.years();
        org.joda.time.field.DecoratedDurationField decoratedDurationField2 = new org.joda.time.field.DecoratedDurationField(durationField0, durationFieldType1);
        decoratedDurationField2.toString();
        decoratedDurationField2.hashCode();
        org.junit.Assert.assertTrue(decoratedDurationField2.equals(decoratedDurationField2));
    }

    @Test
    public void test176() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.DurationField durationField2 = chronology1.days();
        durationField2.toString();
        durationField2.hashCode();
        org.junit.Assert.assertTrue(durationField2.equals(durationField2));
    }

    @Test
    public void test177() throws Throwable {
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime(1, 1, 1, 1, 1, 1, 1);
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.yearOfEra();
        property1.toString();
        property1.hashCode();
        org.junit.Assert.assertTrue(property1.equals(property1));
    }

    @Test
    public void test178() throws Throwable {
        java.lang.String string0 = null;
        org.joda.time.field.FieldUtils.verifyValueBounds(string0, 1, 1, 1);
    }

    @Test
    public void test179() throws Throwable {
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(dateTimeZone0);
        org.joda.time.ReadablePartial readablePartial2 = null;
        org.joda.time.LocalTime localTime3 = localTime1.withFields(readablePartial2);
        localTime3.toString();
        localTime3.hashCode();
        org.junit.Assert.assertTrue(localTime3.equals(localTime3));
    }

    @Test
    public void test180() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(1, chronology0);
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight1.plusMonths(1);
        dateMidnight2.toString();
        dateMidnight2.hashCode();
        org.junit.Assert.assertTrue(dateMidnight2.equals(dateMidnight2));
    }

    @Test
    public void test181() throws Throwable {
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.GJChronology gJChronology1 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0);
        org.joda.time.Chronology chronology2 = gJChronology1.withUTC();
        chronology2.toString();
        chronology2.hashCode();
        org.junit.Assert.assertTrue(chronology2.equals(chronology2));
    }

    @Test
    public void test182() throws Throwable {
        org.joda.time.DateTime.Property addToCopy0 = null;
        org.joda.time.DateTime dateTime1 = addToCopy0.addToCopy(1);
        dateTime1.toString();
        dateTime1.hashCode();
        org.junit.Assert.assertTrue(dateTime1.equals(dateTime1));
    }

    @Test
    public void test183() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.MonthDay monthDay2 = new org.joda.time.MonthDay(1, 1, chronology1);
        monthDay2.toString();
        monthDay2.hashCode();
        org.junit.Assert.assertTrue(monthDay2.equals(monthDay2));
    }

    @Test
    public void test184() throws Throwable {
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.weekyears();
        durationFieldType0.toString();
        durationFieldType0.hashCode();
        org.junit.Assert.assertTrue(durationFieldType0.equals(durationFieldType0));
    }

    @Test
    public void test185() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(1, chronology1);
        dateTime2.toString();
        dateTime2.hashCode();
        org.junit.Assert.assertTrue(dateTime2.equals(dateTime2));
    }

    @Test
    public void test186() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(1, chronology1);
        org.joda.time.DateTime dateTime3 = dateTime2.withMinuteOfHour(1);
        dateTime3.toString();
        dateTime3.hashCode();
        org.junit.Assert.assertTrue(dateTime3.equals(dateTime3));
    }

    @Test
    public void test187() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate.Property property2 = localDate1.dayOfYear();
        property2.toString();
        property2.hashCode();
        org.junit.Assert.assertTrue(property2.equals(property2));
    }

    @Test
    public void test188() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        java.util.Locale locale1 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket2 = new org.joda.time.format.DateTimeParserBucket(1, chronology0, locale1);
        java.util.Locale locale3 = dateTimeParserBucket2.getLocale();
        locale3.toString();
        locale3.hashCode();
        org.junit.Assert.assertTrue(locale3.equals(locale3));
    }

    @Test
    public void test189() throws Throwable {
        org.joda.time.DateTimeComparator dateTimeComparator0 = org.joda.time.DateTimeComparator.getInstance();
        dateTimeComparator0.toString();
        dateTimeComparator0.hashCode();
        org.junit.Assert.assertTrue(dateTimeComparator0.equals(dateTimeComparator0));
    }

    @Test
    public void test190() throws Throwable {
        org.joda.time.DateTimeField isLenient0 = null;
        boolean boolean1 = isLenient0.isLenient();
    }

    @Test
    public void test191() throws Throwable {
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(1, dateTimeZone0);
        org.joda.time.ReadablePartial readablePartial2 = null;
        org.joda.time.LocalTime localTime3 = localTime1.withFields(readablePartial2);
        localTime3.toString();
        localTime3.hashCode();
        org.junit.Assert.assertTrue(localTime3.equals(localTime3));
    }

    @Test
    public void test192() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(1, chronology0);
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight1.withCenturyOfEra(1);
        dateMidnight2.toString();
        dateMidnight2.hashCode();
        org.junit.Assert.assertTrue(dateMidnight2.equals(dateMidnight2));
    }

    @Test
    public void test193() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        java.util.Locale locale1 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket2 = new org.joda.time.format.DateTimeParserBucket(1, chronology0, locale1);
        dateTimeParserBucket2.setOffset(1);
    }

    @Test
    public void test194() throws Throwable {
        org.joda.time.MonthDay monthDay0 = new org.joda.time.MonthDay();
        monthDay0.toString();
        monthDay0.hashCode();
        org.junit.Assert.assertTrue(monthDay0.equals(monthDay0));
    }

    @Test
    public void test195() throws Throwable {
        org.joda.time.DateTimeField toString0 = null;
        java.lang.String string1 = toString0.toString();
        string1.toString();
        string1.hashCode();
        org.junit.Assert.assertTrue(string1.equals(string1));
    }

    @Test
    public void test196() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(1, chronology0);
        org.joda.time.YearMonthDay yearMonthDay2 = dateMidnight1.toYearMonthDay();
        yearMonthDay2.toString();
        yearMonthDay2.hashCode();
        org.junit.Assert.assertTrue(yearMonthDay2.equals(yearMonthDay2));
    }

    @Test
    public void test197() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay(1, 1, 1, 1, chronology1);
        timeOfDay2.toString();
        timeOfDay2.hashCode();
        org.junit.Assert.assertTrue(timeOfDay2.equals(timeOfDay2));
    }

    @Test
    public void test198() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Hours hours2 = org.joda.time.Hours.hoursBetween(readableInstant0, readableInstant1);
        hours2.toString();
        hours2.hashCode();
        org.junit.Assert.assertTrue(hours2.equals(hours2));
    }

    @Test
    public void test199() throws Throwable {
        java.lang.Object object0 = null;
        org.joda.time.PeriodType periodType1 = null;
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(object0, periodType1);
        mutablePeriod2.addDays(1);
    }

    @Test
    public void test200() throws Throwable {
        org.joda.time.MutablePeriod mutablePeriod0 = new org.joda.time.MutablePeriod(1, 1, 1, 1);
        mutablePeriod0.toString();
        mutablePeriod0.hashCode();
        org.junit.Assert.assertTrue(mutablePeriod0.equals(mutablePeriod0));
    }

    @Test
    public void test201() throws Throwable {
        java.lang.Object object0 = null;
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getChronology(chronology1);
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(object0, chronology2);
        mutableInterval3.toString();
        mutableInterval3.hashCode();
        org.junit.Assert.assertTrue(mutableInterval3.equals(mutableInterval3));
    }

    @Test
    public void test202() throws Throwable {
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.basicOrdinalDateTime();
        dateTimeFormatter0.toString();
        dateTimeFormatter0.hashCode();
        org.junit.Assert.assertTrue(dateTimeFormatter0.equals(dateTimeFormatter0));
    }

    @Test
    public void test203() throws Throwable {
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime(1, 1, 1);
        int int1 = localTime0.getMillisOfDay();
    }

    @Test
    public void test204() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(1, chronology0);
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight1.minusMonths(1);
        dateMidnight2.toString();
        dateMidnight2.hashCode();
        org.junit.Assert.assertTrue(dateMidnight2.equals(dateMidnight2));
    }

    @Test
    public void test205() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDate.Property property3 = localDate1.property(dateTimeFieldType2);
        property3.toString();
        property3.hashCode();
        org.junit.Assert.assertTrue(property3.equals(property3));
    }

    @Test
    public void test206() throws Throwable {
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.DurationField durationField1 = null;
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField2 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField1);
        unsupportedDateTimeField2.toString();
        unsupportedDateTimeField2.hashCode();
        org.junit.Assert.assertTrue(unsupportedDateTimeField2.equals(unsupportedDateTimeField2));
    }

    @Test
    public void test207() throws Throwable {
        org.joda.time.LocalDateTime.Property withMaximumValue0 = null;
        org.joda.time.LocalDateTime localDateTime1 = withMaximumValue0.withMaximumValue();
        localDateTime1.toString();
        localDateTime1.hashCode();
        org.junit.Assert.assertTrue(localDateTime1.equals(localDateTime1));
    }

    @Test
    public void test208() throws Throwable {
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.yearMonthDay();
        java.lang.Appendable appendable1 = null;
        dateTimeFormatter0.printTo(appendable1, 1);
    }

    @Test
    public void test209() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(1, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Chronology chronology4 = org.joda.time.DateTimeUtils.getChronology(chronology3);
        org.joda.time.DateTime dateTime5 = dateTime2.withChronology(chronology4);
        dateTime5.toString();
        dateTime5.hashCode();
        org.junit.Assert.assertTrue(dateTime5.equals(dateTime5));
    }

    @Test
    public void test210() throws Throwable {
        org.joda.time.DateTimeField isLeap0 = null;
        boolean boolean1 = isLeap0.isLeap(1);
    }

    @Test
    public void test211() throws Throwable {
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(1, 1, 1, 1, 1, 1, dateTimeZone0);
        dateTime1.toString();
        dateTime1.hashCode();
        org.junit.Assert.assertTrue(dateTime1.equals(dateTime1));
    }

    @Test
    public void test212() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.Chronology chronology2 = localDate1.getChronology();
        chronology2.toString();
        chronology2.hashCode();
        org.junit.Assert.assertTrue(chronology2.equals(chronology2));
    }

    @Test
    public void test213() throws Throwable {
        java.lang.String string0 = null;
        java.lang.ClassLoader classLoader1 = null;
        org.joda.time.tz.ZoneInfoProvider zoneInfoProvider2 = new org.joda.time.tz.ZoneInfoProvider(string0, classLoader1);
        zoneInfoProvider2.toString();
        zoneInfoProvider2.hashCode();
        org.junit.Assert.assertTrue(zoneInfoProvider2.equals(zoneInfoProvider2));
    }

    @Test
    public void test214() throws Throwable {
        org.joda.time.LocalDate.Property addToCopy0 = null;
        org.joda.time.LocalDate localDate1 = addToCopy0.addToCopy(1);
        localDate1.toString();
        localDate1.hashCode();
        org.junit.Assert.assertTrue(localDate1.equals(localDate1));
    }

    @Test
    public void test215() throws Throwable {
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.years();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getChronology(chronology1);
        boolean boolean3 = durationFieldType0.isSupported(chronology2);
    }

    @Test
    public void test216() throws Throwable {
        org.joda.time.MutableDateTime.Property roundHalfCeiling0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = roundHalfCeiling0.roundHalfCeiling();
        mutableDateTime1.toString();
        mutableDateTime1.hashCode();
        org.junit.Assert.assertTrue(mutableDateTime1.equals(mutableDateTime1));
    }

    @Test
    public void test217() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.DurationField durationField2 = chronology1.minutes();
        durationField2.toString();
        durationField2.hashCode();
        org.junit.Assert.assertTrue(durationField2.equals(durationField2));
    }

    @Test
    public void test218() throws Throwable {
        org.joda.time.LocalDate.Property roundFloorCopy0 = null;
        org.joda.time.LocalDate localDate1 = roundFloorCopy0.roundFloorCopy();
        localDate1.toString();
        localDate1.hashCode();
        org.junit.Assert.assertTrue(localDate1.equals(localDate1));
    }

    @Test
    public void test219() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.LocalDate localDate2 = org.joda.time.LocalDate.now(chronology1);
        localDate2.toString();
        localDate2.hashCode();
        org.junit.Assert.assertTrue(localDate2.equals(localDate2));
    }

    @Test
    public void test220() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.DurationField durationField2 = chronology1.seconds();
        durationField2.toString();
        durationField2.hashCode();
        org.junit.Assert.assertTrue(durationField2.equals(durationField2));
    }

    @Test
    public void test221() throws Throwable {
        java.util.Calendar calendar0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = org.joda.time.YearMonthDay.fromCalendarFields(calendar0);
        yearMonthDay1.toString();
        yearMonthDay1.hashCode();
        org.junit.Assert.assertTrue(yearMonthDay1.equals(yearMonthDay1));
    }

    @Test
    public void test222() throws Throwable {
        org.joda.time.LocalDateTime.Property addToCopy0 = null;
        org.joda.time.LocalDateTime localDateTime1 = addToCopy0.addToCopy(1);
        localDateTime1.toString();
        localDateTime1.hashCode();
        org.junit.Assert.assertTrue(localDateTime1.equals(localDateTime1));
    }

    @Test
    public void test223() throws Throwable {
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime(1, 1, 1, 1, 1, 1, 1);
        org.joda.time.LocalDateTime localDateTime1 = localDateTime0.withMinuteOfHour(1);
        localDateTime1.toString();
        localDateTime1.hashCode();
        org.junit.Assert.assertTrue(localDateTime1.equals(localDateTime1));
    }

    @Test
    public void test224() throws Throwable {
        org.joda.time.Period period0 = new org.joda.time.Period(1, 1, 1, 1);
        org.joda.time.Period period1 = period0.withMonths(1);
        period1.toString();
        period1.hashCode();
        org.junit.Assert.assertTrue(period1.equals(period1));
    }

    @Test
    public void test225() throws Throwable {
        org.joda.time.LocalTime.Property setCopy0 = null;
        java.lang.String string1 = null;
        org.joda.time.LocalTime localTime2 = setCopy0.setCopy(string1);
        localTime2.toString();
        localTime2.hashCode();
        org.junit.Assert.assertTrue(localTime2.equals(localTime2));
    }

    @Test
    public void test226() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(1, chronology0);
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight1.withYear(1);
        dateMidnight2.toString();
        dateMidnight2.hashCode();
        org.junit.Assert.assertTrue(dateMidnight2.equals(dateMidnight2));
    }

    @Test
    public void test227() throws Throwable {
        org.joda.time.DateTimeField getAsShortText0 = null;
        java.lang.String string1 = getAsShortText0.getAsShortText(1);
        string1.toString();
        string1.hashCode();
        org.junit.Assert.assertTrue(string1.equals(string1));
    }

    @Test
    public void test228() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(1, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Chronology chronology4 = org.joda.time.DateTimeUtils.getChronology(chronology3);
        org.joda.time.DateTime dateTime5 = dateTime2.toDateTime(chronology4);
        dateTime5.toString();
        dateTime5.hashCode();
        org.junit.Assert.assertTrue(dateTime5.equals(dateTime5));
    }

    @Test
    public void test229() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        java.util.Locale locale1 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket2 = new org.joda.time.format.DateTimeParserBucket(1, chronology0, locale1);
        java.lang.Object object3 = null;
        boolean boolean4 = dateTimeParserBucket2.restoreState(object3);
    }

    @Test
    public void test230() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay(chronology0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = monthDay1.getFieldType(1);
        dateTimeFieldType2.toString();
        dateTimeFieldType2.hashCode();
        org.junit.Assert.assertTrue(dateTimeFieldType2.equals(dateTimeFieldType2));
    }

    @Test
    public void test231() throws Throwable {
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.addWeekyears(1);
    }

    @Test
    public void test232() throws Throwable {
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfWeek();
        dateTimeFieldType0.toString();
        dateTimeFieldType0.hashCode();
        org.junit.Assert.assertTrue(dateTimeFieldType0.equals(dateTimeFieldType0));
    }

    @Test
    public void test233() throws Throwable {
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.addDays(1);
    }

    @Test
    public void test234() throws Throwable {
        org.joda.time.YearMonth yearMonth0 = new org.joda.time.YearMonth(1, 1);
        yearMonth0.toString();
        yearMonth0.hashCode();
        org.junit.Assert.assertTrue(yearMonth0.equals(yearMonth0));
    }

    @Test
    public void test235() throws Throwable {
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.basicOrdinalDate();
        org.joda.time.DateTimeZone dateTimeZone1 = dateTimeFormatter0.getZone();
        dateTimeZone1.toString();
        dateTimeZone1.hashCode();
        org.junit.Assert.assertTrue(dateTimeZone1.equals(dateTimeZone1));
    }

    @Test
    public void test236() throws Throwable {
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortDateTime();
        java.lang.Appendable appendable1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        dateTimeFormatter0.printTo(appendable1, readableInstant2);
    }

    @Test
    public void test237() throws Throwable {
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.dayOfWeek();
        property1.toString();
        property1.hashCode();
        org.junit.Assert.assertTrue(property1.equals(property1));
    }

    @Test
    public void test238() throws Throwable {
        org.joda.time.field.UnsupportedDateTimeField toString0 = null;
        java.lang.String string1 = toString0.toString();
        string1.toString();
        string1.hashCode();
        org.junit.Assert.assertTrue(string1.equals(string1));
    }

    @Test
    public void test239() throws Throwable {
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.YearMonthDay.Property property3 = yearMonthDay1.property(dateTimeFieldType2);
        property3.toString();
        property3.hashCode();
        org.junit.Assert.assertTrue(property3.equals(property3));
    }

    @Test
    public void test240() throws Throwable {
        org.joda.time.field.ZeroIsMaxDateTimeField set0 = null;
        long long1 = set0.set(1, 1);
    }

    @Test
    public void test241() throws Throwable {
        java.lang.Object object0 = null;
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth(object0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getChronology(chronology2);
        org.joda.time.YearMonth yearMonth4 = yearMonth1.withChronologyRetainFields(chronology3);
        yearMonth4.toString();
        yearMonth4.hashCode();
        org.junit.Assert.assertTrue(yearMonth4.equals(yearMonth4));
    }

    @Test
    public void test242() throws Throwable {
        org.joda.time.field.ZeroIsMaxDateTimeField add0 = null;
        long long1 = add0.add(1, 1);
    }

    @Test
    public void test243() throws Throwable {
        org.joda.time.LocalDateTime.Property roundFloorCopy0 = null;
        org.joda.time.LocalDateTime localDateTime1 = roundFloorCopy0.roundFloorCopy();
        localDateTime1.toString();
        localDateTime1.hashCode();
        org.junit.Assert.assertTrue(localDateTime1.equals(localDateTime1));
    }

    @Test
    public void test244() throws Throwable {
        org.joda.time.ReadablePartial readablePartial0 = null;
        org.joda.time.ReadablePartial readablePartial1 = null;
        org.joda.time.Minutes minutes2 = org.joda.time.Minutes.minutesBetween(readablePartial0, readablePartial1);
        minutes2.toString();
        minutes2.hashCode();
        org.junit.Assert.assertTrue(minutes2.equals(minutes2));
    }

    @Test
    public void test245() throws Throwable {
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.GJChronology gJChronology1 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0);
        int int2 = gJChronology1.hashCode();
    }

    @Test
    public void test246() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate2 = localDate1.plusYears(1);
        localDate2.toString();
        localDate2.hashCode();
        org.junit.Assert.assertTrue(localDate2.equals(localDate2));
    }

    @Test
    public void test247() throws Throwable {
        java.lang.Object object0 = null;
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(object0, chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.millisOfDay();
        property3.toString();
        property3.hashCode();
        org.junit.Assert.assertTrue(property3.equals(property3));
    }

    @Test
    public void test248() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Chronology chronology3 = chronology1.withZone(dateTimeZone2);
        chronology3.toString();
        chronology3.hashCode();
        org.junit.Assert.assertTrue(chronology3.equals(chronology3));
    }

    @Test
    public void test249() throws Throwable {
        org.joda.time.field.UnsupportedDateTimeField getAsShortText0 = null;
        java.lang.String string1 = getAsShortText0.getAsShortText(1);
        string1.toString();
        string1.hashCode();
        org.junit.Assert.assertTrue(string1.equals(string1));
    }

    @Test
    public void test250() throws Throwable {
        org.joda.time.Period period0 = new org.joda.time.Period(1, 1);
        org.joda.time.Period period1 = period0.normalizedStandard();
        period1.toString();
        period1.hashCode();
        org.junit.Assert.assertTrue(period1.equals(period1));
    }

    @Test
    public void test251() throws Throwable {
        org.joda.time.MonthDay monthDay0 = org.joda.time.MonthDay.now();
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.MonthDay monthDay2 = monthDay0.withPeriodAdded(readablePeriod1, 1);
        monthDay2.toString();
        monthDay2.hashCode();
        org.junit.Assert.assertTrue(monthDay2.equals(monthDay2));
    }

    @Test
    public void test252() throws Throwable {
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval(1, 1);
        mutableInterval0.setInterval(1, 1);
    }

    @Test
    public void test253() throws Throwable {
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.basicOrdinalDateTime();
        java.lang.String string1 = null;
        org.joda.time.DateTime dateTime2 = dateTimeFormatter0.parseDateTime(string1);
        dateTime2.toString();
        dateTime2.hashCode();
        org.junit.Assert.assertTrue(dateTime2.equals(dateTime2));
    }

    @Test
    public void test254() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        int int2 = localDate1.getWeekyear();
    }

    @Test
    public void test255() throws Throwable {
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        dateTimeFieldType0.toString();
        dateTimeFieldType0.hashCode();
        org.junit.Assert.assertTrue(dateTimeFieldType0.equals(dateTimeFieldType0));
    }

    @Test
    public void test256() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate2 = localDate1.minusMonths(1);
        localDate2.toString();
        localDate2.hashCode();
        org.junit.Assert.assertTrue(localDate2.equals(localDate2));
    }

    @Test
    public void test257() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay(1, 1, 1, 1, chronology0);
        org.joda.time.TimeOfDay timeOfDay2 = timeOfDay1.minusMillis(1);
        timeOfDay2.toString();
        timeOfDay2.hashCode();
        org.junit.Assert.assertTrue(timeOfDay2.equals(timeOfDay2));
    }

    @Test
    public void test258() throws Throwable {
        org.joda.time.Hours toStandardDays0 = null;
        org.joda.time.Days days1 = toStandardDays0.toStandardDays();
        days1.toString();
        days1.hashCode();
        org.junit.Assert.assertTrue(days1.equals(days1));
    }

    @Test
    public void test259() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(1, chronology1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.DateTime dateTime4 = dateTime2.withPeriodAdded(readablePeriod3, 1);
        dateTime4.toString();
        dateTime4.hashCode();
        org.junit.Assert.assertTrue(dateTime4.equals(dateTime4));
    }

    @Test
    public void test260() throws Throwable {
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.addMonths(1);
    }

    @Test
    public void test261() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(1, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.millisOfDay();
        property3.toString();
        property3.hashCode();
        org.junit.Assert.assertTrue(property3.equals(property3));
    }

    @Test
    public void test262() throws Throwable {
        org.joda.time.YearMonthDay.Property setCopy0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = setCopy0.setCopy(1);
        yearMonthDay1.toString();
        yearMonthDay1.hashCode();
        org.junit.Assert.assertTrue(yearMonthDay1.equals(yearMonthDay1));
    }

    @Test
    public void test263() throws Throwable {
        org.joda.time.field.DelegatedDateTimeField roundHalfCeiling0 = null;
        long long1 = roundHalfCeiling0.roundHalfCeiling(1);
    }

    @Test
    public void test264() throws Throwable {
        org.joda.time.field.UnsupportedDateTimeField getType0 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = getType0.getType();
        dateTimeFieldType1.toString();
        dateTimeFieldType1.hashCode();
        org.junit.Assert.assertTrue(dateTimeFieldType1.equals(dateTimeFieldType1));
    }

    @Test
    public void test265() throws Throwable {
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.basicOrdinalDate();
        java.util.Locale locale1 = dateTimeFormatter0.getLocale();
        locale1.toString();
        locale1.hashCode();
        org.junit.Assert.assertTrue(locale1.equals(locale1));
    }

    @Test
    public void test266() throws Throwable {
        org.joda.time.field.UnsupportedDateTimeField roundFloor0 = null;
        long long1 = roundFloor0.roundFloor(1);
    }

    @Test
    public void test267() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime(chronology1);
        mutableDateTime2.toString();
        mutableDateTime2.hashCode();
        org.junit.Assert.assertTrue(mutableDateTime2.equals(mutableDateTime2));
    }

    @Test
    public void test268() throws Throwable {
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.yearMonthDay();
        int int1 = dateTimeFormatter0.getDefaultYear();
    }

    @Test
    public void test269() throws Throwable {
        org.joda.time.field.ZeroIsMaxDateTimeField addWrapField0 = null;
        long long1 = addWrapField0.addWrapField(1, 1);
    }

    @Test
    public void test270() throws Throwable {
        org.joda.time.DateTimeZone isStandardOffset0 = null;
        boolean boolean1 = isStandardOffset0.isStandardOffset(1);
    }

    @Test
    public void test271() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = dateTime2.toDateTime(dateTimeZone3);
        dateTime4.toString();
        dateTime4.hashCode();
        org.junit.Assert.assertTrue(dateTime4.equals(dateTime4));
    }

    @Test
    public void test272() throws Throwable {
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Days days2 = org.joda.time.Days.daysIn(readableInterval1);
        days2.toString();
        days2.hashCode();
        org.junit.Assert.assertTrue(days2.equals(days2));
    }

    @Test
    public void test273() throws Throwable {
        org.joda.time.DateTimeField getAsShortText0 = null;
        java.util.Locale locale1 = null;
        java.lang.String string2 = getAsShortText0.getAsShortText(1, locale1);
        string2.toString();
        string2.hashCode();
        org.junit.Assert.assertTrue(string2.equals(string2));
    }

    @Test
    public void test274() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime(chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
    }

    @Test
    public void test275() throws Throwable {
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.time();
        int int1 = periodType0.size();
    }

    @Test
    public void test276() throws Throwable {
        org.joda.time.Period period0 = org.joda.time.Period.years(1);
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.Period period2 = period0.withFields(readablePeriod1);
        period2.toString();
        period2.hashCode();
        org.junit.Assert.assertTrue(period2.equals(period2));
    }

    @Test
    public void test277() throws Throwable {
        org.joda.time.MutableDateTime.Property set0 = null;
        java.lang.String string1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = set0.set(string1, locale2);
        mutableDateTime3.toString();
        mutableDateTime3.hashCode();
        org.junit.Assert.assertTrue(mutableDateTime3.equals(mutableDateTime3));
    }

    @Test
    public void test278() throws Throwable {
        org.joda.time.DateTimeField roundHalfEven0 = null;
        long long1 = roundHalfEven0.roundHalfEven(1);
    }

    @Test
    public void test279() throws Throwable {
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(1, dateTimeZone0);
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.years();
        boolean boolean3 = localTime1.isSupported(durationFieldType2);
    }

    @Test
    public void test280() throws Throwable {
        java.lang.StringBuffer stringBuffer0 = null;
        org.joda.time.format.FormatUtils.appendPaddedInteger(stringBuffer0, 1, 1);
    }

    @Test
    public void test281() throws Throwable {
        org.joda.time.ReadablePartial readablePartial0 = null;
        org.joda.time.ReadablePartial readablePartial1 = null;
        org.joda.time.Weeks weeks2 = org.joda.time.Weeks.weeksBetween(readablePartial0, readablePartial1);
        weeks2.toString();
        weeks2.hashCode();
        org.junit.Assert.assertTrue(weeks2.equals(weeks2));
    }

    @Test
    public void test282() throws Throwable {
        java.lang.String string0 = null;
        org.joda.time.Minutes minutes1 = org.joda.time.Minutes.parseMinutes(string0);
        minutes1.toString();
        minutes1.hashCode();
        org.junit.Assert.assertTrue(minutes1.equals(minutes1));
    }

    @Test
    public void test283() throws Throwable {
        org.joda.time.MonthDay monthDay0 = new org.joda.time.MonthDay();
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.MonthDay monthDay2 = monthDay0.withPeriodAdded(readablePeriod1, 1);
        monthDay2.toString();
        monthDay2.hashCode();
        org.junit.Assert.assertTrue(monthDay2.equals(monthDay2));
    }

    @Test
    public void test284() throws Throwable {
        org.joda.time.Weeks toStandardDuration0 = null;
        org.joda.time.Duration duration1 = toStandardDuration0.toStandardDuration();
        duration1.toString();
        duration1.hashCode();
        org.junit.Assert.assertTrue(duration1.equals(duration1));
    }

    @Test
    public void test285() throws Throwable {
        org.joda.time.LocalTime.Property setCopy0 = null;
        java.lang.String string1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.LocalTime localTime3 = setCopy0.setCopy(string1, locale2);
        localTime3.toString();
        localTime3.hashCode();
        org.junit.Assert.assertTrue(localTime3.equals(localTime3));
    }

    @Test
    public void test286() throws Throwable {
        java.lang.Object object0 = null;
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth(object0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.YearMonth yearMonth3 = yearMonth1.withField(dateTimeFieldType2, 1);
        yearMonth3.toString();
        yearMonth3.hashCode();
        org.junit.Assert.assertTrue(yearMonth3.equals(yearMonth3));
    }

    @Test
    public void test287() throws Throwable {
        org.joda.time.field.UnsupportedDateTimeField getMaximumShortTextLength0 = null;
        java.util.Locale locale1 = null;
        int int2 = getMaximumShortTextLength0.getMaximumShortTextLength(locale1);
    }

    @Test
    public void test288() throws Throwable {
        java.lang.String string0 = null;
        java.lang.Number number1 = null;
        java.lang.Number number2 = null;
        java.lang.Number number3 = null;
        org.joda.time.IllegalFieldValueException illegalFieldValueException4 = new org.joda.time.IllegalFieldValueException(string0, number1, number2, number3);
        java.lang.Number number5 = illegalFieldValueException4.getLowerBound();
        number5.toString();
        number5.hashCode();
        org.junit.Assert.assertTrue(number5.equals(number5));
    }

    @Test
    public void test289() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay(1, 1, 1, 1, chronology1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.TimeOfDay timeOfDay4 = timeOfDay2.plus(readablePeriod3);
        timeOfDay4.toString();
        timeOfDay4.hashCode();
        org.junit.Assert.assertTrue(timeOfDay4.equals(timeOfDay4));
    }

    @Test
    public void test290() throws Throwable {
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.standard();
        java.lang.String string1 = periodType0.toString();
        string1.toString();
        string1.hashCode();
        org.junit.Assert.assertTrue(string1.equals(string1));
    }

    @Test
    public void test291() throws Throwable {
        java.util.Date date0 = null;
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.fromDateFields(date0);
        monthDay1.toString();
        monthDay1.hashCode();
        org.junit.Assert.assertTrue(monthDay1.equals(monthDay1));
    }

    @Test
    public void test292() throws Throwable {
        org.joda.time.ReadablePartial readablePartial0 = null;
        org.joda.time.ReadablePartial readablePartial1 = null;
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.time();
        org.joda.time.Period period3 = new org.joda.time.Period(readablePartial0, readablePartial1, periodType2);
        period3.toString();
        period3.hashCode();
        org.junit.Assert.assertTrue(period3.equals(period3));
    }

    @Test
    public void test293() throws Throwable {
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime(1, 1, 1);
        org.joda.time.LocalTime.Property property1 = localTime0.minuteOfHour();
        property1.toString();
        property1.hashCode();
        org.junit.Assert.assertTrue(property1.equals(property1));
    }

    @Test
    public void test294() throws Throwable {
        long long0 = org.joda.time.field.FieldUtils.safeMultiply(1, 1);
    }

    @Test
    public void test295() throws Throwable {
        org.joda.time.Weeks minus0 = null;
        org.joda.time.Weeks weeks1 = minus0.minus(1);
        weeks1.toString();
        weeks1.hashCode();
        org.junit.Assert.assertTrue(weeks1.equals(weeks1));
    }

    @Test
    public void test296() throws Throwable {
        org.joda.time.field.ZeroIsMaxDateTimeField roundHalfFloor0 = null;
        long long1 = roundHalfFloor0.roundHalfFloor(1);
    }

    @Test
    public void test297() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.LocalDate localDate2 = org.joda.time.LocalDate.now(chronology1);
        int int3 = localDate2.getCenturyOfEra();
    }

    @Test
    public void test298() throws Throwable {
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Days days2 = org.joda.time.Days.daysIn(readableInterval1);
        org.joda.time.Days days3 = days2.plus(1);
        days3.toString();
        days3.hashCode();
        org.junit.Assert.assertTrue(days3.equals(days3));
    }

    @Test
    public void test299() throws Throwable {
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.time();
        org.joda.time.Period period1 = new org.joda.time.Period(1, periodType0);
        period1.toString();
        period1.hashCode();
        org.junit.Assert.assertTrue(period1.equals(period1));
    }

    @Test
    public void test300() throws Throwable {
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.yearDay();
        periodType0.toString();
        periodType0.hashCode();
        org.junit.Assert.assertTrue(periodType0.equals(periodType0));
    }

    @Test
    public void test301() throws Throwable {
        org.joda.time.field.UnsupportedDateTimeField set0 = null;
        java.lang.String string1 = null;
        long long2 = set0.set(1, string1);
    }

    @Test
    public void test302() throws Throwable {
        org.joda.time.Hours toString0 = null;
        java.lang.String string1 = toString0.toString();
        string1.toString();
        string1.hashCode();
        org.junit.Assert.assertTrue(string1.equals(string1));
    }

    @Test
    public void test303() throws Throwable {
        org.joda.time.Duration toStandardMinutes0 = null;
        org.joda.time.Minutes minutes1 = toStandardMinutes0.toStandardMinutes();
        minutes1.toString();
        minutes1.hashCode();
        org.junit.Assert.assertTrue(minutes1.equals(minutes1));
    }

    @Test
    public void test304() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime(chronology1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.secondOfDay();
        property3.toString();
        property3.hashCode();
        org.junit.Assert.assertTrue(property3.equals(property3));
    }

    @Test
    public void test305() throws Throwable {
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        dateTimeFormatterBuilder0.toString();
        dateTimeFormatterBuilder0.hashCode();
        org.junit.Assert.assertTrue(dateTimeFormatterBuilder0.equals(dateTimeFormatterBuilder0));
    }

    @Test
    public void test306() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime(chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZoneRetainFields(dateTimeZone3);
    }

    @Test
    public void test307() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay(1, 1, 1, 1, chronology1);
        int int3 = timeOfDay2.getMinuteOfHour();
    }

    @Test
    public void test308() throws Throwable {
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder0.appendDecimal(dateTimeFieldType1, 1, 1);
        dateTimeFormatterBuilder2.toString();
        dateTimeFormatterBuilder2.hashCode();
        org.junit.Assert.assertTrue(dateTimeFormatterBuilder2.equals(dateTimeFormatterBuilder2));
    }

    @Test
    public void test309() throws Throwable {
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime(1, 1, 1, 1, 1, 1, 1);
        org.joda.time.LocalDateTime localDateTime1 = localDateTime0.withSecondOfMinute(1);
        localDateTime1.toString();
        localDateTime1.hashCode();
        org.junit.Assert.assertTrue(localDateTime1.equals(localDateTime1));
    }

    @Test
    public void test310() throws Throwable {
        java.lang.Object object0 = null;
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getChronology(chronology1);
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(object0, chronology2);
        java.lang.Object object4 = mutableInterval3.clone();
        object4.toString();
        object4.hashCode();
        org.junit.Assert.assertTrue(object4.equals(object4));
    }

    @Test
    public void test311() throws Throwable {
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        dateMidnight0.toString();
        dateMidnight0.hashCode();
        org.junit.Assert.assertTrue(dateMidnight0.equals(dateMidnight0));
    }

    @Test
    public void test312() throws Throwable {
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(dateTimeZone0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalTime localTime3 = localTime1.minus(readablePeriod2);
        localTime3.toString();
        localTime3.hashCode();
        org.junit.Assert.assertTrue(localTime3.equals(localTime3));
    }

    @Test
    public void test313() throws Throwable {
        org.joda.time.DateTimeField getDifferenceAsLong0 = null;
        long long1 = getDifferenceAsLong0.getDifferenceAsLong(1, 1);
    }

    @Test
    public void test314() throws Throwable {
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendDayOfWeek(1);
        dateTimeFormatterBuilder1.toString();
        dateTimeFormatterBuilder1.hashCode();
        org.junit.Assert.assertTrue(dateTimeFormatterBuilder1.equals(dateTimeFormatterBuilder1));
    }

    @Test
    public void test315() throws Throwable {
        org.joda.time.ReadablePartial readablePartial0 = null;
        org.joda.time.ReadablePartial readablePartial1 = null;
        org.joda.time.Period period2 = new org.joda.time.Period(readablePartial0, readablePartial1);
        period2.toString();
        period2.hashCode();
        org.junit.Assert.assertTrue(period2.equals(period2));
    }

    @Test
    public void test316() throws Throwable {
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.time();
        org.joda.time.Period period1 = new org.joda.time.Period(1, periodType0);
        org.joda.time.Weeks weeks2 = period1.toStandardWeeks();
        weeks2.toString();
        weeks2.hashCode();
        org.junit.Assert.assertTrue(weeks2.equals(weeks2));
    }

    @Test
    public void test317() throws Throwable {
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.YearMonthDay yearMonthDay2 = yearMonthDay1.withMonthOfYear(1);
        yearMonthDay2.toString();
        yearMonthDay2.hashCode();
        org.junit.Assert.assertTrue(yearMonthDay2.equals(yearMonthDay2));
    }

    @Test
    public void test318() throws Throwable {
        org.joda.time.DateTimeField set0 = null;
        java.lang.String string1 = null;
        long long2 = set0.set(1, string1);
    }

    @Test
    public void test319() throws Throwable {
        org.joda.time.DateTimeField dateTimeField0 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.field.DelegatedDateTimeField delegatedDateTimeField2 = new org.joda.time.field.DelegatedDateTimeField(dateTimeField0, dateTimeFieldType1);
        delegatedDateTimeField2.toString();
        delegatedDateTimeField2.hashCode();
        org.junit.Assert.assertTrue(delegatedDateTimeField2.equals(delegatedDateTimeField2));
    }

    @Test
    public void test320() throws Throwable {
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        dateTimeFormatterBuilder0.clear();
    }

    @Test
    public void test321() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        dateTimeZone1.toString();
        dateTimeZone1.hashCode();
        org.junit.Assert.assertTrue(dateTimeZone1.equals(dateTimeZone1));
    }

    @Test
    public void test322() throws Throwable {
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(1, 1, 1, 1, 1, 1, dateTimeZone0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime dateTime3 = dateTime1.withField(dateTimeFieldType2, 1);
        dateTime3.toString();
        dateTime3.hashCode();
        org.junit.Assert.assertTrue(dateTime3.equals(dateTime3));
    }

    @Test
    public void test323() throws Throwable {
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.years();
        org.joda.time.field.UnsupportedDurationField unsupportedDurationField1 = org.joda.time.field.UnsupportedDurationField.getInstance(durationFieldType0);
        unsupportedDurationField1.toString();
        unsupportedDurationField1.hashCode();
        org.junit.Assert.assertTrue(unsupportedDurationField1.equals(unsupportedDurationField1));
    }

    @Test
    public void test324() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(1, chronology0);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.era();
        property2.toString();
        property2.hashCode();
        org.junit.Assert.assertTrue(property2.equals(property2));
    }

    @Test
    public void test325() throws Throwable {
        org.joda.time.field.DelegatedDateTimeField get0 = null;
        int int1 = get0.get(1);
    }

    @Test
    public void test326() throws Throwable {
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortTime();
        org.joda.time.DateTimeZone dateTimeZone1 = dateTimeFormatter0.getZone();
        dateTimeZone1.toString();
        dateTimeZone1.hashCode();
        org.junit.Assert.assertTrue(dateTimeZone1.equals(dateTimeZone1));
    }

    @Test
    public void test327() throws Throwable {
        org.joda.time.field.ZeroIsMaxDateTimeField getMaximumValue0 = null;
        int int1 = getMaximumValue0.getMaximumValue();
    }

    @Test
    public void test328() throws Throwable {
        org.joda.time.field.ZeroIsMaxDateTimeField getDifferenceAsLong0 = null;
        long long1 = getDifferenceAsLong0.getDifferenceAsLong(1, 1);
    }

    @Test
    public void test329() throws Throwable {
        org.joda.time.Weeks toStandardDays0 = null;
        org.joda.time.Days days1 = toStandardDays0.toStandardDays();
        days1.toString();
        days1.hashCode();
        org.junit.Assert.assertTrue(days1.equals(days1));
    }

    @Test
    public void test330() throws Throwable {
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime(1);
        mutableDateTime0.toString();
        mutableDateTime0.hashCode();
        org.junit.Assert.assertTrue(mutableDateTime0.equals(mutableDateTime0));
    }

    @Test
    public void test331() throws Throwable {
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(1, 1, 1, 1, 1, 1, dateTimeZone0);
        org.joda.time.DateTime.Property property2 = dateTime1.hourOfDay();
        property2.toString();
        property2.hashCode();
        org.junit.Assert.assertTrue(property2.equals(property2));
    }

    @Test
    public void test332() throws Throwable {
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.minutes();
        periodType0.toString();
        periodType0.hashCode();
        org.junit.Assert.assertTrue(periodType0.equals(periodType0));
    }

    @Test
    public void test333() throws Throwable {
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime(1, 1, 1, 1, 1, 1, 1);
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.monthOfYear();
        property1.toString();
        property1.hashCode();
        org.junit.Assert.assertTrue(property1.equals(property1));
    }

    @Test
    public void test334() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.yearOfEra();
        dateTimeField2.toString();
        dateTimeField2.hashCode();
        org.junit.Assert.assertTrue(dateTimeField2.equals(dateTimeField2));
    }

    @Test
    public void test335() throws Throwable {
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(1, 1, 1, 1, 1, 1, dateTimeZone0);
        org.joda.time.DateTime.Property property2 = dateTime1.yearOfCentury();
        property2.toString();
        property2.hashCode();
        org.junit.Assert.assertTrue(property2.equals(property2));
    }

    @Test
    public void test336() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay(1, 1, 1, 1, chronology1);
        org.joda.time.TimeOfDay timeOfDay3 = timeOfDay2.withHourOfDay(1);
        timeOfDay3.toString();
        timeOfDay3.hashCode();
        org.junit.Assert.assertTrue(timeOfDay3.equals(timeOfDay3));
    }

    @Test
    public void test337() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        int[] intArr2 = partial1.getValues();
        intArr2.toString();
        intArr2.hashCode();
        org.junit.Assert.assertTrue(intArr2.equals(intArr2));
    }

    @Test
    public void test338() throws Throwable {
        org.joda.time.MonthDay monthDay0 = new org.joda.time.MonthDay();
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.MonthDay monthDay2 = monthDay0.minus(readablePeriod1);
        monthDay2.toString();
        monthDay2.hashCode();
        org.junit.Assert.assertTrue(monthDay2.equals(monthDay2));
    }

    @Test
    public void test339() throws Throwable {
        org.joda.time.YearMonth yearMonth0 = new org.joda.time.YearMonth(1, 1);
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.YearMonth yearMonth2 = yearMonth0.withPeriodAdded(readablePeriod1, 1);
        yearMonth2.toString();
        yearMonth2.hashCode();
        org.junit.Assert.assertTrue(yearMonth2.equals(yearMonth2));
    }

    @Test
    public void test340() throws Throwable {
        org.joda.time.Weeks toStandardSeconds0 = null;
        org.joda.time.Seconds seconds1 = toStandardSeconds0.toStandardSeconds();
        seconds1.toString();
        seconds1.hashCode();
        org.junit.Assert.assertTrue(seconds1.equals(seconds1));
    }

    @Test
    public void test341() throws Throwable {
        org.joda.time.MonthDay.Property getField0 = null;
        org.joda.time.DateTimeField dateTimeField1 = getField0.getField();
        dateTimeField1.toString();
        dateTimeField1.hashCode();
        org.junit.Assert.assertTrue(dateTimeField1.equals(dateTimeField1));
    }

    @Test
    public void test342() throws Throwable {
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Days days2 = org.joda.time.Days.daysIn(readableInterval1);
        org.joda.time.Days days3 = days2.multipliedBy(1);
        days3.toString();
        days3.hashCode();
        org.junit.Assert.assertTrue(days3.equals(days3));
    }

    @Test
    public void test343() throws Throwable {
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(1, 1, 1, 1, 1, 1, dateTimeZone0);
        org.joda.time.DateTime dateTime2 = dateTime1.withDurationAdded(1, 1);
        dateTime2.toString();
        dateTime2.hashCode();
        org.junit.Assert.assertTrue(dateTime2.equals(dateTime2));
    }

    @Test
    public void test344() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeUtils.getZone(dateTimeZone1);
        dateTimeZone2.toString();
        dateTimeZone2.hashCode();
        org.junit.Assert.assertTrue(dateTimeZone2.equals(dateTimeZone2));
    }

    @Test
    public void test345() throws Throwable {
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.years();
        org.joda.time.field.UnsupportedDurationField unsupportedDurationField1 = org.joda.time.field.UnsupportedDurationField.getInstance(durationFieldType0);
        java.lang.Object object2 = null;
        boolean boolean3 = unsupportedDurationField1.equals(object2);
    }

    @Test
    public void test346() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(1, chronology0);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.weekyear();
        property2.toString();
        property2.hashCode();
        org.junit.Assert.assertTrue(property2.equals(property2));
    }

    @Test
    public void test347() throws Throwable {
        org.joda.time.DateTimeComparator dateTimeComparator0 = org.joda.time.DateTimeComparator.getTimeOnlyInstance();
        dateTimeComparator0.toString();
        dateTimeComparator0.hashCode();
        org.junit.Assert.assertTrue(dateTimeComparator0.equals(dateTimeComparator0));
    }

    @Test
    public void test348() throws Throwable {
        org.joda.time.DateMidnight.Property getDateMidnight0 = null;
        org.joda.time.DateMidnight dateMidnight1 = getDateMidnight0.getDateMidnight();
        dateMidnight1.toString();
        dateMidnight1.hashCode();
        org.junit.Assert.assertTrue(dateMidnight1.equals(dateMidnight1));
    }

    @Test
    public void test349() throws Throwable {
        java.lang.String string0 = null;
        org.joda.time.Minutes minutes1 = org.joda.time.Minutes.parseMinutes(string0);
        org.joda.time.Days days2 = minutes1.toStandardDays();
        days2.toString();
        days2.hashCode();
        org.junit.Assert.assertTrue(days2.equals(days2));
    }

    @Test
    public void test350() throws Throwable {
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.years();
        org.joda.time.field.UnsupportedDurationField unsupportedDurationField1 = org.joda.time.field.UnsupportedDurationField.getInstance(durationFieldType0);
        long long2 = unsupportedDurationField1.getMillis(1);
    }

    @Test
    public void test351() throws Throwable {
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableDuration0, readableInstant1);
        mutableInterval2.setDurationAfterStart(1);
    }

    @Test
    public void test352() throws Throwable {
        org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.fromMillisOfDay(1);
        localTime0.toString();
        localTime0.hashCode();
        org.junit.Assert.assertTrue(localTime0.equals(localTime0));
    }

    @Test
    public void test353() throws Throwable {
        org.joda.time.DurationField add0 = null;
        long long1 = add0.add(1, 1);
    }

    @Test
    public void test354() throws Throwable {
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendTimeZoneName();
        dateTimeFormatterBuilder1.toString();
        dateTimeFormatterBuilder1.hashCode();
        org.junit.Assert.assertTrue(dateTimeFormatterBuilder1.equals(dateTimeFormatterBuilder1));
    }

    @Test
    public void test355() throws Throwable {
        org.joda.time.Weeks negated0 = null;
        org.joda.time.Weeks weeks1 = negated0.negated();
        weeks1.toString();
        weeks1.hashCode();
        org.junit.Assert.assertTrue(weeks1.equals(weeks1));
    }

    @Test
    public void test356() throws Throwable {
        java.lang.Object object0 = null;
        org.joda.time.PeriodType periodType1 = null;
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(object0, periodType1);
        mutablePeriod2.add(1, 1, 1, 1, 1, 1, 1, 1);
    }

    @Test
    public void test357() throws Throwable {
        org.joda.time.MutableDateTime.Property addWrapField0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = addWrapField0.addWrapField(1);
        mutableDateTime1.toString();
        mutableDateTime1.hashCode();
        org.junit.Assert.assertTrue(mutableDateTime1.equals(mutableDateTime1));
    }

    @Test
    public void test358() throws Throwable {
        org.joda.time.field.UnsupportedDateTimeField getMaximumValue0 = null;
        int int1 = getMaximumValue0.getMaximumValue();
    }

    @Test
    public void test359() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeUtils.getZone(dateTimeZone1);
        long long3 = dateTimeZone2.convertLocalToUTC(1, true, 1);
    }

    @Test
    public void test360() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay(1, 1, 1, 1, chronology0);
        org.joda.time.TimeOfDay timeOfDay2 = timeOfDay1.plusHours(1);
        timeOfDay2.toString();
        timeOfDay2.hashCode();
        org.junit.Assert.assertTrue(timeOfDay2.equals(timeOfDay2));
    }

    @Test
    public void test361() throws Throwable {
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTimeAtMidnight(dateTimeZone3);
        dateTime4.toString();
        dateTime4.hashCode();
        org.junit.Assert.assertTrue(dateTime4.equals(dateTime4));
    }

    @Test
    public void test362() throws Throwable {
        org.joda.time.field.DelegatedDateTimeField getAsShortText0 = null;
        java.util.Locale locale1 = null;
        java.lang.String string2 = getAsShortText0.getAsShortText(1, locale1);
        string2.toString();
        string2.hashCode();
        org.junit.Assert.assertTrue(string2.equals(string2));
    }

    @Test
    public void test363() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(1, chronology1);
        org.joda.time.DateTime dateTime3 = dateTime2.withTimeAtStartOfDay();
        dateTime3.toString();
        dateTime3.hashCode();
        org.junit.Assert.assertTrue(dateTime3.equals(dateTime3));
    }

    @Test
    public void test364() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeUtils.getZone(dateTimeZone1);
        java.lang.String string3 = dateTimeZone2.getName(1);
        string3.toString();
        string3.hashCode();
        org.junit.Assert.assertTrue(string3.equals(string3));
    }

    @Test
    public void test365() throws Throwable {
        org.joda.time.tz.ZoneInfoProvider getZone0 = null;
        java.lang.String string1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = getZone0.getZone(string1);
        dateTimeZone2.toString();
        dateTimeZone2.hashCode();
        org.junit.Assert.assertTrue(dateTimeZone2.equals(dateTimeZone2));
    }

    @Test
    public void test366() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.LocalDate localDate2 = org.joda.time.LocalDate.now(chronology1);
        int int3 = localDate2.getDayOfWeek();
    }

    @Test
    public void test367() throws Throwable {
        java.lang.Object object0 = null;
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getChronology(chronology1);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(object0, chronology2);
        localDate3.toString();
        localDate3.hashCode();
        org.junit.Assert.assertTrue(localDate3.equals(localDate3));
    }

    @Test
    public void test368() throws Throwable {
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime(1);
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.dayOfMonth();
        property1.toString();
        property1.hashCode();
        org.junit.Assert.assertTrue(property1.equals(property1));
    }

    @Test
    public void test369() throws Throwable {
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.weekDate();
        org.joda.time.format.DateTimeParser dateTimeParser1 = dateTimeFormatter0.getParser();
        dateTimeParser1.toString();
        dateTimeParser1.hashCode();
        org.junit.Assert.assertTrue(dateTimeParser1.equals(dateTimeParser1));
    }

    @Test
    public void test370() throws Throwable {
        long long0 = org.joda.time.field.FieldUtils.safeAdd(1, 1);
    }

    @Test
    public void test371() throws Throwable {
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime(1);
        mutableDateTime0.addDays(1);
    }

    @Test
    public void test372() throws Throwable {
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(1, dateTimeZone0);
        org.joda.time.LocalTime localTime2 = localTime1.plusMillis(1);
        localTime2.toString();
        localTime2.hashCode();
        org.junit.Assert.assertTrue(localTime2.equals(localTime2));
    }

    @Test
    public void test373() throws Throwable {
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.weekDate();
        java.io.Writer writer1 = null;
        dateTimeFormatter0.printTo(writer1, 1);
    }

    @Test
    public void test374() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(chronology1);
        dateTime2.toString();
        dateTime2.hashCode();
        org.junit.Assert.assertTrue(dateTime2.equals(dateTime2));
    }

    @Test
    public void test375() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.YearMonth yearMonth2 = org.joda.time.YearMonth.now(chronology1);
        yearMonth2.toString();
        yearMonth2.hashCode();
        org.junit.Assert.assertTrue(yearMonth2.equals(yearMonth2));
    }

    @Test
    public void test376() throws Throwable {
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.YearMonthDay yearMonthDay2 = yearMonthDay1.withYear(1);
        yearMonthDay2.toString();
        yearMonthDay2.hashCode();
        org.junit.Assert.assertTrue(yearMonthDay2.equals(yearMonthDay2));
    }

    @Test
    public void test377() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime(chronology1);
        mutableDateTime2.addYears(1);
    }

    @Test
    public void test378() throws Throwable {
        org.joda.time.Period period0 = org.joda.time.Period.years(1);
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.Period period2 = period0.plus(readablePeriod1);
        period2.toString();
        period2.hashCode();
        org.junit.Assert.assertTrue(period2.equals(period2));
    }

    @Test
    public void test379() throws Throwable {
        org.joda.time.field.UnsupportedDateTimeField getMaximumValue0 = null;
        org.joda.time.ReadablePartial readablePartial1 = null;
        int[] intArr2 = null;
        int int3 = getMaximumValue0.getMaximumValue(readablePartial1, intArr2);
    }

    @Test
    public void test380() throws Throwable {
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.GJChronology gJChronology1 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = gJChronology1.getZone();
        dateTimeZone2.toString();
        dateTimeZone2.hashCode();
        org.junit.Assert.assertTrue(dateTimeZone2.equals(dateTimeZone2));
    }

    @Test
    public void test381() throws Throwable {
        org.joda.time.field.RemainderDateTimeField addWrapField0 = null;
        long long1 = addWrapField0.addWrapField(1, 1);
    }

    @Test
    public void test382() throws Throwable {
        org.joda.time.LocalDate.Property setCopy0 = null;
        java.lang.String string1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.LocalDate localDate3 = setCopy0.setCopy(string1, locale2);
        localDate3.toString();
        localDate3.hashCode();
        org.junit.Assert.assertTrue(localDate3.equals(localDate3));
    }

    @Test
    public void test383() throws Throwable {
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime(1, 1, 1);
        org.joda.time.LocalTime localTime1 = localTime0.withMillisOfDay(1);
        localTime1.toString();
        localTime1.hashCode();
        org.junit.Assert.assertTrue(localTime1.equals(localTime1));
    }

    @Test
    public void test384() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.ReadablePartial readablePartial2 = null;
        long long3 = chronology1.set(readablePartial2, 1);
    }

    @Test
    public void test385() throws Throwable {
        org.joda.time.MutablePeriod mutablePeriod0 = new org.joda.time.MutablePeriod(1, 1, 1, 1);
        mutablePeriod0.setMillis(1);
    }

    @Test
    public void test386() throws Throwable {
        org.joda.time.MonthDay monthDay0 = org.joda.time.MonthDay.now();
        org.joda.time.LocalDate localDate1 = monthDay0.toLocalDate(1);
        localDate1.toString();
        localDate1.hashCode();
        org.junit.Assert.assertTrue(localDate1.equals(localDate1));
    }

    @Test
    public void test387() throws Throwable {
        java.lang.String string0 = null;
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.parse(string0);
        localDateTime1.toString();
        localDateTime1.hashCode();
        org.junit.Assert.assertTrue(localDateTime1.equals(localDateTime1));
    }

    @Test
    public void test388() throws Throwable {
        org.joda.time.DateMidnight.Property roundHalfCeilingCopy0 = null;
        org.joda.time.DateMidnight dateMidnight1 = roundHalfCeilingCopy0.roundHalfCeilingCopy();
        dateMidnight1.toString();
        dateMidnight1.hashCode();
        org.junit.Assert.assertTrue(dateMidnight1.equals(dateMidnight1));
    }

    @Test
    public void test389() throws Throwable {
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.YearMonthDay yearMonthDay2 = yearMonthDay1.plusMonths(1);
        yearMonthDay2.toString();
        yearMonthDay2.hashCode();
        org.junit.Assert.assertTrue(yearMonthDay2.equals(yearMonthDay2));
    }

    @Test
    public void test390() throws Throwable {
        org.joda.time.field.RemainderDateTimeField roundCeiling0 = null;
        long long1 = roundCeiling0.roundCeiling(1);
    }

    @Test
    public void test391() throws Throwable {
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Days days2 = org.joda.time.Days.daysIn(readableInterval1);
        org.joda.time.Hours hours3 = days2.toStandardHours();
        hours3.toString();
        hours3.hashCode();
        org.junit.Assert.assertTrue(hours3.equals(hours3));
    }

    @Test
    public void test392() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.DateTimeField dateTimeField2 = null;
        org.joda.time.field.SkipUndoDateTimeField skipUndoDateTimeField3 = new org.joda.time.field.SkipUndoDateTimeField(chronology1, dateTimeField2, 1);
        skipUndoDateTimeField3.toString();
        skipUndoDateTimeField3.hashCode();
        org.junit.Assert.assertTrue(skipUndoDateTimeField3.equals(skipUndoDateTimeField3));
    }

    @Test
    public void test393() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime(chronology1);
        mutableDateTime2.setTime(1);
    }

    @Test
    public void test394() throws Throwable {
        org.joda.time.field.ZeroIsMaxDateTimeField roundCeiling0 = null;
        long long1 = roundCeiling0.roundCeiling(1);
    }

    @Test
    public void test395() throws Throwable {
        org.joda.time.DurationField getValueAsLong0 = null;
        long long1 = getValueAsLong0.getValueAsLong(1, 1);
    }

    @Test
    public void test396() throws Throwable {
        java.lang.Object object0 = null;
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(object0, chronology1);
        java.lang.Object object3 = null;
        boolean boolean4 = localDateTime2.equals(object3);
    }

    @Test
    public void test397() throws Throwable {
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DurationFieldType durationFieldType1 = dateTimeFieldType0.getDurationType();
        durationFieldType1.toString();
        durationFieldType1.hashCode();
        org.junit.Assert.assertTrue(durationFieldType1.equals(durationFieldType1));
    }

    @Test
    public void test398() throws Throwable {
        org.joda.time.DateTimeField isSupported0 = null;
        boolean boolean1 = isSupported0.isSupported();
    }

    @Test
    public void test399() throws Throwable {
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.Interval interval1 = new org.joda.time.Interval(1, 1, dateTimeZone0);
        org.joda.time.Interval interval2 = interval1.withStartMillis(1);
        interval2.toString();
        interval2.hashCode();
        org.junit.Assert.assertTrue(interval2.equals(interval2));
    }

    @Test
    public void test400() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        java.util.Locale locale1 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket2 = new org.joda.time.format.DateTimeParserBucket(1, chronology0, locale1);
        java.lang.Integer integer3 = null;
        dateTimeParserBucket2.setOffset(integer3);
    }

    @Test
    public void test401() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.ReadableDateTime readableDateTime2 = null;
        org.joda.time.ReadableDateTime readableDateTime3 = null;
        org.joda.time.chrono.LimitChronology limitChronology4 = org.joda.time.chrono.LimitChronology.getInstance(chronology1, readableDateTime2, readableDateTime3);
        limitChronology4.toString();
        limitChronology4.hashCode();
        org.junit.Assert.assertTrue(limitChronology4.equals(limitChronology4));
    }

    @Test
    public void test402() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.LocalDate localDate2 = org.joda.time.LocalDate.now(chronology1);
        int int3 = localDate2.getDayOfYear();
    }

    @Test
    public void test403() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.LocalDate localDate2 = org.joda.time.LocalDate.now(chronology1);
        org.joda.time.LocalDate.Property property3 = localDate2.dayOfWeek();
        property3.toString();
        property3.hashCode();
        org.junit.Assert.assertTrue(property3.equals(property3));
    }

    @Test
    public void test404() throws Throwable {
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendYearOfEra(1, 1);
        dateTimeFormatterBuilder1.toString();
        dateTimeFormatterBuilder1.hashCode();
        org.junit.Assert.assertTrue(dateTimeFormatterBuilder1.equals(dateTimeFormatterBuilder1));
    }

    @Test
    public void test405() throws Throwable {
        java.lang.Object object0 = null;
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.Period period2 = new org.joda.time.Period(object0, periodType1);
        period2.toString();
        period2.hashCode();
        org.junit.Assert.assertTrue(period2.equals(period2));
    }

    @Test
    public void test406() throws Throwable {
        org.joda.time.Years years0 = org.joda.time.Years.years(1);
        years0.toString();
        years0.hashCode();
        org.junit.Assert.assertTrue(years0.equals(years0));
    }

    @Test
    public void test407() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeUtils.getZone(dateTimeZone1);
        java.util.Locale locale3 = null;
        java.lang.String string4 = dateTimeZone2.getName(1, locale3);
        string4.toString();
        string4.hashCode();
        org.junit.Assert.assertTrue(string4.equals(string4));
    }

    @Test
    public void test408() throws Throwable {
        org.joda.time.Duration duration0 = org.joda.time.Duration.standardDays(1);
        duration0.toString();
        duration0.hashCode();
        org.junit.Assert.assertTrue(duration0.equals(duration0));
    }

    @Test
    public void test409() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(chronology1);
        localTime2.toString();
        localTime2.hashCode();
        org.junit.Assert.assertTrue(localTime2.equals(localTime2));
    }

    @Test
    public void test410() throws Throwable {
        org.joda.time.field.UnsupportedDateTimeField isSupported0 = null;
        boolean boolean1 = isSupported0.isSupported();
    }

    @Test
    public void test411() throws Throwable {
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.field.FieldUtils.verifyValueBounds(dateTimeFieldType0, 1, 1, 1);
    }

    @Test
    public void test412() throws Throwable {
        java.lang.Object object0 = null;
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(object0, chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.era();
        property3.toString();
        property3.hashCode();
        org.junit.Assert.assertTrue(property3.equals(property3));
    }

    @Test
    public void test413() throws Throwable {
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.Interval interval1 = new org.joda.time.Interval(1, 1, dateTimeZone0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getChronology(chronology2);
        org.joda.time.Interval interval4 = interval1.withChronology(chronology3);
        interval4.toString();
        interval4.hashCode();
        org.junit.Assert.assertTrue(interval4.equals(interval4));
    }

    @Test
    public void test414() throws Throwable {
        org.joda.time.Hours getPeriodType0 = null;
        org.joda.time.PeriodType periodType1 = getPeriodType0.getPeriodType();
        periodType1.toString();
        periodType1.hashCode();
        org.junit.Assert.assertTrue(periodType1.equals(periodType1));
    }

    @Test
    public void test415() throws Throwable {
        java.lang.Object object0 = null;
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(object0, chronology1);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime2.withMillisOfDay(1);
        localDateTime3.toString();
        localDateTime3.hashCode();
        org.junit.Assert.assertTrue(localDateTime3.equals(localDateTime3));
    }

    @Test
    public void test416() throws Throwable {
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.weekDate();
        java.io.Writer writer1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        dateTimeFormatter0.printTo(writer1, readableInstant2);
    }

    @Test
    public void test417() throws Throwable {
        java.lang.Object object0 = null;
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getChronology(chronology1);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(object0, chronology2);
        org.joda.time.LocalDate localDate4 = localDate3.withWeekOfWeekyear(1);
        localDate4.toString();
        localDate4.hashCode();
        org.junit.Assert.assertTrue(localDate4.equals(localDate4));
    }

    @Test
    public void test418() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(1, 1, chronology1);
        mutableInterval2.toString();
        mutableInterval2.hashCode();
        org.junit.Assert.assertTrue(mutableInterval2.equals(mutableInterval2));
    }

    @Test
    public void test419() throws Throwable {
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.weeks();
        periodType0.toString();
        periodType0.hashCode();
        org.junit.Assert.assertTrue(periodType0.equals(periodType0));
    }

    @Test
    public void test420() throws Throwable {
        org.joda.time.field.UnsupportedDateTimeField getAsText0 = null;
        java.lang.String string1 = getAsText0.getAsText(1);
        string1.toString();
        string1.hashCode();
        org.junit.Assert.assertTrue(string1.equals(string1));
    }

    @Test
    public void test421() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay(1, 1, 1, 1, chronology0);
        org.joda.time.TimeOfDay timeOfDay2 = timeOfDay1.minusHours(1);
        timeOfDay2.toString();
        timeOfDay2.hashCode();
        org.junit.Assert.assertTrue(timeOfDay2.equals(timeOfDay2));
    }

    @Test
    public void test422() throws Throwable {
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.localDateOptionalTimeParser();
        dateTimeFormatter0.toString();
        dateTimeFormatter0.hashCode();
        org.junit.Assert.assertTrue(dateTimeFormatter0.equals(dateTimeFormatter0));
    }

    @Test
    public void test423() throws Throwable {
        org.joda.time.format.PeriodFormatter periodFormatter0 = org.joda.time.format.PeriodFormat.wordBased();
        periodFormatter0.toString();
        periodFormatter0.hashCode();
        org.junit.Assert.assertTrue(periodFormatter0.equals(periodFormatter0));
    }

    @Test
    public void test424() throws Throwable {
        org.joda.time.Period period0 = org.joda.time.Period.years(1);
        org.joda.time.Hours hours1 = period0.toStandardHours();
        hours1.toString();
        hours1.hashCode();
        org.junit.Assert.assertTrue(hours1.equals(hours1));
    }

    @Test
    public void test425() throws Throwable {
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfWeek();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getChronology(chronology1);
        org.joda.time.DateTimeField dateTimeField3 = dateTimeFieldType0.getField(chronology2);
        dateTimeField3.toString();
        dateTimeField3.hashCode();
        org.junit.Assert.assertTrue(dateTimeField3.equals(dateTimeField3));
    }

    @Test
    public void test426() throws Throwable {
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(1, 1, 1, 1, 1, 1, dateTimeZone0);
        org.joda.time.DateTime dateTime2 = dateTime1.minusYears(1);
        dateTime2.toString();
        dateTime2.hashCode();
        org.junit.Assert.assertTrue(dateTime2.equals(dateTime2));
    }

    @Test
    public void test427() throws Throwable {
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.YearMonthDay yearMonthDay2 = yearMonthDay1.withDayOfMonth(1);
        yearMonthDay2.toString();
        yearMonthDay2.hashCode();
        org.junit.Assert.assertTrue(yearMonthDay2.equals(yearMonthDay2));
    }

    @Test
    public void test428() throws Throwable {
        org.joda.time.DateTimeField set0 = null;
        org.joda.time.ReadablePartial readablePartial1 = null;
        int[] intArr2 = null;
        int[] intArr3 = set0.set(readablePartial1, 1, intArr2, 1);
        intArr3.toString();
        intArr3.hashCode();
        org.junit.Assert.assertTrue(intArr3.equals(intArr3));
    }

    @Test
    public void test429() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        int[] intArr3 = chronology1.get(readablePeriod2, 1);
        intArr3.toString();
        intArr3.hashCode();
        org.junit.Assert.assertTrue(intArr3.equals(intArr3));
    }

    @Test
    public void test430() throws Throwable {
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.basicWeekDateTime();
        java.lang.String string1 = null;
        org.joda.time.LocalDateTime localDateTime2 = dateTimeFormatter0.parseLocalDateTime(string1);
        localDateTime2.toString();
        localDateTime2.hashCode();
        org.junit.Assert.assertTrue(localDateTime2.equals(localDateTime2));
    }

    @Test
    public void test431() throws Throwable {
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.seconds();
        durationFieldType0.toString();
        durationFieldType0.hashCode();
        org.junit.Assert.assertTrue(durationFieldType0.equals(durationFieldType0));
    }

    @Test
    public void test432() throws Throwable {
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.weeks();
        org.joda.time.Period period1 = new org.joda.time.Period(1, 1, periodType0);
        period1.toString();
        period1.hashCode();
        org.junit.Assert.assertTrue(period1.equals(period1));
    }

    @Test
    public void test433() throws Throwable {
        java.lang.Object object0 = null;
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(object0, chronology1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minus(readablePeriod3);
        localDateTime4.toString();
        localDateTime4.hashCode();
        org.junit.Assert.assertTrue(localDateTime4.equals(localDateTime4));
    }

    @Test
    public void test434() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(1, chronology1);
        org.joda.time.DateTime dateTime3 = dateTime2.plus(1);
        dateTime3.toString();
        dateTime3.hashCode();
        org.junit.Assert.assertTrue(dateTime3.equals(dateTime3));
    }

    @Test
    public void test435() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.YearMonth yearMonth2 = org.joda.time.YearMonth.now(chronology1);
        java.lang.String string3 = null;
        java.util.Locale locale4 = null;
        java.lang.String string5 = yearMonth2.toString(string3, locale4);
        string5.toString();
        string5.hashCode();
        org.junit.Assert.assertTrue(string5.equals(string5));
    }

    @Test
    public void test436() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(chronology1);
        org.joda.time.YearMonthDay yearMonthDay3 = dateTime2.toYearMonthDay();
        yearMonthDay3.toString();
        yearMonthDay3.hashCode();
        org.junit.Assert.assertTrue(yearMonthDay3.equals(yearMonthDay3));
    }

    @Test
    public void test437() throws Throwable {
        java.lang.Object object0 = null;
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(object0, chronology1);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime2.withDate(1, 1, 1);
        localDateTime3.toString();
        localDateTime3.hashCode();
        org.junit.Assert.assertTrue(localDateTime3.equals(localDateTime3));
    }

    @Test
    public void test438() throws Throwable {
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime(1, 1, 1, 1, 1, 1, 1);
        mutableDateTime0.toString();
        mutableDateTime0.hashCode();
        org.junit.Assert.assertTrue(mutableDateTime0.equals(mutableDateTime0));
    }

    @Test
    public void test439() throws Throwable {
        java.lang.Object object0 = null;
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getChronology(chronology1);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(object0, chronology2);
        org.joda.time.LocalDate.Property property4 = localDate3.year();
        property4.toString();
        property4.hashCode();
        org.junit.Assert.assertTrue(property4.equals(property4));
    }

    @Test
    public void test440() throws Throwable {
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime(1, 1, 1);
        org.joda.time.ReadablePartial readablePartial1 = null;
        org.joda.time.LocalTime localTime2 = localTime0.withFields(readablePartial1);
        localTime2.toString();
        localTime2.hashCode();
        org.junit.Assert.assertTrue(localTime2.equals(localTime2));
    }

    @Test
    public void test441() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.LocalDate localDate2 = org.joda.time.LocalDate.now(chronology1);
        int int3 = localDate2.getWeekOfWeekyear();
    }

    @Test
    public void test442() throws Throwable {
        org.joda.time.YearMonthDay.Property withMaximumValue0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = withMaximumValue0.withMaximumValue();
        yearMonthDay1.toString();
        yearMonthDay1.hashCode();
        org.junit.Assert.assertTrue(yearMonthDay1.equals(yearMonthDay1));
    }

    @Test
    public void test443() throws Throwable {
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.lang.String string1 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder0.appendTimeZoneOffset(string1, true, 1, 1);
        dateTimeFormatterBuilder2.toString();
        dateTimeFormatterBuilder2.hashCode();
        org.junit.Assert.assertTrue(dateTimeFormatterBuilder2.equals(dateTimeFormatterBuilder2));
    }

    @Test
    public void test444() throws Throwable {
        org.joda.time.Seconds minus0 = null;
        org.joda.time.Seconds seconds1 = minus0.minus(1);
        seconds1.toString();
        seconds1.hashCode();
        org.junit.Assert.assertTrue(seconds1.equals(seconds1));
    }

    @Test
    public void test445() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(1, chronology0);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.dayOfWeek();
        property2.toString();
        property2.hashCode();
        org.junit.Assert.assertTrue(property2.equals(property2));
    }

    @Test
    public void test446() throws Throwable {
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime(1, 1, 1, 1, 1, 1, 1);
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plus(readablePeriod1);
        localDateTime2.toString();
        localDateTime2.hashCode();
        org.junit.Assert.assertTrue(localDateTime2.equals(localDateTime2));
    }

    @Test
    public void test447() throws Throwable {
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime(1, 1, 1, 1, 1, 1, 1);
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.yearOfEra();
        property1.toString();
        property1.hashCode();
        org.junit.Assert.assertTrue(property1.equals(property1));
    }

    @Test
    public void test448() throws Throwable {
        org.joda.time.Duration duration0 = org.joda.time.Duration.standardMinutes(1);
        duration0.toString();
        duration0.hashCode();
        org.junit.Assert.assertTrue(duration0.equals(duration0));
    }

    @Test
    public void test449() throws Throwable {
        org.joda.time.ReadableDuration readableDuration0 = null;
        long long1 = org.joda.time.DateTimeUtils.getDurationMillis(readableDuration0);
    }

    @Test
    public void test450() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(1, chronology0);
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight1.withDayOfWeek(1);
        dateMidnight2.toString();
        dateMidnight2.hashCode();
        org.junit.Assert.assertTrue(dateMidnight2.equals(dateMidnight2));
    }

    @Test
    public void test451() throws Throwable {
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(1, 1, 1, 1, 1, 1, dateTimeZone0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.DateTime dateTime3 = dateTime1.withField(dateTimeFieldType2, 1);
        dateTime3.toString();
        dateTime3.hashCode();
        org.junit.Assert.assertTrue(dateTime3.equals(dateTime3));
    }

    @Test
    public void test452() throws Throwable {
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendMillisOfDay(1);
        dateTimeFormatterBuilder1.toString();
        dateTimeFormatterBuilder1.hashCode();
        org.junit.Assert.assertTrue(dateTimeFormatterBuilder1.equals(dateTimeFormatterBuilder1));
    }

    @Test
    public void test453() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(readableInstant0, readableInstant1);
        mutablePeriod2.toString();
        mutablePeriod2.hashCode();
        org.junit.Assert.assertTrue(mutablePeriod2.equals(mutablePeriod2));
    }

    @Test
    public void test454() throws Throwable {
        org.joda.time.DateTimeField dateTimeField0 = null;
        org.joda.time.field.OffsetDateTimeField offsetDateTimeField1 = new org.joda.time.field.OffsetDateTimeField(dateTimeField0, 1);
        offsetDateTimeField1.toString();
        offsetDateTimeField1.hashCode();
        org.junit.Assert.assertTrue(offsetDateTimeField1.equals(offsetDateTimeField1));
    }

    @Test
    public void test455() throws Throwable {
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.lang.String string1 = dateTimeFieldType0.toString();
        string1.toString();
        string1.hashCode();
        org.junit.Assert.assertTrue(string1.equals(string1));
    }

    @Test
    public void test456() throws Throwable {
        org.joda.time.field.UnsupportedDateTimeField add0 = null;
        org.joda.time.ReadablePartial readablePartial1 = null;
        int[] intArr2 = null;
        int[] intArr3 = add0.add(readablePartial1, 1, intArr2, 1);
        intArr3.toString();
        intArr3.hashCode();
        org.junit.Assert.assertTrue(intArr3.equals(intArr3));
    }

    @Test
    public void test457() throws Throwable {
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(dateTimeZone0);
        org.joda.time.LocalTime.Property property2 = localTime1.minuteOfHour();
        property2.toString();
        property2.hashCode();
        org.junit.Assert.assertTrue(property2.equals(property2));
    }

    @Test
    public void test458() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        java.util.Locale locale1 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket2 = new org.joda.time.format.DateTimeParserBucket(1, chronology0, locale1);
        java.lang.String string3 = null;
        long long4 = dateTimeParserBucket2.computeMillis(true, string3);
    }

    @Test
    public void test459() throws Throwable {
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = dateTimeFormatterBuilder0.toFormatter();
        dateTimeFormatter1.toString();
        dateTimeFormatter1.hashCode();
        org.junit.Assert.assertTrue(dateTimeFormatter1.equals(dateTimeFormatter1));
    }

    @Test
    public void test460() throws Throwable {
        org.joda.time.DateMidnight.Property setCopy0 = null;
        java.lang.String string1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.DateMidnight dateMidnight3 = setCopy0.setCopy(string1, locale2);
        dateMidnight3.toString();
        dateMidnight3.hashCode();
        org.junit.Assert.assertTrue(dateMidnight3.equals(dateMidnight3));
    }

    @Test
    public void test461() throws Throwable {
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.monthOfYear();
        property1.toString();
        property1.hashCode();
        org.junit.Assert.assertTrue(property1.equals(property1));
    }

    @Test
    public void test462() throws Throwable {
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.basicTTimeNoMillis();
        dateTimeFormatter0.toString();
        dateTimeFormatter0.hashCode();
        org.junit.Assert.assertTrue(dateTimeFormatter0.equals(dateTimeFormatter0));
    }

    @Test
    public void test463() throws Throwable {
        org.joda.time.Weeks multipliedBy0 = null;
        org.joda.time.Weeks weeks1 = multipliedBy0.multipliedBy(1);
        weeks1.toString();
        weeks1.hashCode();
        org.junit.Assert.assertTrue(weeks1.equals(weeks1));
    }

    @Test
    public void test464() throws Throwable {
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.monthOfYear();
        dateTimeFieldType0.toString();
        dateTimeFieldType0.hashCode();
        org.junit.Assert.assertTrue(dateTimeFieldType0.equals(dateTimeFieldType0));
    }

    @Test
    public void test465() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay(chronology0);
        int int2 = monthDay1.getMonthOfYear();
    }

    @Test
    public void test466() throws Throwable {
        java.lang.String string0 = null;
        org.joda.time.Months months1 = org.joda.time.Months.parseMonths(string0);
        months1.toString();
        months1.hashCode();
        org.junit.Assert.assertTrue(months1.equals(months1));
    }

    @Test
    public void test467() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(1, chronology0);
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight1.plus(1);
        dateMidnight2.toString();
        dateMidnight2.hashCode();
        org.junit.Assert.assertTrue(dateMidnight2.equals(dateMidnight2));
    }

    @Test
    public void test468() throws Throwable {
        org.joda.time.field.UnsupportedDateTimeField get0 = null;
        int int1 = get0.get(1);
    }

    @Test
    public void test469() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.YearMonth yearMonth2 = org.joda.time.YearMonth.now(chronology1);
        org.joda.time.YearMonth yearMonth3 = yearMonth2.minusMonths(1);
        yearMonth3.toString();
        yearMonth3.hashCode();
        org.junit.Assert.assertTrue(yearMonth3.equals(yearMonth3));
    }

    @Test
    public void test470() throws Throwable {
        org.joda.time.field.DelegatedDateTimeField getDifference0 = null;
        int int1 = getDifference0.getDifference(1, 1);
    }

    @Test
    public void test471() throws Throwable {
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfMonth();
        dateTimeFieldType0.toString();
        dateTimeFieldType0.hashCode();
        org.junit.Assert.assertTrue(dateTimeFieldType0.equals(dateTimeFieldType0));
    }

    @Test
    public void test472() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.time();
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod(readableInstant0, readableInstant1, periodType2);
        mutablePeriod3.toString();
        mutablePeriod3.hashCode();
        org.junit.Assert.assertTrue(mutablePeriod3.equals(mutablePeriod3));
    }

    @Test
    public void test473() throws Throwable {
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.Interval interval1 = new org.joda.time.Interval(1, 1, dateTimeZone0);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Interval interval3 = interval1.withDurationBeforeEnd(readableDuration2);
        interval3.toString();
        interval3.hashCode();
        org.junit.Assert.assertTrue(interval3.equals(interval3));
    }

    @Test
    public void test474() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.time();
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod(readableInstant0, readableInstant1, periodType2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        mutablePeriod3.add(readableDuration4);
    }

    @Test
    public void test475() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.time();
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod(readableInstant0, readableInstant1, periodType2);
        mutablePeriod3.addHours(1);
    }

    @Test
    public void test476() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay(1, 1, 1, chronology1);
        timeOfDay2.toString();
        timeOfDay2.hashCode();
        org.junit.Assert.assertTrue(timeOfDay2.equals(timeOfDay2));
    }

    @Test
    public void test477() throws Throwable {
        org.joda.time.Partial.Property addWrapFieldToCopy0 = null;
        org.joda.time.Partial partial1 = addWrapFieldToCopy0.addWrapFieldToCopy(1);
        partial1.toString();
        partial1.hashCode();
        org.junit.Assert.assertTrue(partial1.equals(partial1));
    }

    @Test
    public void test478() throws Throwable {
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType1 = periodType0.withSecondsRemoved();
        periodType1.toString();
        periodType1.hashCode();
        org.junit.Assert.assertTrue(periodType1.equals(periodType1));
    }

    @Test
    public void test479() throws Throwable {
        org.joda.time.MonthDay.Property getMonthDay0 = null;
        org.joda.time.MonthDay monthDay1 = getMonthDay0.getMonthDay();
        monthDay1.toString();
        monthDay1.hashCode();
        org.junit.Assert.assertTrue(monthDay1.equals(monthDay1));
    }

    @Test
    public void test480() throws Throwable {
        org.joda.time.format.PeriodFormatter periodFormatter0 = org.joda.time.format.PeriodFormat.wordBased();
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        java.lang.String string2 = periodFormatter0.print(readablePeriod1);
        string2.toString();
        string2.hashCode();
        org.junit.Assert.assertTrue(string2.equals(string2));
    }

    @Test
    public void test481() throws Throwable {
        org.joda.time.field.OffsetDateTimeField roundHalfFloor0 = null;
        long long1 = roundHalfFloor0.roundHalfFloor(1);
    }

    @Test
    public void test482() throws Throwable {
        org.joda.time.DurationField subtract0 = null;
        long long1 = subtract0.subtract(1, 1);
    }

    @Test
    public void test483() throws Throwable {
        org.joda.time.MonthDay monthDay0 = org.joda.time.MonthDay.now();
        org.joda.time.MonthDay monthDay1 = monthDay0.withMonthOfYear(1);
        monthDay1.toString();
        monthDay1.hashCode();
        org.junit.Assert.assertTrue(monthDay1.equals(monthDay1));
    }

    @Test
    public void test484() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay(1, 1, 1, chronology1);
        org.joda.time.TimeOfDay.Property property3 = timeOfDay2.minuteOfHour();
        property3.toString();
        property3.hashCode();
        org.junit.Assert.assertTrue(property3.equals(property3));
    }

    @Test
    public void test485() throws Throwable {
        org.joda.time.field.DelegatedDateTimeField getAsText0 = null;
        java.util.Locale locale1 = null;
        java.lang.String string2 = getAsText0.getAsText(1, locale1);
        string2.toString();
        string2.hashCode();
        org.junit.Assert.assertTrue(string2.equals(string2));
    }

    @Test
    public void test486() throws Throwable {
        java.lang.String string0 = null;
        java.lang.Number number1 = null;
        java.lang.Number number2 = null;
        java.lang.Number number3 = null;
        org.joda.time.IllegalFieldValueException illegalFieldValueException4 = new org.joda.time.IllegalFieldValueException(string0, number1, number2, number3);
        java.lang.Number number5 = illegalFieldValueException4.getIllegalNumberValue();
        number5.toString();
        number5.hashCode();
        org.junit.Assert.assertTrue(number5.equals(number5));
    }

    @Test
    public void test487() throws Throwable {
        org.joda.time.Seconds multipliedBy0 = null;
        org.joda.time.Seconds seconds1 = multipliedBy0.multipliedBy(1);
        seconds1.toString();
        seconds1.hashCode();
        org.junit.Assert.assertTrue(seconds1.equals(seconds1));
    }

    @Test
    public void test488() throws Throwable {
        org.joda.time.Duration duration0 = org.joda.time.Duration.standardHours(1);
        duration0.toString();
        duration0.hashCode();
        org.junit.Assert.assertTrue(duration0.equals(duration0));
    }

    @Test
    public void test489() throws Throwable {
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay(1);
        timeOfDay0.toString();
        timeOfDay0.hashCode();
        org.junit.Assert.assertTrue(timeOfDay0.equals(timeOfDay0));
    }

    @Test
    public void test490() throws Throwable {
        org.joda.time.Partial.Property get0 = null;
        int int1 = get0.get();
    }

    @Test
    public void test491() throws Throwable {
        org.joda.time.field.UnsupportedDateTimeField getAsText0 = null;
        org.joda.time.ReadablePartial readablePartial1 = null;
        java.util.Locale locale2 = null;
        java.lang.String string3 = getAsText0.getAsText(readablePartial1, 1, locale2);
        string3.toString();
        string3.hashCode();
        org.junit.Assert.assertTrue(string3.equals(string3));
    }

    @Test
    public void test492() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay(1, 1, 1, 1, chronology0);
        org.joda.time.LocalTime localTime2 = timeOfDay1.toLocalTime();
        localTime2.toString();
        localTime2.hashCode();
        org.junit.Assert.assertTrue(localTime2.equals(localTime2));
    }

    @Test
    public void test493() throws Throwable {
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.setYear(1);
    }

    @Test
    public void test494() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.ReadableDateTime readableDateTime2 = null;
        org.joda.time.ReadableDateTime readableDateTime3 = null;
        org.joda.time.chrono.LimitChronology limitChronology4 = org.joda.time.chrono.LimitChronology.getInstance(chronology1, readableDateTime2, readableDateTime3);
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeUtils.getZone(dateTimeZone6);
        org.joda.time.Chronology chronology8 = limitChronology4.withZone(dateTimeZone7);
        chronology8.toString();
        chronology8.hashCode();
        org.junit.Assert.assertTrue(chronology8.equals(chronology8));
    }

    @Test
    public void test495() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(1, chronology0);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.yearOfCentury();
        property2.toString();
        property2.hashCode();
        org.junit.Assert.assertTrue(property2.equals(property2));
    }

    @Test
    public void test496() throws Throwable {
        java.lang.Object object0 = null;
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(object0, chronology1);
        int int3 = localDateTime2.getYearOfEra();
    }

    @Test
    public void test497() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        int int2 = partial1.size();
    }

    @Test
    public void test498() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.MonthDay monthDay2 = new org.joda.time.MonthDay(chronology1);
        monthDay2.toString();
        monthDay2.hashCode();
        org.junit.Assert.assertTrue(monthDay2.equals(monthDay2));
    }

    @Test
    public void test499() throws Throwable {
        org.joda.time.LocalDateTime.Property addWrapFieldToCopy0 = null;
        org.joda.time.LocalDateTime localDateTime1 = addWrapFieldToCopy0.addWrapFieldToCopy(1);
        localDateTime1.toString();
        localDateTime1.hashCode();
        org.junit.Assert.assertTrue(localDateTime1.equals(localDateTime1));
    }

    @Test
    public void test500() throws Throwable {
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.GJChronology gJChronology1 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0);
        org.joda.time.Instant instant2 = gJChronology1.getGregorianCutover();
        instant2.toString();
        instant2.hashCode();
        org.junit.Assert.assertTrue(instant2.equals(instant2));
    }

    @Test
    public void test501() throws Throwable {
        org.joda.time.YearMonthDay.Property getField0 = null;
        org.joda.time.DateTimeField dateTimeField1 = getField0.getField();
        dateTimeField1.toString();
        dateTimeField1.hashCode();
        org.junit.Assert.assertTrue(dateTimeField1.equals(dateTimeField1));
    }

    @Test
    public void test502() throws Throwable {
        org.joda.time.Partial.Property withMinimumValue0 = null;
        org.joda.time.Partial partial1 = withMinimumValue0.withMinimumValue();
        partial1.toString();
        partial1.hashCode();
        org.junit.Assert.assertTrue(partial1.equals(partial1));
    }

    @Test
    public void test503() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.LocalDate localDate2 = org.joda.time.LocalDate.now(chronology1);
        org.joda.time.LocalDate localDate3 = localDate2.plusMonths(1);
        localDate3.toString();
        localDate3.hashCode();
        org.junit.Assert.assertTrue(localDate3.equals(localDate3));
    }

    @Test
    public void test504() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(1, 1, 1, 1, 1, dateTimeZone1);
        dateTime2.toString();
        dateTime2.hashCode();
        org.junit.Assert.assertTrue(dateTime2.equals(dateTime2));
    }

    @Test
    public void test505() throws Throwable {
        org.joda.time.PeriodType periodType0 = null;
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(1, 1, periodType0, chronology1);
        org.joda.time.MutablePeriod mutablePeriod3 = mutablePeriod2.copy();
        mutablePeriod3.toString();
        mutablePeriod3.hashCode();
        org.junit.Assert.assertTrue(mutablePeriod3.equals(mutablePeriod3));
    }

    @Test
    public void test506() throws Throwable {
        org.joda.time.format.PeriodFormatter periodFormatter0 = org.joda.time.format.ISOPeriodFormat.alternateWithWeeks();
        periodFormatter0.toString();
        periodFormatter0.hashCode();
        org.junit.Assert.assertTrue(periodFormatter0.equals(periodFormatter0));
    }

    @Test
    public void test507() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.Object object2 = null;
        boolean boolean3 = dateTimeZone1.equals(object2);
    }

    @Test
    public void test508() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(1, chronology1);
        localDate2.toString();
        localDate2.hashCode();
        org.junit.Assert.assertTrue(localDate2.equals(localDate2));
    }

    @Test
    public void test509() throws Throwable {
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Weeks weeks2 = org.joda.time.Weeks.weeksIn(readableInterval1);
        weeks2.toString();
        weeks2.hashCode();
        org.junit.Assert.assertTrue(weeks2.equals(weeks2));
    }

    @Test
    public void test510() throws Throwable {
        java.lang.Object object0 = null;
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getChronology(chronology1);
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth(object0, chronology2);
        yearMonth3.toString();
        yearMonth3.hashCode();
        org.junit.Assert.assertTrue(yearMonth3.equals(yearMonth3));
    }

    @Test
    public void test511() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.DateMidnight dateMidnight2 = localDate1.toDateMidnight();
        dateMidnight2.toString();
        dateMidnight2.hashCode();
        org.junit.Assert.assertTrue(dateMidnight2.equals(dateMidnight2));
    }

    @Test
    public void test512() throws Throwable {
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder0.appendFixedDecimal(dateTimeFieldType1, 1);
        dateTimeFormatterBuilder2.toString();
        dateTimeFormatterBuilder2.hashCode();
        org.junit.Assert.assertTrue(dateTimeFormatterBuilder2.equals(dateTimeFormatterBuilder2));
    }

    @Test
    public void test513() throws Throwable {
        org.joda.time.field.DelegatedDateTimeField getLeapAmount0 = null;
        int int1 = getLeapAmount0.getLeapAmount(1);
    }

    @Test
    public void test514() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfYear();
        property3.toString();
        property3.hashCode();
        org.junit.Assert.assertTrue(property3.equals(property3));
    }

    @Test
    public void test515() throws Throwable {
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.YearMonthDay.Property property2 = yearMonthDay1.year();
        property2.toString();
        property2.hashCode();
        org.junit.Assert.assertTrue(property2.equals(property2));
    }

    @Test
    public void test516() throws Throwable {
        org.joda.time.field.OffsetDateTimeField set0 = null;
        long long1 = set0.set(1, 1);
    }

    @Test
    public void test517() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.DateTimeField dateTimeField2 = null;
        org.joda.time.field.SkipDateTimeField skipDateTimeField3 = new org.joda.time.field.SkipDateTimeField(chronology1, dateTimeField2, 1);
        skipDateTimeField3.toString();
        skipDateTimeField3.hashCode();
        org.junit.Assert.assertTrue(skipDateTimeField3.equals(skipDateTimeField3));
    }

    @Test
    public void test518() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.Partial partial3 = partial1.withField(dateTimeFieldType2, 1);
        partial3.toString();
        partial3.hashCode();
        org.junit.Assert.assertTrue(partial3.equals(partial3));
    }

    @Test
    public void test519() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.secondOfMinute();
        property3.toString();
        property3.hashCode();
        org.junit.Assert.assertTrue(property3.equals(property3));
    }

    @Test
    public void test520() throws Throwable {
        java.lang.String string0 = null;
        org.joda.time.Minutes minutes1 = org.joda.time.Minutes.parseMinutes(string0);
        org.joda.time.Seconds seconds2 = minutes1.toStandardSeconds();
        seconds2.toString();
        seconds2.hashCode();
        org.junit.Assert.assertTrue(seconds2.equals(seconds2));
    }

    @Test
    public void test521() throws Throwable {
        org.joda.time.LocalDateTime.Property setCopy0 = null;
        org.joda.time.LocalDateTime localDateTime1 = setCopy0.setCopy(1);
        localDateTime1.toString();
        localDateTime1.hashCode();
        org.junit.Assert.assertTrue(localDateTime1.equals(localDateTime1));
    }

    @Test
    public void test522() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.millisOfSecond();
        dateTimeField2.toString();
        dateTimeField2.hashCode();
        org.junit.Assert.assertTrue(dateTimeField2.equals(dateTimeField2));
    }

    @Test
    public void test523() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.Interval interval2 = new org.joda.time.Interval(readableInstant0, readableDuration1);
        org.joda.time.Interval interval3 = interval2.withEndMillis(1);
        interval3.toString();
        interval3.hashCode();
        org.junit.Assert.assertTrue(interval3.equals(interval3));
    }

    @Test
    public void test524() throws Throwable {
        org.joda.time.field.OffsetDateTimeField roundHalfEven0 = null;
        long long1 = roundHalfEven0.roundHalfEven(1);
    }

    @Test
    public void test525() throws Throwable {
        org.joda.time.Instant toMutableDateTime0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = toMutableDateTime0.toMutableDateTime();
        mutableDateTime1.toString();
        mutableDateTime1.hashCode();
        org.junit.Assert.assertTrue(mutableDateTime1.equals(mutableDateTime1));
    }

    @Test
    public void test526() throws Throwable {
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Interval interval2 = new org.joda.time.Interval(readableDuration0, readableInstant1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Chronology chronology4 = org.joda.time.DateTimeUtils.getChronology(chronology3);
        org.joda.time.Interval interval5 = interval2.withChronology(chronology4);
        interval5.toString();
        interval5.hashCode();
        org.junit.Assert.assertTrue(interval5.equals(interval5));
    }

    @Test
    public void test527() throws Throwable {
        org.joda.time.field.OffsetDateTimeField getLeapDurationField0 = null;
        org.joda.time.DurationField durationField1 = getLeapDurationField0.getLeapDurationField();
        durationField1.toString();
        durationField1.hashCode();
        org.junit.Assert.assertTrue(durationField1.equals(durationField1));
    }

    @Test
    public void test528() throws Throwable {
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight(1, 1, 1);
        dateMidnight0.toString();
        dateMidnight0.hashCode();
        org.junit.Assert.assertTrue(dateMidnight0.equals(dateMidnight0));
    }

    @Test
    public void test529() throws Throwable {
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Days days2 = org.joda.time.Days.daysIn(readableInterval1);
        org.joda.time.PeriodType periodType3 = days2.getPeriodType();
        periodType3.toString();
        periodType3.hashCode();
        org.junit.Assert.assertTrue(periodType3.equals(periodType3));
    }

    @Test
    public void test530() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.weekyear();
        property3.toString();
        property3.hashCode();
        org.junit.Assert.assertTrue(property3.equals(property3));
    }

    @Test
    public void test531() throws Throwable {
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortTime();
        java.lang.String string1 = null;
        org.joda.time.LocalDate localDate2 = dateTimeFormatter0.parseLocalDate(string1);
        localDate2.toString();
        localDate2.hashCode();
        org.junit.Assert.assertTrue(localDate2.equals(localDate2));
    }

    @Test
    public void test532() throws Throwable {
        java.lang.Object object0 = null;
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(object0);
        localTime1.toString();
        localTime1.hashCode();
        org.junit.Assert.assertTrue(localTime1.equals(localTime1));
    }

    @Test
    public void test533() throws Throwable {
        org.joda.time.field.DelegatedDateTimeField getMaximumTextLength0 = null;
        java.util.Locale locale1 = null;
        int int2 = getMaximumTextLength0.getMaximumTextLength(locale1);
    }

    @Test
    public void test534() throws Throwable {
        org.joda.time.Duration duration0 = org.joda.time.Duration.standardMinutes(1);
        org.joda.time.Seconds seconds1 = duration0.toStandardSeconds();
        seconds1.toString();
        seconds1.hashCode();
        org.junit.Assert.assertTrue(seconds1.equals(seconds1));
    }

    @Test
    public void test535() throws Throwable {
        org.joda.time.tz.UTCProvider uTCProvider0 = new org.joda.time.tz.UTCProvider();
        uTCProvider0.toString();
        uTCProvider0.hashCode();
        org.junit.Assert.assertTrue(uTCProvider0.equals(uTCProvider0));
    }

    @Test
    public void test536() throws Throwable {
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.weeks();
        org.joda.time.Period period1 = new org.joda.time.Period(1, 1, periodType0);
        int int2 = period1.getMonths();
    }

    @Test
    public void test537() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.Chronology chronology2 = chronology1.withUTC();
        chronology2.toString();
        chronology2.hashCode();
        org.junit.Assert.assertTrue(chronology2.equals(chronology2));
    }

    @Test
    public void test538() throws Throwable {
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.Interval interval2 = yearMonthDay1.toInterval();
        interval2.toString();
        interval2.hashCode();
        org.junit.Assert.assertTrue(interval2.equals(interval2));
    }

    @Test
    public void test539() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeUtils.getZone(dateTimeZone1);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(1, 1, 1, 1, 1, dateTimeZone2);
        dateTime3.toString();
        dateTime3.hashCode();
        org.junit.Assert.assertTrue(dateTime3.equals(dateTime3));
    }

    @Test
    public void test540() throws Throwable {
        org.joda.time.MutableDateTime.Property getField0 = null;
        org.joda.time.DateTimeField dateTimeField1 = getField0.getField();
        dateTimeField1.toString();
        dateTimeField1.hashCode();
        org.junit.Assert.assertTrue(dateTimeField1.equals(dateTimeField1));
    }

    @Test
    public void test541() throws Throwable {
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> map0 = null;
        org.joda.time.DateTimeUtils.setDefaultTimeZoneNames(map0);
    }

    @Test
    public void test542() throws Throwable {
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval(1, 1);
        mutableInterval0.setDurationAfterStart(1);
    }

    @Test
    public void test543() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(chronology1);
        org.joda.time.DateTime dateTime3 = dateTime2.withTimeAtStartOfDay();
        dateTime3.toString();
        dateTime3.hashCode();
        org.junit.Assert.assertTrue(dateTime3.equals(dateTime3));
    }

    @Test
    public void test544() throws Throwable {
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime(1, 1, 1, 1, 1);
        dateTime0.toString();
        dateTime0.hashCode();
        org.junit.Assert.assertTrue(dateTime0.equals(dateTime0));
    }

    @Test
    public void test545() throws Throwable {
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = dateTimeFormatterBuilder0.toPrinter();
        dateTimePrinter1.toString();
        dateTimePrinter1.hashCode();
        org.junit.Assert.assertTrue(dateTimePrinter1.equals(dateTimePrinter1));
    }

    @Test
    public void test546() throws Throwable {
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.minutes(1);
        minutes0.toString();
        minutes0.hashCode();
        org.junit.Assert.assertTrue(minutes0.equals(minutes0));
    }

    @Test
    public void test547() throws Throwable {
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(readableDuration0, readableInstant1);
        mutablePeriod2.toString();
        mutablePeriod2.hashCode();
        org.junit.Assert.assertTrue(mutablePeriod2.equals(mutablePeriod2));
    }

    @Test
    public void test548() throws Throwable {
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortDateTime();
        boolean boolean1 = dateTimeFormatter0.isOffsetParsed();
    }

    @Test
    public void test549() throws Throwable {
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArr2 = yearMonthDay1.getFieldTypes();
        dateTimeFieldTypeArr2.toString();
        dateTimeFieldTypeArr2.hashCode();
        org.junit.Assert.assertTrue(dateTimeFieldTypeArr2.equals(dateTimeFieldTypeArr2));
    }

    @Test
    public void test550() throws Throwable {
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.years();
        org.joda.time.field.UnsupportedDurationField unsupportedDurationField1 = org.joda.time.field.UnsupportedDurationField.getInstance(durationFieldType0);
        long long2 = unsupportedDurationField1.add(1, 1);
    }

    @Test
    public void test551() throws Throwable {
        org.joda.time.DateTime.Property roundHalfFloorCopy0 = null;
        org.joda.time.DateTime dateTime1 = roundHalfFloorCopy0.roundHalfFloorCopy();
        dateTime1.toString();
        dateTime1.hashCode();
        org.junit.Assert.assertTrue(dateTime1.equals(dateTime1));
    }

    @Test
    public void test552() throws Throwable {
        org.joda.time.LocalTime.Property addWrapFieldToCopy0 = null;
        org.joda.time.LocalTime localTime1 = addWrapFieldToCopy0.addWrapFieldToCopy(1);
        localTime1.toString();
        localTime1.hashCode();
        org.junit.Assert.assertTrue(localTime1.equals(localTime1));
    }

    @Test
    public void test553() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(1, chronology1);
        org.joda.time.LocalDate.Property property3 = localDate2.yearOfEra();
        property3.toString();
        property3.hashCode();
        org.junit.Assert.assertTrue(property3.equals(property3));
    }

    @Test
    public void test554() throws Throwable {
        org.joda.time.LocalTime.Property roundHalfFloorCopy0 = null;
        org.joda.time.LocalTime localTime1 = roundHalfFloorCopy0.roundHalfFloorCopy();
        localTime1.toString();
        localTime1.hashCode();
        org.junit.Assert.assertTrue(localTime1.equals(localTime1));
    }

    @Test
    public void test555() throws Throwable {
        int int0 = org.joda.time.field.FieldUtils.getWrappedValue(1, 1, 1, 1);
    }

    @Test
    public void test556() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(1, chronology0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.dayOfWeek();
        org.joda.time.DateMidnight.Property property3 = dateMidnight1.property(dateTimeFieldType2);
        property3.toString();
        property3.hashCode();
        org.junit.Assert.assertTrue(property3.equals(property3));
    }

    @Test
    public void test557() throws Throwable {
        org.joda.time.LocalDate.Property addWrapFieldToCopy0 = null;
        org.joda.time.LocalDate localDate1 = addWrapFieldToCopy0.addWrapFieldToCopy(1);
        localDate1.toString();
        localDate1.hashCode();
        org.junit.Assert.assertTrue(localDate1.equals(localDate1));
    }

    @Test
    public void test558() throws Throwable {
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Weeks weeks2 = org.joda.time.Weeks.weeksIn(readableInterval1);
        org.joda.time.ReadableInterval readableInterval3 = null;
        org.joda.time.ReadableInterval readableInterval4 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval3);
        org.joda.time.Weeks weeks5 = org.joda.time.Weeks.weeksIn(readableInterval4);
        org.joda.time.Weeks weeks6 = weeks2.minus(weeks5);
        weeks6.toString();
        weeks6.hashCode();
        org.junit.Assert.assertTrue(weeks6.equals(weeks6));
    }

    @Test
    public void test559() throws Throwable {
        org.joda.time.YearMonth yearMonth0 = new org.joda.time.YearMonth(1, 1);
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.YearMonth yearMonth2 = yearMonth0.minus(readablePeriod1);
        yearMonth2.toString();
        yearMonth2.hashCode();
        org.junit.Assert.assertTrue(yearMonth2.equals(yearMonth2));
    }

    @Test
    public void test560() throws Throwable {
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.years();
        org.joda.time.field.UnsupportedDurationField unsupportedDurationField1 = org.joda.time.field.UnsupportedDurationField.getInstance(durationFieldType0);
        long long2 = unsupportedDurationField1.getUnitMillis();
    }

    @Test
    public void test561() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay(1, 1, 1, 1, chronology0);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArr2 = timeOfDay1.getFieldTypes();
        dateTimeFieldTypeArr2.toString();
        dateTimeFieldTypeArr2.hashCode();
        org.junit.Assert.assertTrue(dateTimeFieldTypeArr2.equals(dateTimeFieldTypeArr2));
    }

    @Test
    public void test562() throws Throwable {
        java.lang.Object object0 = null;
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth(object0);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArr2 = yearMonth1.getFieldTypes();
        dateTimeFieldTypeArr2.toString();
        dateTimeFieldTypeArr2.hashCode();
        org.junit.Assert.assertTrue(dateTimeFieldTypeArr2.equals(dateTimeFieldTypeArr2));
    }

    @Test
    public void test563() throws Throwable {
        org.joda.time.Instant minus0 = null;
        org.joda.time.Instant instant1 = minus0.minus(1);
        instant1.toString();
        instant1.hashCode();
        org.junit.Assert.assertTrue(instant1.equals(instant1));
    }

    @Test
    public void test564() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1, dateTimeZone1);
        dateMidnight2.toString();
        dateMidnight2.hashCode();
        org.junit.Assert.assertTrue(dateMidnight2.equals(dateMidnight2));
    }

    @Test
    public void test565() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(1, chronology1);
        org.joda.time.ReadablePartial readablePartial3 = null;
        org.joda.time.LocalDate localDate4 = localDate2.withFields(readablePartial3);
        localDate4.toString();
        localDate4.hashCode();
        org.junit.Assert.assertTrue(localDate4.equals(localDate4));
    }

    @Test
    public void test566() throws Throwable {
        org.joda.time.DateMidnight.Property setCopy0 = null;
        java.lang.String string1 = null;
        org.joda.time.DateMidnight dateMidnight2 = setCopy0.setCopy(string1);
        dateMidnight2.toString();
        dateMidnight2.hashCode();
        org.junit.Assert.assertTrue(dateMidnight2.equals(dateMidnight2));
    }

    @Test
    public void test567() throws Throwable {
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateTimeComparator dateTimeComparator2 = org.joda.time.DateTimeComparator.getInstance(dateTimeFieldType0, dateTimeFieldType1);
        dateTimeComparator2.toString();
        dateTimeComparator2.hashCode();
        org.junit.Assert.assertTrue(dateTimeComparator2.equals(dateTimeComparator2));
    }

    @Test
    public void test568() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod(1, chronology0);
        mutablePeriod1.setMinutes(1);
    }

    @Test
    public void test569() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(1, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.secondOfMinute();
        property3.toString();
        property3.hashCode();
        org.junit.Assert.assertTrue(property3.equals(property3));
    }

    @Test
    public void test570() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        int int2 = partial1.getValue(1);
    }

    @Test
    public void test571() throws Throwable {
        org.joda.time.DateTime.Property setCopy0 = null;
        org.joda.time.DateTime dateTime1 = setCopy0.setCopy(1);
        dateTime1.toString();
        dateTime1.hashCode();
        org.junit.Assert.assertTrue(dateTime1.equals(dateTime1));
    }

    @Test
    public void test572() throws Throwable {
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.time();
        org.joda.time.Period period1 = new org.joda.time.Period(1, periodType0);
        org.joda.time.Period period2 = period1.toPeriod();
        period2.toString();
        period2.hashCode();
        org.junit.Assert.assertTrue(period2.equals(period2));
    }

    @Test
    public void test573() throws Throwable {
        org.joda.time.Years years0 = org.joda.time.Years.years(1);
        org.joda.time.Years years1 = org.joda.time.Years.years(1);
        org.joda.time.Years years2 = years0.minus(years1);
        years2.toString();
        years2.hashCode();
        org.junit.Assert.assertTrue(years2.equals(years2));
    }

    @Test
    public void test574() throws Throwable {
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = org.joda.time.format.DateTimeFormat.shortDateTime();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder0.append(dateTimeFormatter1);
        dateTimeFormatterBuilder2.toString();
        dateTimeFormatterBuilder2.hashCode();
        org.junit.Assert.assertTrue(dateTimeFormatterBuilder2.equals(dateTimeFormatterBuilder2));
    }

    @Test
    public void test575() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime(chronology1);
        mutableDateTime2.addWeeks(1);
    }

    @Test
    public void test576() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.MonthDay monthDay2 = new org.joda.time.MonthDay(chronology1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArr3 = monthDay2.getFieldTypes();
        dateTimeFieldTypeArr3.toString();
        dateTimeFieldTypeArr3.hashCode();
        org.junit.Assert.assertTrue(dateTimeFieldTypeArr3.equals(dateTimeFieldTypeArr3));
    }

    @Test
    public void test577() throws Throwable {
        org.joda.time.MutableDateTime.Property roundHalfEven0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = roundHalfEven0.roundHalfEven();
        mutableDateTime1.toString();
        mutableDateTime1.hashCode();
        org.junit.Assert.assertTrue(mutableDateTime1.equals(mutableDateTime1));
    }

    @Test
    public void test578() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate2 = localDate1.withDayOfWeek(1);
        localDate2.toString();
        localDate2.hashCode();
        org.junit.Assert.assertTrue(localDate2.equals(localDate2));
    }

    @Test
    public void test579() throws Throwable {
        org.joda.time.field.OffsetDateTimeField add0 = null;
        long long1 = add0.add(1, 1);
    }

    @Test
    public void test580() throws Throwable {
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate(1);
        localDate0.toString();
        localDate0.hashCode();
        org.junit.Assert.assertTrue(localDate0.equals(localDate0));
    }

    @Test
    public void test581() throws Throwable {
        java.lang.Object object0 = null;
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(object0, chronology1);
        int int3 = localDateTime2.getHourOfDay();
    }

    @Test
    public void test582() throws Throwable {
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime(1);
        mutableDateTime0.setDayOfWeek(1);
    }

    @Test
    public void test583() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.now(chronology1);
        localTime2.toString();
        localTime2.hashCode();
        org.junit.Assert.assertTrue(localTime2.equals(localTime2));
    }

    @Test
    public void test584() throws Throwable {
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime(1, 1, 1, 1, 1, 1, 1);
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.hourOfDay();
        property1.toString();
        property1.hashCode();
        org.junit.Assert.assertTrue(property1.equals(property1));
    }

    @Test
    public void test585() throws Throwable {
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getChronology(chronology2);
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay(1, 1, 1, chronology3);
        org.joda.time.DateTime dateTime5 = yearMonthDay1.toDateTime(timeOfDay4);
        dateTime5.toString();
        dateTime5.hashCode();
        org.junit.Assert.assertTrue(dateTime5.equals(dateTime5));
    }

    @Test
    public void test586() throws Throwable {
        org.joda.time.DateTimeField dateTimeField0 = null;
        org.joda.time.DurationField durationField1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField3 = new org.joda.time.field.DividedDateTimeField(dateTimeField0, durationField1, dateTimeFieldType2, 1);
        dividedDateTimeField3.toString();
        dividedDateTimeField3.hashCode();
        org.junit.Assert.assertTrue(dividedDateTimeField3.equals(dividedDateTimeField3));
    }

    @Test
    public void test587() throws Throwable {
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.dateHourMinuteSecondFraction();
        dateTimeFormatter0.toString();
        dateTimeFormatter0.hashCode();
        org.junit.Assert.assertTrue(dateTimeFormatter0.equals(dateTimeFormatter0));
    }

    @Test
    public void test588() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeUtils.getZone(dateTimeZone1);
        int int3 = dateTimeZone2.getOffsetFromLocal(1);
    }

    @Test
    public void test589() throws Throwable {
        org.joda.time.Hours getHours0 = null;
        int int1 = getHours0.getHours();
    }

    @Test
    public void test590() throws Throwable {
        org.joda.time.format.PeriodFormatter periodFormatter0 = org.joda.time.format.ISOPeriodFormat.alternateWithWeeks();
        java.lang.String string1 = null;
        org.joda.time.MutablePeriod mutablePeriod2 = periodFormatter0.parseMutablePeriod(string1);
        mutablePeriod2.toString();
        mutablePeriod2.hashCode();
        org.junit.Assert.assertTrue(mutablePeriod2.equals(mutablePeriod2));
    }

    @Test
    public void test591() throws Throwable {
        java.util.Date date0 = null;
        org.joda.time.TimeOfDay timeOfDay1 = org.joda.time.TimeOfDay.fromDateFields(date0);
        timeOfDay1.toString();
        timeOfDay1.hashCode();
        org.junit.Assert.assertTrue(timeOfDay1.equals(timeOfDay1));
    }

    @Test
    public void test592() throws Throwable {
        java.lang.Object object0 = null;
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(object0, chronology1);
        int int3 = localDateTime2.getMillisOfSecond();
    }

    @Test
    public void test593() throws Throwable {
        org.joda.time.DateTimeField getDurationField0 = null;
        org.joda.time.DurationField durationField1 = getDurationField0.getDurationField();
        durationField1.toString();
        durationField1.hashCode();
        org.junit.Assert.assertTrue(durationField1.equals(durationField1));
    }

    @Test
    public void test594() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Years years2 = org.joda.time.Years.yearsBetween(readableInstant0, readableInstant1);
        years2.toString();
        years2.hashCode();
        org.junit.Assert.assertTrue(years2.equals(years2));
    }

    @Test
    public void test595() throws Throwable {
        org.joda.time.YearMonth yearMonth0 = new org.joda.time.YearMonth(1, 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = yearMonth0.getFieldType(1);
        dateTimeFieldType1.toString();
        dateTimeFieldType1.hashCode();
        org.junit.Assert.assertTrue(dateTimeFieldType1.equals(dateTimeFieldType1));
    }

    @Test
    public void test596() throws Throwable {
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime(1);
        org.joda.time.MutableDateTime mutableDateTime1 = mutableDateTime0.copy();
        mutableDateTime1.toString();
        mutableDateTime1.hashCode();
        org.junit.Assert.assertTrue(mutableDateTime1.equals(mutableDateTime1));
    }

    @Test
    public void test597() throws Throwable {
        org.joda.time.field.DelegatedDateTimeField getMaximumValue0 = null;
        int int1 = getMaximumValue0.getMaximumValue(1);
    }

    @Test
    public void test598() throws Throwable {
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.hourMinute();
        dateTimeFormatter0.toString();
        dateTimeFormatter0.hashCode();
        org.junit.Assert.assertTrue(dateTimeFormatter0.equals(dateTimeFormatter0));
    }

    @Test
    public void test599() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(1, chronology0);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight1.withZoneRetainFields(dateTimeZone3);
        dateMidnight4.toString();
        dateMidnight4.hashCode();
        org.junit.Assert.assertTrue(dateMidnight4.equals(dateMidnight4));
    }

    @Test
    public void test600() throws Throwable {
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight(1, 1, 1);
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.minus(readableDuration1);
        dateMidnight2.toString();
        dateMidnight2.hashCode();
        org.junit.Assert.assertTrue(dateMidnight2.equals(dateMidnight2));
    }

    @Test
    public void test601() throws Throwable {
        org.joda.time.field.DelegatedDateTimeField getMinimumValue0 = null;
        int int1 = getMinimumValue0.getMinimumValue();
    }

    @Test
    public void test602() throws Throwable {
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.setSecondOfMinute(1);
    }

    @Test
    public void test603() throws Throwable {
        java.lang.Object object0 = null;
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth(object0);
        int int2 = yearMonth1.getYear();
    }

    @Test
    public void test604() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(1, chronology1);
        int int3 = localDate2.getValue(1);
    }

    @Test
    public void test605() throws Throwable {
        java.io.File file0 = null;
        org.joda.time.tz.ZoneInfoProvider zoneInfoProvider1 = new org.joda.time.tz.ZoneInfoProvider(file0);
        zoneInfoProvider1.toString();
        zoneInfoProvider1.hashCode();
        org.junit.Assert.assertTrue(zoneInfoProvider1.equals(zoneInfoProvider1));
    }

    @Test
    public void test606() throws Throwable {
        java.lang.Object object0 = null;
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(object0, chronology1);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime2.withEra(1);
        localDateTime3.toString();
        localDateTime3.hashCode();
        org.junit.Assert.assertTrue(localDateTime3.equals(localDateTime3));
    }

    @Test
    public void test607() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        long long2 = dateTimeZone1.nextTransition(1);
    }

    @Test
    public void test608() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeUtils.getZone(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone2);
        localDateTime3.toString();
        localDateTime3.hashCode();
        org.junit.Assert.assertTrue(localDateTime3.equals(localDateTime3));
    }

    @Test
    public void test609() throws Throwable {
        org.joda.time.field.DecoratedDurationField getValueAsLong0 = null;
        long long1 = getValueAsLong0.getValueAsLong(1, 1);
    }

    @Test
    public void test610() throws Throwable {
        org.joda.time.Years years0 = org.joda.time.Years.years(1);
        int int1 = years0.getYears();
    }

    @Test
    public void test611() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(readableInstant0, readableInstant1);
        mutablePeriod2.clear();
    }

    @Test
    public void test612() throws Throwable {
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendMonthOfYearShortText();
        dateTimeFormatterBuilder1.toString();
        dateTimeFormatterBuilder1.hashCode();
        org.junit.Assert.assertTrue(dateTimeFormatterBuilder1.equals(dateTimeFormatterBuilder1));
    }

    @Test
    public void test613() throws Throwable {
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.localTimeParser();
        dateTimeFormatter0.toString();
        dateTimeFormatter0.hashCode();
        org.junit.Assert.assertTrue(dateTimeFormatter0.equals(dateTimeFormatter0));
    }

    @Test
    public void test614() throws Throwable {
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.dayOfMonth();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder0.appendText(dateTimeFieldType1);
        dateTimeFormatterBuilder2.toString();
        dateTimeFormatterBuilder2.hashCode();
        org.junit.Assert.assertTrue(dateTimeFormatterBuilder2.equals(dateTimeFormatterBuilder2));
    }

    @Test
    public void test615() throws Throwable {
        org.joda.time.format.PeriodFormatter periodFormatter0 = org.joda.time.format.ISOPeriodFormat.alternateExtended();
        org.joda.time.format.PeriodPrinter periodPrinter1 = periodFormatter0.getPrinter();
        periodPrinter1.toString();
        periodPrinter1.hashCode();
        org.junit.Assert.assertTrue(periodPrinter1.equals(periodPrinter1));
    }

    @Test
    public void test616() throws Throwable {
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime(1, 1, 1, 1, 1, 1, 1);
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeUtils.getZone(dateTimeZone2);
        mutableDateTime0.setZone(dateTimeZone3);
    }

    @Test
    public void test617() throws Throwable {
        org.joda.time.ReadablePeriod readablePeriod0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Interval interval2 = new org.joda.time.Interval(readablePeriod0, readableInstant1);
        interval2.toString();
        interval2.hashCode();
        org.junit.Assert.assertTrue(interval2.equals(interval2));
    }

    @Test
    public void test618() throws Throwable {
        java.lang.Object object0 = null;
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(object0, chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.centuryOfEra();
        property3.toString();
        property3.hashCode();
        org.junit.Assert.assertTrue(property3.equals(property3));
    }

    @Test
    public void test619() throws Throwable {
        org.joda.time.field.UnsupportedDateTimeField roundHalfFloor0 = null;
        long long1 = roundHalfFloor0.roundHalfFloor(1);
    }

    @Test
    public void test620() throws Throwable {
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight(1, 1, 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight.Property property2 = dateMidnight0.property(dateTimeFieldType1);
        property2.toString();
        property2.hashCode();
        org.junit.Assert.assertTrue(property2.equals(property2));
    }

    @Test
    public void test621() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime(chronology1);
        org.joda.time.ReadableInstant readableInstant3 = null;
        mutableDateTime2.setTime(readableInstant3);
    }

    @Test
    public void test622() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.MutableDateTime mutableDateTime2 = org.joda.time.MutableDateTime.now(chronology1);
        mutableDateTime2.toString();
        mutableDateTime2.hashCode();
        org.junit.Assert.assertTrue(mutableDateTime2.equals(mutableDateTime2));
    }

    @Test
    public void test623() throws Throwable {
        org.joda.time.PeriodType periodType0 = null;
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Period period2 = new org.joda.time.Period(1, periodType0, chronology1);
        org.joda.time.Period period3 = period2.minusMonths(1);
        period3.toString();
        period3.hashCode();
        org.junit.Assert.assertTrue(period3.equals(period3));
    }

    @Test
    public void test624() throws Throwable {
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendDayOfWeekShortText();
        dateTimeFormatterBuilder1.toString();
        dateTimeFormatterBuilder1.hashCode();
        org.junit.Assert.assertTrue(dateTimeFormatterBuilder1.equals(dateTimeFormatterBuilder1));
    }

    @Test
    public void test625() throws Throwable {
        org.joda.time.MutablePeriod mutablePeriod0 = new org.joda.time.MutablePeriod(1, 1, 1, 1);
        mutablePeriod0.addHours(1);
    }

    @Test
    public void test626() throws Throwable {
        int int0 = org.joda.time.field.FieldUtils.getWrappedValue(1, 1, 1);
    }

    @Test
    public void test627() throws Throwable {
        org.joda.time.field.SkipUndoDateTimeField set0 = null;
        long long1 = set0.set(1, 1);
    }

    @Test
    public void test628() throws Throwable {
        org.joda.time.field.SkipUndoDateTimeField getMinimumValue0 = null;
        int int1 = getMinimumValue0.getMinimumValue();
    }

    @Test
    public void test629() throws Throwable {
        org.joda.time.field.ZeroIsMaxDateTimeField getMaximumValue0 = null;
        int int1 = getMaximumValue0.getMaximumValue(1);
    }

    @Test
    public void test630() throws Throwable {
        java.lang.Object object0 = null;
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(object0);
        org.joda.time.LocalTime localTime2 = localTime1.withHourOfDay(1);
        localTime2.toString();
        localTime2.hashCode();
        org.junit.Assert.assertTrue(localTime2.equals(localTime2));
    }

    @Test
    public void test631() throws Throwable {
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder0.appendShortText(dateTimeFieldType1);
        dateTimeFormatterBuilder2.toString();
        dateTimeFormatterBuilder2.hashCode();
        org.junit.Assert.assertTrue(dateTimeFormatterBuilder2.equals(dateTimeFormatterBuilder2));
    }

    @Test
    public void test632() throws Throwable {
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Days days2 = org.joda.time.Days.daysIn(readableInterval1);
        org.joda.time.Days days3 = days2.minus(1);
        days3.toString();
        days3.hashCode();
        org.junit.Assert.assertTrue(days3.equals(days3));
    }

    @Test
    public void test633() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(1, chronology0);
        org.joda.time.Interval interval2 = dateMidnight1.toInterval();
        interval2.toString();
        interval2.hashCode();
        org.junit.Assert.assertTrue(interval2.equals(interval2));
    }

    @Test
    public void test634() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeUtils.getZone(dateTimeZone1);
        long long3 = dateTimeZone2.convertLocalToUTC(1, true);
    }

    @Test
    public void test635() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(chronology1);
        org.joda.time.DateTime dateTime3 = dateTime2.withMillis(1);
        dateTime3.toString();
        dateTime3.hashCode();
        org.junit.Assert.assertTrue(dateTime3.equals(dateTime3));
    }

    @Test
    public void test636() throws Throwable {
        org.joda.time.Period period0 = org.joda.time.Period.hours(1);
        period0.toString();
        period0.hashCode();
        org.junit.Assert.assertTrue(period0.equals(period0));
    }

    @Test
    public void test637() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeUtils.getZone(dateTimeZone1);
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime(1, dateTimeZone2);
        localTime3.toString();
        localTime3.hashCode();
        org.junit.Assert.assertTrue(localTime3.equals(localTime3));
    }

    @Test
    public void test638() throws Throwable {
        org.joda.time.field.RemainderDateTimeField remainder0 = null;
        long long1 = remainder0.remainder(1);
    }

    @Test
    public void test639() throws Throwable {
        java.lang.Object object0 = null;
        org.joda.time.PeriodType periodType1 = null;
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(object0, periodType1);
        mutablePeriod2.setPeriod(1, 1);
    }

    @Test
    public void test640() throws Throwable {
        java.lang.Object object0 = null;
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getChronology(chronology1);
        org.joda.time.Period period3 = new org.joda.time.Period(object0, chronology2);
        period3.toString();
        period3.hashCode();
        org.junit.Assert.assertTrue(period3.equals(period3));
    }

    @Test
    public void test641() throws Throwable {
        java.lang.Object object0 = null;
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(object0);
        int int2 = localTime1.getMinuteOfHour();
    }

    @Test
    public void test642() throws Throwable {
        java.lang.Object object0 = null;
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getChronology(chronology1);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(object0, chronology2);
        org.joda.time.ReadablePartial readablePartial4 = null;
        org.joda.time.LocalDate localDate5 = localDate3.withFields(readablePartial4);
        localDate5.toString();
        localDate5.hashCode();
        org.junit.Assert.assertTrue(localDate5.equals(localDate5));
    }

    @Test
    public void test643() throws Throwable {
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime(1, 1, 1);
        int int1 = localTime0.getValue(1);
    }

    @Test
    public void test644() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeUtils.getZone(dateTimeZone1);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(1, 1, 1, 1, 1, dateTimeZone2);
        org.joda.time.DateTime dateTime4 = dateTime3.withSecondOfMinute(1);
        dateTime4.toString();
        dateTime4.hashCode();
        org.junit.Assert.assertTrue(dateTime4.equals(dateTime4));
    }

    @Test
    public void test645() throws Throwable {
        java.lang.Object object0 = null;
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getChronology(chronology2);
        org.joda.time.Period period4 = new org.joda.time.Period(object0, periodType1, chronology3);
        period4.toString();
        period4.hashCode();
        org.junit.Assert.assertTrue(period4.equals(period4));
    }

    @Test
    public void test646() throws Throwable {
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.basicOrdinalDateTime();
        java.lang.StringBuffer stringBuffer1 = null;
        dateTimeFormatter0.printTo(stringBuffer1, 1);
    }

    @Test
    public void test647() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.minus(readablePeriod2);
        monthDay3.toString();
        monthDay3.hashCode();
        org.junit.Assert.assertTrue(monthDay3.equals(monthDay3));
    }

    @Test
    public void test648() throws Throwable {
        org.joda.time.YearMonth yearMonth0 = new org.joda.time.YearMonth(1, 1);
        org.joda.time.DurationFieldType durationFieldType1 = org.joda.time.DurationFieldType.years();
        org.joda.time.YearMonth yearMonth2 = yearMonth0.withFieldAdded(durationFieldType1, 1);
        yearMonth2.toString();
        yearMonth2.hashCode();
        org.junit.Assert.assertTrue(yearMonth2.equals(yearMonth2));
    }

    @Test
    public void test649() throws Throwable {
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.weekyear();
        dateTimeFieldType0.toString();
        dateTimeFieldType0.hashCode();
        org.junit.Assert.assertTrue(dateTimeFieldType0.equals(dateTimeFieldType0));
    }

    @Test
    public void test650() throws Throwable {
        org.joda.time.Period period0 = org.joda.time.Period.years(1);
        org.joda.time.Period period1 = period0.minusSeconds(1);
        period1.toString();
        period1.hashCode();
        org.junit.Assert.assertTrue(period1.equals(period1));
    }

    @Test
    public void test651() throws Throwable {
        org.joda.time.Instant plus0 = null;
        org.joda.time.Instant instant1 = plus0.plus(1);
        instant1.toString();
        instant1.hashCode();
        org.junit.Assert.assertTrue(instant1.equals(instant1));
    }

    @Test
    public void test652() throws Throwable {
        org.joda.time.DateMidnight.Property roundFloorCopy0 = null;
        org.joda.time.DateMidnight dateMidnight1 = roundFloorCopy0.roundFloorCopy();
        dateMidnight1.toString();
        dateMidnight1.hashCode();
        org.junit.Assert.assertTrue(dateMidnight1.equals(dateMidnight1));
    }

    @Test
    public void test653() throws Throwable {
        org.joda.time.MutablePeriod mutablePeriod0 = new org.joda.time.MutablePeriod(1, 1, 1, 1);
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        mutablePeriod0.add(readablePeriod1);
    }

    @Test
    public void test654() throws Throwable {
        org.joda.time.DurationField getValue0 = null;
        int int1 = getValue0.getValue(1);
    }

    @Test
    public void test655() throws Throwable {
        org.joda.time.DateTimeField getMaximumValue0 = null;
        int int1 = getMaximumValue0.getMaximumValue(1);
    }

    @Test
    public void test656() throws Throwable {
        java.lang.String string0 = null;
        org.joda.time.Minutes minutes1 = org.joda.time.Minutes.parseMinutes(string0);
        org.joda.time.Minutes minutes2 = minutes1.negated();
        minutes2.toString();
        minutes2.hashCode();
        org.junit.Assert.assertTrue(minutes2.equals(minutes2));
    }

    @Test
    public void test657() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        int[] intArr3 = chronology1.get(readablePeriod2, 1, 1);
        intArr3.toString();
        intArr3.hashCode();
        org.junit.Assert.assertTrue(intArr3.equals(intArr3));
    }

    @Test
    public void test658() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = partial1.getFieldType(1);
        dateTimeFieldType2.toString();
        dateTimeFieldType2.hashCode();
        org.junit.Assert.assertTrue(dateTimeFieldType2.equals(dateTimeFieldType2));
    }

    @Test
    public void test659() throws Throwable {
        org.joda.time.Period period0 = new org.joda.time.Period(1, 1, 1, 1);
        org.joda.time.Period period1 = period0.plusDays(1);
        period1.toString();
        period1.hashCode();
        org.junit.Assert.assertTrue(period1.equals(period1));
    }

    @Test
    public void test660() throws Throwable {
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.basicOrdinalDateTime();
        boolean boolean1 = dateTimeFormatter0.isParser();
    }

    @Test
    public void test661() throws Throwable {
        org.joda.time.field.DelegatedDateTimeField getMinimumValue0 = null;
        org.joda.time.ReadablePartial readablePartial1 = null;
        int int2 = getMinimumValue0.getMinimumValue(readablePartial1);
    }

    @Test
    public void test662() throws Throwable {
        org.joda.time.field.RemainderDateTimeField set0 = null;
        long long1 = set0.set(1, 1);
    }

    @Test
    public void test663() throws Throwable {
        int int0 = org.joda.time.format.FormatUtils.calculateDigitCount(1);
    }

    @Test
    public void test664() throws Throwable {
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay(1);
        org.joda.time.TimeOfDay timeOfDay1 = timeOfDay0.minusMinutes(1);
        timeOfDay1.toString();
        timeOfDay1.hashCode();
        org.junit.Assert.assertTrue(timeOfDay1.equals(timeOfDay1));
    }

    @Test
    public void test665() throws Throwable {
        org.joda.time.Duration duration0 = org.joda.time.Duration.standardMinutes(1);
        long long1 = duration0.getStandardHours();
    }

    @Test
    public void test666() throws Throwable {
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Days days2 = org.joda.time.Days.daysIn(readableInterval1);
        int int3 = days2.getDays();
    }

    @Test
    public void test667() throws Throwable {
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        dateTimeFieldType0.toString();
        dateTimeFieldType0.hashCode();
        org.junit.Assert.assertTrue(dateTimeFieldType0.equals(dateTimeFieldType0));
    }

    @Test
    public void test668() throws Throwable {
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.dateHourMinuteSecondFraction();
        java.lang.Integer integer1 = dateTimeFormatter0.getPivotYear();
        integer1.toString();
        integer1.hashCode();
        org.junit.Assert.assertTrue(integer1.equals(integer1));
    }

    @Test
    public void test669() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.now(chronology1);
        org.joda.time.LocalTime localTime3 = localTime2.withMillisOfDay(1);
        localTime3.toString();
        localTime3.hashCode();
        org.junit.Assert.assertTrue(localTime3.equals(localTime3));
    }

    @Test
    public void test670() throws Throwable {
        org.joda.time.chrono.BuddhistChronology buddhistChronology0 = org.joda.time.chrono.BuddhistChronology.getInstanceUTC();
        int int1 = buddhistChronology0.hashCode();
    }

    @Test
    public void test671() throws Throwable {
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(readableDuration0, readableInstant1);
        int int3 = mutablePeriod2.getMinutes();
    }

    @Test
    public void test672() throws Throwable {
        java.lang.Object object0 = null;
        java.lang.Object object1 = null;
        boolean boolean2 = org.joda.time.field.FieldUtils.equals(object0, object1);
    }

    @Test
    public void test673() throws Throwable {
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.yearDayTime();
        periodType0.toString();
        periodType0.hashCode();
        org.junit.Assert.assertTrue(periodType0.equals(periodType0));
    }

    @Test
    public void test674() throws Throwable {
        org.joda.time.DateTimeField getRangeDurationField0 = null;
        org.joda.time.DurationField durationField1 = getRangeDurationField0.getRangeDurationField();
        durationField1.toString();
        durationField1.hashCode();
        org.junit.Assert.assertTrue(durationField1.equals(durationField1));
    }

    @Test
    public void test675() throws Throwable {
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime(1, 1, 1, 1, 1);
        org.joda.time.DateTime dateTime1 = dateTime0.withDurationAdded(1, 1);
        dateTime1.toString();
        dateTime1.hashCode();
        org.junit.Assert.assertTrue(dateTime1.equals(dateTime1));
    }

    @Test
    public void test676() throws Throwable {
        org.joda.time.YearMonth yearMonth0 = new org.joda.time.YearMonth(1, 1);
        org.joda.time.YearMonth yearMonth1 = yearMonth0.plusMonths(1);
        yearMonth1.toString();
        yearMonth1.hashCode();
        org.junit.Assert.assertTrue(yearMonth1.equals(yearMonth1));
    }

    @Test
    public void test677() throws Throwable {
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateTimeComparator dateTimeComparator1 = org.joda.time.DateTimeComparator.getInstance(dateTimeFieldType0);
        java.lang.String string2 = dateTimeComparator1.toString();
        string2.toString();
        string2.hashCode();
        org.junit.Assert.assertTrue(string2.equals(string2));
    }

    @Test
    public void test678() throws Throwable {
        org.joda.time.Years years0 = org.joda.time.Years.years(1);
        org.joda.time.Years years1 = years0.plus(1);
        years1.toString();
        years1.hashCode();
        org.junit.Assert.assertTrue(years1.equals(years1));
    }

    @Test
    public void test679() throws Throwable {
        org.joda.time.DateTimeField dateTimeField0 = null;
        org.joda.time.DurationField durationField1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField3 = new org.joda.time.field.DividedDateTimeField(dateTimeField0, durationField1, dateTimeFieldType2, 1);
        dividedDateTimeField3.toString();
        dividedDateTimeField3.hashCode();
        org.junit.Assert.assertTrue(dividedDateTimeField3.equals(dividedDateTimeField3));
    }

    @Test
    public void test680() throws Throwable {
        org.joda.time.Period period0 = org.joda.time.Period.days(1);
        period0.toString();
        period0.hashCode();
        org.junit.Assert.assertTrue(period0.equals(period0));
    }

    @Test
    public void test681() throws Throwable {
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortTime();
        java.lang.String string1 = null;
        org.joda.time.DateTime dateTime2 = dateTimeFormatter0.parseDateTime(string1);
        dateTime2.toString();
        dateTime2.hashCode();
        org.junit.Assert.assertTrue(dateTime2.equals(dateTime2));
    }

    @Test
    public void test682() throws Throwable {
        java.lang.Object object0 = null;
        org.joda.time.Period period1 = new org.joda.time.Period(object0);
        period1.toString();
        period1.hashCode();
        org.junit.Assert.assertTrue(period1.equals(period1));
    }

    @Test
    public void test683() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(chronology1);
        java.util.TimeZone timeZone3 = null;
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeUtils.getZone(dateTimeZone4);
        org.joda.time.DateTime dateTime6 = dateTime2.withZoneRetainFields(dateTimeZone5);
        dateTime6.toString();
        dateTime6.hashCode();
        org.junit.Assert.assertTrue(dateTime6.equals(dateTime6));
    }

    @Test
    public void test684() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.withPeriodAdded(readablePeriod2, 1);
        partial3.toString();
        partial3.hashCode();
        org.junit.Assert.assertTrue(partial3.equals(partial3));
    }

    @Test
    public void test685() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeUtils.getZone(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone2);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.era();
        property4.toString();
        property4.hashCode();
        org.junit.Assert.assertTrue(property4.equals(property4));
    }

    @Test
    public void test686() throws Throwable {
        java.lang.String string0 = null;
        org.joda.time.Months months1 = org.joda.time.Months.parseMonths(string0);
        java.lang.String string2 = null;
        org.joda.time.Months months3 = org.joda.time.Months.parseMonths(string2);
        boolean boolean4 = months1.isLessThan(months3);
    }

    @Test
    public void test687() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(1, chronology1);
        org.joda.time.DateMidnight dateMidnight3 = dateTime2.toDateMidnight();
        dateMidnight3.toString();
        dateMidnight3.hashCode();
        org.junit.Assert.assertTrue(dateMidnight3.equals(dateMidnight3));
    }

    @Test
    public void test688() throws Throwable {
        java.lang.String string0 = null;
        org.joda.time.Minutes minutes1 = org.joda.time.Minutes.parseMinutes(string0);
        org.joda.time.Hours hours2 = minutes1.toStandardHours();
        hours2.toString();
        hours2.hashCode();
        org.junit.Assert.assertTrue(hours2.equals(hours2));
    }

    @Test
    public void test689() throws Throwable {
        org.joda.time.Period period0 = org.joda.time.Period.months(1);
        period0.toString();
        period0.hashCode();
        org.junit.Assert.assertTrue(period0.equals(period0));
    }

    @Test
    public void test690() throws Throwable {
        java.lang.String string0 = null;
        org.joda.time.Months months1 = org.joda.time.Months.parseMonths(string0);
        int int2 = months1.getMonths();
    }

    @Test
    public void test691() throws Throwable {
        java.lang.Object object0 = null;
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getChronology(chronology1);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(object0, chronology2);
        org.joda.time.DateMidnight dateMidnight4 = localDate3.toDateMidnight();
        dateMidnight4.toString();
        dateMidnight4.hashCode();
        org.junit.Assert.assertTrue(dateMidnight4.equals(dateMidnight4));
    }

    @Test
    public void test692() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        java.lang.String string2 = partial1.toStringList();
        string2.toString();
        string2.hashCode();
        org.junit.Assert.assertTrue(string2.equals(string2));
    }

    @Test
    public void test693() throws Throwable {
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(1, 1, 1, 1, chronology2);
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay3);
        dateTime4.toString();
        dateTime4.hashCode();
        org.junit.Assert.assertTrue(dateTime4.equals(dateTime4));
    }

    @Test
    public void test694() throws Throwable {
        org.joda.time.chrono.IslamicChronology islamicChronology0 = org.joda.time.chrono.IslamicChronology.getInstance();
        java.lang.Object object1 = null;
        boolean boolean2 = islamicChronology0.equals(object1);
    }

    @Test
    public void test695() throws Throwable {
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.GJChronology gJChronology1 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0);
        java.lang.String string2 = gJChronology1.toString();
        string2.toString();
        string2.hashCode();
        org.junit.Assert.assertTrue(string2.equals(string2));
    }

    @Test
    public void test696() throws Throwable {
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        org.joda.time.DateMidnight.Property property2 = dateMidnight0.property(dateTimeFieldType1);
        property2.toString();
        property2.hashCode();
        org.junit.Assert.assertTrue(property2.equals(property2));
    }

    @Test
    public void test697() throws Throwable {
        java.lang.String string0 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = org.joda.time.format.DateTimeFormat.shortDateTime();
        org.joda.time.YearMonth yearMonth2 = org.joda.time.YearMonth.parse(string0, dateTimeFormatter1);
        yearMonth2.toString();
        yearMonth2.hashCode();
        org.junit.Assert.assertTrue(yearMonth2.equals(yearMonth2));
    }

    @Test
    public void test698() throws Throwable {
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.field.FieldUtils.verifyValueBounds(dateTimeFieldType0, 1, 1, 1);
    }

    @Test
    public void test699() throws Throwable {
        org.joda.time.TimeOfDay.Property setCopy0 = null;
        java.lang.String string1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.TimeOfDay timeOfDay3 = setCopy0.setCopy(string1, locale2);
        timeOfDay3.toString();
        timeOfDay3.hashCode();
        org.junit.Assert.assertTrue(timeOfDay3.equals(timeOfDay3));
    }

    @Test
    public void test700() throws Throwable {
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Period period2 = new org.joda.time.Period(readableDuration0, readableInstant1);
        period2.toString();
        period2.hashCode();
        org.junit.Assert.assertTrue(period2.equals(period2));
    }

    @Test
    public void test701() throws Throwable {
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.weekDateTime();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
        dateTimeFormatter1.toString();
        dateTimeFormatter1.hashCode();
        org.junit.Assert.assertTrue(dateTimeFormatter1.equals(dateTimeFormatter1));
    }

    @Test
    public void test702() throws Throwable {
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.weekyears();
        java.lang.String string1 = null;
        org.joda.time.IllegalFieldValueException illegalFieldValueException2 = new org.joda.time.IllegalFieldValueException(durationFieldType0, string1);
        illegalFieldValueException2.toString();
        illegalFieldValueException2.hashCode();
        org.junit.Assert.assertTrue(illegalFieldValueException2.equals(illegalFieldValueException2));
    }

    @Test
    public void test703() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(1, chronology1);
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.DateTime dateTime4 = dateTime2.minus(readableDuration3);
        dateTime4.toString();
        dateTime4.hashCode();
        org.junit.Assert.assertTrue(dateTime4.equals(dateTime4));
    }

    @Test
    public void test704() throws Throwable {
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime(1, 1, 1);
        org.joda.time.DurationFieldType durationFieldType1 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean2 = localTime0.isSupported(durationFieldType1);
    }

    @Test
    public void test705() throws Throwable {
        java.lang.Object object0 = null;
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getChronology(chronology1);
        org.joda.time.Interval interval3 = new org.joda.time.Interval(object0, chronology2);
        interval3.toString();
        interval3.hashCode();
        org.junit.Assert.assertTrue(interval3.equals(interval3));
    }

    @Test
    public void test706() throws Throwable {
        org.joda.time.field.ZeroIsMaxDateTimeField getMinimumValue0 = null;
        int int1 = getMinimumValue0.getMinimumValue();
    }

    @Test
    public void test707() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeUtils.getZone(dateTimeZone1);
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime(dateTimeZone2);
        localTime3.toString();
        localTime3.hashCode();
        org.junit.Assert.assertTrue(localTime3.equals(localTime3));
    }

    @Test
    public void test708() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay(chronology0);
        org.joda.time.MonthDay monthDay2 = monthDay1.plusMonths(1);
        monthDay2.toString();
        monthDay2.hashCode();
        org.junit.Assert.assertTrue(monthDay2.equals(monthDay2));
    }

    @Test
    public void test709() throws Throwable {
        org.joda.time.field.UnsupportedDateTimeField getMinimumValue0 = null;
        int int1 = getMinimumValue0.getMinimumValue();
    }

    @Test
    public void test710() throws Throwable {
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.dateHourMinuteSecondFraction();
        java.io.Writer writer1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        dateTimeFormatter0.printTo(writer1, readableInstant2);
    }

    @Test
    public void test711() throws Throwable {
        java.lang.Object object0 = null;
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime(object0, dateTimeZone2);
        localDateTime3.toString();
        localDateTime3.hashCode();
        org.junit.Assert.assertTrue(localDateTime3.equals(localDateTime3));
    }

    @Test
    public void test712() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.MonthDay monthDay2 = new org.joda.time.MonthDay(chronology1);
        org.joda.time.MonthDay monthDay3 = monthDay2.minusMonths(1);
        monthDay3.toString();
        monthDay3.hashCode();
        org.junit.Assert.assertTrue(monthDay3.equals(monthDay3));
    }

    @Test
    public void test713() throws Throwable {
        org.joda.time.LocalDate.Property roundHalfFloorCopy0 = null;
        org.joda.time.LocalDate localDate1 = roundHalfFloorCopy0.roundHalfFloorCopy();
        localDate1.toString();
        localDate1.hashCode();
        org.junit.Assert.assertTrue(localDate1.equals(localDate1));
    }

    @Test
    public void test714() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.MonthDay monthDay2 = new org.joda.time.MonthDay(chronology1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.MonthDay monthDay4 = monthDay2.plus(readablePeriod3);
        monthDay4.toString();
        monthDay4.hashCode();
        org.junit.Assert.assertTrue(monthDay4.equals(monthDay4));
    }

    @Test
    public void test715() throws Throwable {
        org.joda.time.field.DividedDateTimeField get0 = null;
        int int1 = get0.get(1);
    }

    @Test
    public void test716() throws Throwable {
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.dayOfWeek();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder0.appendText(dateTimeFieldType1);
        dateTimeFormatterBuilder2.toString();
        dateTimeFormatterBuilder2.hashCode();
        org.junit.Assert.assertTrue(dateTimeFormatterBuilder2.equals(dateTimeFormatterBuilder2));
    }

    @Test
    public void test717() throws Throwable {
        org.joda.time.field.UnsupportedDateTimeField isLenient0 = null;
        boolean boolean1 = isLenient0.isLenient();
    }

    @Test
    public void test718() throws Throwable {
        org.joda.time.MonthDay.Property get0 = null;
        int int1 = get0.get();
    }

    @Test
    public void test719() throws Throwable {
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.centuries();
        durationFieldType0.toString();
        durationFieldType0.hashCode();
        org.junit.Assert.assertTrue(durationFieldType0.equals(durationFieldType0));
    }

    @Test
    public void test720() throws Throwable {
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.era();
        dateTimeFieldType0.toString();
        dateTimeFieldType0.hashCode();
        org.junit.Assert.assertTrue(dateTimeFieldType0.equals(dateTimeFieldType0));
    }

    @Test
    public void test721() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        java.util.Locale locale1 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket2 = new org.joda.time.format.DateTimeParserBucket(1, chronology0, locale1);
        int int3 = dateTimeParserBucket2.getOffset();
    }

    @Test
    public void test722() throws Throwable {
        org.joda.time.MonthDay monthDay0 = org.joda.time.MonthDay.now();
        java.lang.String string1 = monthDay0.toString();
        string1.toString();
        string1.hashCode();
        org.junit.Assert.assertTrue(string1.equals(string1));
    }

    @Test
    public void test723() throws Throwable {
        java.lang.Object object0 = null;
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(object0, chronology1);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime2.minusWeeks(1);
        localDateTime3.toString();
        localDateTime3.hashCode();
        org.junit.Assert.assertTrue(localDateTime3.equals(localDateTime3));
    }

    @Test
    public void test724() throws Throwable {
        org.joda.time.LocalTime.Property roundHalfCeilingCopy0 = null;
        org.joda.time.LocalTime localTime1 = roundHalfCeilingCopy0.roundHalfCeilingCopy();
        localTime1.toString();
        localTime1.hashCode();
        org.junit.Assert.assertTrue(localTime1.equals(localTime1));
    }

    @Test
    public void test725() throws Throwable {
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.GJChronology gJChronology1 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0);
        long long2 = gJChronology1.getDateTimeMillis(1, 1, 1, 1, 1, 1, 1);
    }

    @Test
    public void test726() throws Throwable {
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        java.lang.Object object1 = mutableDateTime0.clone();
        object1.toString();
        object1.hashCode();
        org.junit.Assert.assertTrue(object1.equals(object1));
    }

    @Test
    public void test727() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeUtils.getZone(dateTimeZone1);
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone2);
        iSOChronology3.toString();
        iSOChronology3.hashCode();
        org.junit.Assert.assertTrue(iSOChronology3.equals(iSOChronology3));
    }

    @Test
    public void test728() throws Throwable {
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.standard();
        org.joda.time.Period period1 = new org.joda.time.Period(1, 1, 1, 1, 1, 1, 1, 1, periodType0);
        period1.toString();
        period1.hashCode();
        org.junit.Assert.assertTrue(period1.equals(period1));
    }

    @Test
    public void test729() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.DurationField durationField2 = chronology1.hours();
        durationField2.toString();
        durationField2.hashCode();
        org.junit.Assert.assertTrue(durationField2.equals(durationField2));
    }

    @Test
    public void test730() throws Throwable {
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        nameProvider0.toString();
        nameProvider0.hashCode();
        org.junit.Assert.assertTrue(nameProvider0.equals(nameProvider0));
    }

    @Test
    public void test731() throws Throwable {
        org.joda.time.Hours dividedBy0 = null;
        org.joda.time.Hours hours1 = dividedBy0.dividedBy(1);
        hours1.toString();
        hours1.hashCode();
        org.junit.Assert.assertTrue(hours1.equals(hours1));
    }

    @Test
    public void test732() throws Throwable {
        org.joda.time.LocalTime.Property roundCeilingCopy0 = null;
        org.joda.time.LocalTime localTime1 = roundCeilingCopy0.roundCeilingCopy();
        localTime1.toString();
        localTime1.hashCode();
        org.junit.Assert.assertTrue(localTime1.equals(localTime1));
    }

    @Test
    public void test733() throws Throwable {
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime(1, 1, 1, 1, 1);
        org.joda.time.DateTime dateTime1 = dateTime0.plusMonths(1);
        dateTime1.toString();
        dateTime1.hashCode();
        org.junit.Assert.assertTrue(dateTime1.equals(dateTime1));
    }

    @Test
    public void test734() throws Throwable {
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateTimeComparator dateTimeComparator2 = org.joda.time.DateTimeComparator.getInstance(dateTimeFieldType0, dateTimeFieldType1);
        java.lang.Object object3 = null;
        java.lang.Object object4 = null;
        int int5 = dateTimeComparator2.compare(object3, object4);
    }

    @Test
    public void test735() throws Throwable {
        org.joda.time.field.RemainderDateTimeField get0 = null;
        int int1 = get0.get(1);
    }

    @Test
    public void test736() throws Throwable {
        org.joda.time.field.DelegatedDateTimeField addWrapField0 = null;
        org.joda.time.ReadablePartial readablePartial1 = null;
        int[] intArr2 = null;
        int[] intArr3 = addWrapField0.addWrapField(readablePartial1, 1, intArr2, 1);
        intArr3.toString();
        intArr3.hashCode();
        org.junit.Assert.assertTrue(intArr3.equals(intArr3));
    }

    @Test
    public void test737() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.DateTimeField dateTimeField2 = null;
        org.joda.time.field.SkipUndoDateTimeField skipUndoDateTimeField3 = new org.joda.time.field.SkipUndoDateTimeField(chronology1, dateTimeField2);
        skipUndoDateTimeField3.toString();
        skipUndoDateTimeField3.hashCode();
        org.junit.Assert.assertTrue(skipUndoDateTimeField3.equals(skipUndoDateTimeField3));
    }

    @Test
    public void test738() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(1, 1, 1, 1, 1, dateTimeZone1);
        java.util.TimeZone timeZone3 = null;
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        org.joda.time.DateTime dateTime5 = dateTime2.withZoneRetainFields(dateTimeZone4);
        dateTime5.toString();
        dateTime5.hashCode();
        org.junit.Assert.assertTrue(dateTime5.equals(dateTime5));
    }

    @Test
    public void test739() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeUtils.getZone(dateTimeZone1);
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone2);
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        org.joda.time.Chronology chronology6 = iSOChronology3.withZone(dateTimeZone5);
        chronology6.toString();
        chronology6.hashCode();
        org.junit.Assert.assertTrue(chronology6.equals(chronology6));
    }

    @Test
    public void test740() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeUtils.getZone(dateTimeZone1);
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone2);
        java.lang.Object object4 = null;
        boolean boolean5 = iSOChronology3.equals(object4);
    }

    @Test
    public void test741() throws Throwable {
        int int0 = org.joda.time.field.FieldUtils.safeNegate(1);
    }

    @Test
    public void test742() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(1, 1, 1, 1, chronology1);
        localTime2.toString();
        localTime2.hashCode();
        org.junit.Assert.assertTrue(localTime2.equals(localTime2));
    }

    @Test
    public void test743() throws Throwable {
        org.joda.time.DurationField getMillis0 = null;
        long long1 = getMillis0.getMillis(1, 1);
    }

    @Test
    public void test744() throws Throwable {
        org.joda.time.MutablePeriod mutablePeriod0 = new org.joda.time.MutablePeriod(1, 1, 1, 1);
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getChronology(chronology2);
        mutablePeriod0.setPeriod(readableDuration1, chronology3);
    }

    @Test
    public void test745() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.dayOfWeek();
        dateTimeField2.toString();
        dateTimeField2.hashCode();
        org.junit.Assert.assertTrue(dateTimeField2.equals(dateTimeField2));
    }

    @Test
    public void test746() throws Throwable {
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.weeks();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getChronology(chronology1);
        org.joda.time.Period period3 = new org.joda.time.Period(1, 1, periodType0, chronology2);
        period3.toString();
        period3.hashCode();
        org.junit.Assert.assertTrue(period3.equals(period3));
    }

    @Test
    public void test747() throws Throwable {
        org.joda.time.PeriodType periodType0 = null;
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Period period2 = new org.joda.time.Period(1, periodType0, chronology1);
        org.joda.time.Seconds seconds3 = period2.toStandardSeconds();
        seconds3.toString();
        seconds3.hashCode();
        org.junit.Assert.assertTrue(seconds3.equals(seconds3));
    }

    @Test
    public void test748() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(1, chronology1);
        org.joda.time.DateTime dateTime3 = dateTime2.withEra(1);
        dateTime3.toString();
        dateTime3.hashCode();
        org.junit.Assert.assertTrue(dateTime3.equals(dateTime3));
    }

    @Test
    public void test749() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Days days2 = org.joda.time.Days.daysBetween(readableInstant0, readableInstant1);
        days2.toString();
        days2.hashCode();
        org.junit.Assert.assertTrue(days2.equals(days2));
    }

    @Test
    public void test750() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay(1, 1, 1, chronology1);
        org.joda.time.TimeOfDay timeOfDay3 = timeOfDay2.minusHours(1);
        timeOfDay3.toString();
        timeOfDay3.hashCode();
        org.junit.Assert.assertTrue(timeOfDay3.equals(timeOfDay3));
    }

    @Test
    public void test751() throws Throwable {
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime(1);
        mutableDateTime0.setDate(1, 1, 1);
    }

    @Test
    public void test752() throws Throwable {
        org.joda.time.DurationField isSupported0 = null;
        boolean boolean1 = isSupported0.isSupported();
    }

    @Test
    public void test753() throws Throwable {
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.hourOfDay();
        dateTimeFieldType0.toString();
        dateTimeFieldType0.hashCode();
        org.junit.Assert.assertTrue(dateTimeFieldType0.equals(dateTimeFieldType0));
    }

    @Test
    public void test754() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.MutableDateTime mutableDateTime2 = org.joda.time.MutableDateTime.now(chronology1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.secondOfDay();
        property3.toString();
        property3.hashCode();
        org.junit.Assert.assertTrue(property3.equals(property3));
    }

    @Test
    public void test755() throws Throwable {
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendCenturyOfEra(1, 1);
        dateTimeFormatterBuilder1.toString();
        dateTimeFormatterBuilder1.hashCode();
        org.junit.Assert.assertTrue(dateTimeFormatterBuilder1.equals(dateTimeFormatterBuilder1));
    }

    @Test
    public void test756() throws Throwable {
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime(1, 1, 1, 1, 1, 1, 1);
        mutableDateTime0.addMonths(1);
    }

    @Test
    public void test757() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.ReadablePartial readablePartial2 = null;
        int[] intArr3 = null;
        chronology1.validate(readablePartial2, intArr3);
    }

    @Test
    public void test758() throws Throwable {
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendFractionOfSecond(1, 1);
        dateTimeFormatterBuilder1.toString();
        dateTimeFormatterBuilder1.hashCode();
        org.junit.Assert.assertTrue(dateTimeFormatterBuilder1.equals(dateTimeFormatterBuilder1));
    }

    @Test
    public void test759() throws Throwable {
        java.lang.Object object0 = null;
        org.joda.time.PeriodType periodType1 = null;
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(object0, periodType1);
        mutablePeriod2.setWeeks(1);
    }

    @Test
    public void test760() throws Throwable {
        org.joda.time.DateMidnight.Property addWrapFieldToCopy0 = null;
        org.joda.time.DateMidnight dateMidnight1 = addWrapFieldToCopy0.addWrapFieldToCopy(1);
        dateMidnight1.toString();
        dateMidnight1.hashCode();
        org.junit.Assert.assertTrue(dateMidnight1.equals(dateMidnight1));
    }

    @Test
    public void test761() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1, 1, 1, chronology1);
        dateMidnight2.toString();
        dateMidnight2.hashCode();
        org.junit.Assert.assertTrue(dateMidnight2.equals(dateMidnight2));
    }

    @Test
    public void test762() throws Throwable {
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1, 1);
    }

    @Test
    public void test763() throws Throwable {
        org.joda.time.MonthDay monthDay0 = new org.joda.time.MonthDay(1, 1);
        monthDay0.toString();
        monthDay0.hashCode();
        org.junit.Assert.assertTrue(monthDay0.equals(monthDay0));
    }

    @Test
    public void test764() throws Throwable {
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime(1, 1, 1, 1, 1);
        org.joda.time.DateTime dateTime1 = dateTime0.withMinuteOfHour(1);
        dateTime1.toString();
        dateTime1.hashCode();
        org.junit.Assert.assertTrue(dateTime1.equals(dateTime1));
    }

    @Test
    public void test765() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(1, chronology1);
        localDateTime2.toString();
        localDateTime2.hashCode();
        org.junit.Assert.assertTrue(localDateTime2.equals(localDateTime2));
    }

    @Test
    public void test766() throws Throwable {
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(readableDuration0, readableInstant1);
        mutablePeriod2.setPeriod(1, 1, 1, 1, 1, 1, 1, 1);
    }

    @Test
    public void test767() throws Throwable {
        java.lang.String string0 = null;
        org.joda.time.format.PeriodFormatter periodFormatter1 = org.joda.time.format.PeriodFormat.wordBased();
        org.joda.time.MutablePeriod mutablePeriod2 = org.joda.time.MutablePeriod.parse(string0, periodFormatter1);
        mutablePeriod2.toString();
        mutablePeriod2.hashCode();
        org.junit.Assert.assertTrue(mutablePeriod2.equals(mutablePeriod2));
    }

    @Test
    public void test768() throws Throwable {
        java.lang.Object object0 = null;
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(object0, dateTimeZone2);
        localDate3.toString();
        localDate3.hashCode();
        org.junit.Assert.assertTrue(localDate3.equals(localDate3));
    }

    @Test
    public void test769() throws Throwable {
        java.util.Locale locale0 = null;
        org.joda.time.format.PeriodFormatter periodFormatter1 = org.joda.time.format.PeriodFormat.wordBased(locale0);
        periodFormatter1.toString();
        periodFormatter1.hashCode();
        org.junit.Assert.assertTrue(periodFormatter1.equals(periodFormatter1));
    }

    @Test
    public void test770() throws Throwable {
        java.lang.Object object0 = null;
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(object0, dateTimeZone2);
        int int4 = localDate3.getDayOfYear();
    }

    @Test
    public void test771() throws Throwable {
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.minutes();
        org.joda.time.PeriodType periodType1 = periodType0.withMinutesRemoved();
        periodType1.toString();
        periodType1.hashCode();
        org.junit.Assert.assertTrue(periodType1.equals(periodType1));
    }

    @Test
    public void test772() throws Throwable {
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.secondOfDay();
        property1.toString();
        property1.hashCode();
        org.junit.Assert.assertTrue(property1.equals(property1));
    }

    @Test
    public void test773() throws Throwable {
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.Period period3 = new org.joda.time.Period(readableDuration0, readableInstant1, periodType2);
        period3.toString();
        period3.hashCode();
        org.junit.Assert.assertTrue(period3.equals(period3));
    }

    @Test
    public void test774() throws Throwable {
        java.lang.Object object0 = null;
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getChronology(chronology1);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(object0, chronology2);
        dateTime3.toString();
        dateTime3.hashCode();
        org.junit.Assert.assertTrue(dateTime3.equals(dateTime3));
    }

    @Test
    public void test775() throws Throwable {
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.DateTime dateTime2 = yearMonthDay1.toDateTimeAtCurrentTime();
        dateTime2.toString();
        dateTime2.hashCode();
        org.junit.Assert.assertTrue(dateTime2.equals(dateTime2));
    }

    @Test
    public void test776() throws Throwable {
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.setMinuteOfDay(1);
    }

    @Test
    public void test777() throws Throwable {
        org.joda.time.Hours toStandardSeconds0 = null;
        org.joda.time.Seconds seconds1 = toStandardSeconds0.toStandardSeconds();
        seconds1.toString();
        seconds1.hashCode();
        org.junit.Assert.assertTrue(seconds1.equals(seconds1));
    }

    @Test
    public void test778() throws Throwable {
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate(1);
        java.lang.String string1 = localDate0.toString();
        string1.toString();
        string1.hashCode();
        org.junit.Assert.assertTrue(string1.equals(string1));
    }

    @Test
    public void test779() throws Throwable {
        java.io.InputStream inputStream0 = null;
        java.lang.String string1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.tz.DateTimeZoneBuilder.readFrom(inputStream0, string1);
        dateTimeZone2.toString();
        dateTimeZone2.hashCode();
        org.junit.Assert.assertTrue(dateTimeZone2.equals(dateTimeZone2));
    }

    @Test
    public void test780() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.CopticChronology copticChronology2 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone1);
        copticChronology2.toString();
        copticChronology2.hashCode();
        org.junit.Assert.assertTrue(copticChronology2.equals(copticChronology2));
    }

    @Test
    public void test781() throws Throwable {
        org.joda.time.field.OffsetDateTimeField get0 = null;
        int int1 = get0.get(1);
    }

    @Test
    public void test782() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.LocalDate localDate2 = org.joda.time.LocalDate.now(chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.LocalDate localDate4 = localDate2.withField(dateTimeFieldType3, 1);
        localDate4.toString();
        localDate4.hashCode();
        org.junit.Assert.assertTrue(localDate4.equals(localDate4));
    }

    @Test
    public void test783() throws Throwable {
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay(1, 1, 1);
        yearMonthDay0.toString();
        yearMonthDay0.hashCode();
        org.junit.Assert.assertTrue(yearMonthDay0.equals(yearMonthDay0));
    }

    @Test
    public void test784() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        java.lang.String string2 = chronology1.toString();
        string2.toString();
        string2.hashCode();
        org.junit.Assert.assertTrue(string2.equals(string2));
    }

    @Test
    public void test785() throws Throwable {
        org.joda.time.MutablePeriod mutablePeriod0 = new org.joda.time.MutablePeriod(1, 1, 1, 1);
        int int1 = mutablePeriod0.getMinutes();
    }

    @Test
    public void test786() throws Throwable {
        org.joda.time.LocalDateTime.Property roundHalfCeilingCopy0 = null;
        org.joda.time.LocalDateTime localDateTime1 = roundHalfCeilingCopy0.roundHalfCeilingCopy();
        localDateTime1.toString();
        localDateTime1.hashCode();
        org.junit.Assert.assertTrue(localDateTime1.equals(localDateTime1));
    }

    @Test
    public void test787() throws Throwable {
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendYearOfCentury(1, 1);
        dateTimeFormatterBuilder1.toString();
        dateTimeFormatterBuilder1.hashCode();
        org.junit.Assert.assertTrue(dateTimeFormatterBuilder1.equals(dateTimeFormatterBuilder1));
    }

    @Test
    public void test788() throws Throwable {
        org.joda.time.field.UnsupportedDateTimeField getRangeDurationField0 = null;
        org.joda.time.DurationField durationField1 = getRangeDurationField0.getRangeDurationField();
        durationField1.toString();
        durationField1.hashCode();
        org.junit.Assert.assertTrue(durationField1.equals(durationField1));
    }

    @Test
    public void test789() throws Throwable {
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay(1, 1, 1);
        org.joda.time.DateMidnight dateMidnight1 = yearMonthDay0.toDateMidnight();
        dateMidnight1.toString();
        dateMidnight1.hashCode();
        org.junit.Assert.assertTrue(dateMidnight1.equals(dateMidnight1));
    }

    @Test
    public void test790() throws Throwable {
        org.joda.time.Seconds toStandardHours0 = null;
        org.joda.time.Hours hours1 = toStandardHours0.toStandardHours();
        hours1.toString();
        hours1.hashCode();
        org.junit.Assert.assertTrue(hours1.equals(hours1));
    }

    @Test
    public void test791() throws Throwable {
        org.joda.time.DateTime.Property getDateTime0 = null;
        org.joda.time.DateTime dateTime1 = getDateTime0.getDateTime();
        dateTime1.toString();
        dateTime1.hashCode();
        org.junit.Assert.assertTrue(dateTime1.equals(dateTime1));
    }

    @Test
    public void test792() throws Throwable {
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.yearDay();
        org.joda.time.PeriodType periodType1 = periodType0.withMinutesRemoved();
        periodType1.toString();
        periodType1.hashCode();
        org.junit.Assert.assertTrue(periodType1.equals(periodType1));
    }

    @Test
    public void test793() throws Throwable {
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(readableDuration0, readableInstant1);
        int int3 = mutablePeriod2.getWeeks();
    }

    @Test
    public void test794() throws Throwable {
        java.lang.Object object0 = null;
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getChronology(chronology1);
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth(object0, chronology2);
        org.joda.time.LocalDate localDate4 = yearMonth3.toLocalDate(1);
        localDate4.toString();
        localDate4.hashCode();
        org.junit.Assert.assertTrue(localDate4.equals(localDate4));
    }

    @Test
    public void test795() throws Throwable {
        org.joda.time.LocalDate.Property getField0 = null;
        org.joda.time.DateTimeField dateTimeField1 = getField0.getField();
        dateTimeField1.toString();
        dateTimeField1.hashCode();
        org.junit.Assert.assertTrue(dateTimeField1.equals(dateTimeField1));
    }

    @Test
    public void test796() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeUtils.getZone(dateTimeZone1);
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime(dateTimeZone2);
        mutableDateTime3.toString();
        mutableDateTime3.hashCode();
        org.junit.Assert.assertTrue(mutableDateTime3.equals(mutableDateTime3));
    }

    @Test
    public void test797() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.LocalDate localDate2 = org.joda.time.LocalDate.now(chronology1);
        org.joda.time.LocalDate.Property property3 = localDate2.weekOfWeekyear();
        property3.toString();
        property3.hashCode();
        org.junit.Assert.assertTrue(property3.equals(property3));
    }

    @Test
    public void test798() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = partial1.getChronology();
        chronology2.toString();
        chronology2.hashCode();
        org.junit.Assert.assertTrue(chronology2.equals(chronology2));
    }

    @Test
    public void test799() throws Throwable {
        java.util.Calendar calendar0 = null;
        org.joda.time.LocalDate localDate1 = org.joda.time.LocalDate.fromCalendarFields(calendar0);
        localDate1.toString();
        localDate1.hashCode();
        org.junit.Assert.assertTrue(localDate1.equals(localDate1));
    }

    @Test
    public void test800() throws Throwable {
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Days days2 = org.joda.time.Days.daysIn(readableInterval1);
        org.joda.time.Minutes minutes3 = days2.toStandardMinutes();
        minutes3.toString();
        minutes3.hashCode();
        org.junit.Assert.assertTrue(minutes3.equals(minutes3));
    }

    @Test
    public void test801() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeUtils.getZone(dateTimeZone1);
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone2);
        gJChronology3.toString();
        gJChronology3.hashCode();
        org.junit.Assert.assertTrue(gJChronology3.equals(gJChronology3));
    }

    @Test
    public void test802() throws Throwable {
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendDayOfYear(1);
        dateTimeFormatterBuilder1.toString();
        dateTimeFormatterBuilder1.hashCode();
        org.junit.Assert.assertTrue(dateTimeFormatterBuilder1.equals(dateTimeFormatterBuilder1));
    }

    @Test
    public void test803() throws Throwable {
        org.joda.time.LocalDateTime.Property getLocalDateTime0 = null;
        org.joda.time.LocalDateTime localDateTime1 = getLocalDateTime0.getLocalDateTime();
        localDateTime1.toString();
        localDateTime1.hashCode();
        org.junit.Assert.assertTrue(localDateTime1.equals(localDateTime1));
    }

    @Test
    public void test804() throws Throwable {
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.dateTimeNoMillis();
        dateTimeFormatter0.toString();
        dateTimeFormatter0.hashCode();
        org.junit.Assert.assertTrue(dateTimeFormatter0.equals(dateTimeFormatter0));
    }

    @Test
    public void test805() throws Throwable {
        java.lang.Object object0 = null;
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay(object0);
        timeOfDay1.toString();
        timeOfDay1.hashCode();
        org.junit.Assert.assertTrue(timeOfDay1.equals(timeOfDay1));
    }

    @Test
    public void test806() throws Throwable {
        org.joda.time.DateTimeField dateTimeField0 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField2 = new org.joda.time.field.DividedDateTimeField(dateTimeField0, dateTimeFieldType1, 1);
        dividedDateTimeField2.toString();
        dividedDateTimeField2.hashCode();
        org.junit.Assert.assertTrue(dividedDateTimeField2.equals(dividedDateTimeField2));
    }

    @Test
    public void test807() throws Throwable {
        org.joda.time.YearMonthDay.Property get0 = null;
        int int1 = get0.get();
    }

    @Test
    public void test808() throws Throwable {
        org.joda.time.field.UnsupportedDateTimeField getLeapDurationField0 = null;
        org.joda.time.DurationField durationField1 = getLeapDurationField0.getLeapDurationField();
        durationField1.toString();
        durationField1.hashCode();
        org.junit.Assert.assertTrue(durationField1.equals(durationField1));
    }

    @Test
    public void test809() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.LocalDate localDate2 = org.joda.time.LocalDate.now(chronology1);
        org.joda.time.LocalDate.Property property3 = localDate2.centuryOfEra();
        property3.toString();
        property3.hashCode();
        org.junit.Assert.assertTrue(property3.equals(property3));
    }

    @Test
    public void test810() throws Throwable {
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.hourMinute();
        int int1 = dateTimeFormatter0.getDefaultYear();
    }

    @Test
    public void test811() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.now(chronology1);
        org.joda.time.DurationFieldType durationFieldType3 = org.joda.time.DurationFieldType.seconds();
        boolean boolean4 = localTime2.isSupported(durationFieldType3);
    }

    @Test
    public void test812() throws Throwable {
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateTimeComparator dateTimeComparator2 = org.joda.time.DateTimeComparator.getInstance(dateTimeFieldType0, dateTimeFieldType1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = dateTimeComparator2.getLowerLimit();
        dateTimeFieldType3.toString();
        dateTimeFieldType3.hashCode();
        org.junit.Assert.assertTrue(dateTimeFieldType3.equals(dateTimeFieldType3));
    }

    @Test
    public void test813() throws Throwable {
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.localDateOptionalTimeParser();
        java.io.Writer writer1 = null;
        org.joda.time.ReadablePartial readablePartial2 = null;
        dateTimeFormatter0.printTo(writer1, readablePartial2);
    }

    @Test
    public void test814() throws Throwable {
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime(1, 1, 1, 1, 1, 1, 1);
        org.joda.time.LocalDateTime localDateTime1 = localDateTime0.minusMillis(1);
        localDateTime1.toString();
        localDateTime1.hashCode();
        org.junit.Assert.assertTrue(localDateTime1.equals(localDateTime1));
    }

    @Test
    public void test815() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(1, chronology0);
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight1.minus(1);
        dateMidnight2.toString();
        dateMidnight2.hashCode();
        org.junit.Assert.assertTrue(dateMidnight2.equals(dateMidnight2));
    }

    @Test
    public void test816() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.YearMonth yearMonth2 = org.joda.time.YearMonth.now(chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = yearMonth2.getFieldType(1);
        dateTimeFieldType3.toString();
        dateTimeFieldType3.hashCode();
        org.junit.Assert.assertTrue(dateTimeFieldType3.equals(dateTimeFieldType3));
    }

    @Test
    public void test817() throws Throwable {
        org.joda.time.field.DelegatedDateTimeField roundCeiling0 = null;
        long long1 = roundCeiling0.roundCeiling(1);
    }

    @Test
    public void test818() throws Throwable {
        org.joda.time.field.UnsupportedDateTimeField isLeap0 = null;
        boolean boolean1 = isLeap0.isLeap(1);
    }

    @Test
    public void test819() throws Throwable {
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        periodFormatter2.toString();
        periodFormatter2.hashCode();
        org.junit.Assert.assertTrue(periodFormatter2.equals(periodFormatter2));
    }

    @Test
    public void test820() throws Throwable {
        org.joda.time.field.UnsupportedDateTimeField getMinimumValue0 = null;
        int int1 = getMinimumValue0.getMinimumValue(1);
    }

    @Test
    public void test821() throws Throwable {
        org.joda.time.DateMidnight.Property withMinimumValue0 = null;
        org.joda.time.DateMidnight dateMidnight1 = withMinimumValue0.withMinimumValue();
        dateMidnight1.toString();
        dateMidnight1.hashCode();
        org.junit.Assert.assertTrue(dateMidnight1.equals(dateMidnight1));
    }

    @Test
    public void test822() throws Throwable {
        org.joda.time.Hours getFieldType0 = null;
        org.joda.time.DurationFieldType durationFieldType1 = getFieldType0.getFieldType();
        durationFieldType1.toString();
        durationFieldType1.hashCode();
        org.junit.Assert.assertTrue(durationFieldType1.equals(durationFieldType1));
    }

    @Test
    public void test823() throws Throwable {
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.DurationFieldType durationFieldType1 = org.joda.time.DurationFieldType.years();
        boolean boolean2 = periodType0.isSupported(durationFieldType1);
    }

    @Test
    public void test824() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeUtils.getZone(dateTimeZone1);
        java.lang.String string3 = dateTimeZone2.getShortName(1);
        string3.toString();
        string3.hashCode();
        org.junit.Assert.assertTrue(string3.equals(string3));
    }

    @Test
    public void test825() throws Throwable {
        org.joda.time.field.DividedDateTimeField set0 = null;
        long long1 = set0.set(1, 1);
    }

    @Test
    public void test826() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay(1, 1, 1, 1, chronology1);
        org.joda.time.TimeOfDay.Property property3 = timeOfDay2.millisOfSecond();
        property3.toString();
        property3.hashCode();
        org.junit.Assert.assertTrue(property3.equals(property3));
    }

    @Test
    public void test827() throws Throwable {
        java.io.DataInput dataInput0 = null;
        java.lang.String string1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.tz.DateTimeZoneBuilder.readFrom(dataInput0, string1);
        dateTimeZone2.toString();
        dateTimeZone2.hashCode();
        org.junit.Assert.assertTrue(dateTimeZone2.equals(dateTimeZone2));
    }

    @Test
    public void test828() throws Throwable {
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay(1);
        java.lang.String string1 = timeOfDay0.toString();
        string1.toString();
        string1.hashCode();
        org.junit.Assert.assertTrue(string1.equals(string1));
    }

    @Test
    public void test829() throws Throwable {
        org.joda.time.field.UnsupportedDateTimeField getName0 = null;
        java.lang.String string1 = getName0.getName();
        string1.toString();
        string1.hashCode();
        org.junit.Assert.assertTrue(string1.equals(string1));
    }

    @Test
    public void test830() throws Throwable {
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.weekDateTime();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear(1);
        dateTimeFormatter1.toString();
        dateTimeFormatter1.hashCode();
        org.junit.Assert.assertTrue(dateTimeFormatter1.equals(dateTimeFormatter1));
    }

    @Test
    public void test831() throws Throwable {
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay(1);
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.TimeOfDay timeOfDay2 = timeOfDay0.plus(readablePeriod1);
        timeOfDay2.toString();
        timeOfDay2.hashCode();
        org.junit.Assert.assertTrue(timeOfDay2.equals(timeOfDay2));
    }

    @Test
    public void test832() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        java.util.Locale locale1 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket2 = new org.joda.time.format.DateTimeParserBucket(1, chronology0, locale1);
        java.lang.CharSequence charSequence3 = null;
        long long4 = dateTimeParserBucket2.computeMillis(true, charSequence3);
    }

    @Test
    public void test833() throws Throwable {
        org.joda.time.Hours minus0 = null;
        org.joda.time.Hours hours1 = null;
        org.joda.time.Hours hours2 = minus0.minus(hours1);
        hours2.toString();
        hours2.hashCode();
        org.junit.Assert.assertTrue(hours2.equals(hours2));
    }

    @Test
    public void test834() throws Throwable {
        org.joda.time.DateTime.Property setCopy0 = null;
        java.lang.String string1 = null;
        org.joda.time.DateTime dateTime2 = setCopy0.setCopy(string1);
        dateTime2.toString();
        dateTime2.hashCode();
        org.junit.Assert.assertTrue(dateTime2.equals(dateTime2));
    }

    @Test
    public void test835() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.chrono.StrictChronology strictChronology2 = org.joda.time.chrono.StrictChronology.getInstance(chronology1);
        strictChronology2.toString();
        strictChronology2.hashCode();
        org.junit.Assert.assertTrue(strictChronology2.equals(strictChronology2));
    }

    @Test
    public void test836() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now(chronology1);
        localDateTime2.toString();
        localDateTime2.hashCode();
        org.junit.Assert.assertTrue(localDateTime2.equals(localDateTime2));
    }

    @Test
    public void test837() throws Throwable {
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.minutes();
        org.joda.time.DurationFieldType durationFieldType1 = org.joda.time.DurationFieldType.centuries();
        int int2 = periodType0.indexOf(durationFieldType1);
    }

    @Test
    public void test838() throws Throwable {
        org.joda.time.TimeOfDay.Property getField0 = null;
        org.joda.time.DateTimeField dateTimeField1 = getField0.getField();
        dateTimeField1.toString();
        dateTimeField1.hashCode();
        org.junit.Assert.assertTrue(dateTimeField1.equals(dateTimeField1));
    }

    @Test
    public void test839() throws Throwable {
        org.joda.time.DurationField getDifference0 = null;
        int int1 = getDifference0.getDifference(1, 1);
    }

    @Test
    public void test840() throws Throwable {
        java.lang.String string0 = null;
        org.joda.time.MutableInterval mutableInterval1 = org.joda.time.MutableInterval.parse(string0);
        mutableInterval1.toString();
        mutableInterval1.hashCode();
        org.junit.Assert.assertTrue(mutableInterval1.equals(mutableInterval1));
    }

    @Test
    public void test841() throws Throwable {
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime(1, 1, 1, 1, 1, 1, 1);
        org.joda.time.LocalDateTime localDateTime1 = localDateTime0.withYearOfCentury(1);
        localDateTime1.toString();
        localDateTime1.hashCode();
        org.junit.Assert.assertTrue(localDateTime1.equals(localDateTime1));
    }

    @Test
    public void test842() throws Throwable {
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.lang.String string1 = null;
        org.joda.time.IllegalFieldValueException illegalFieldValueException2 = new org.joda.time.IllegalFieldValueException(dateTimeFieldType0, string1);
        illegalFieldValueException2.toString();
        illegalFieldValueException2.hashCode();
        org.junit.Assert.assertTrue(illegalFieldValueException2.equals(illegalFieldValueException2));
    }

    @Test
    public void test843() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.YearMonth yearMonth2 = new org.joda.time.YearMonth(1, 1, chronology1);
        yearMonth2.toString();
        yearMonth2.hashCode();
        org.junit.Assert.assertTrue(yearMonth2.equals(yearMonth2));
    }

    @Test
    public void test844() throws Throwable {
        java.util.Date date0 = null;
        org.joda.time.LocalDate localDate1 = org.joda.time.LocalDate.fromDateFields(date0);
        localDate1.toString();
        localDate1.hashCode();
        org.junit.Assert.assertTrue(localDate1.equals(localDate1));
    }

    @Test
    public void test845() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        java.lang.String string2 = null;
        java.lang.String string3 = partial1.toString(string2);
        string3.toString();
        string3.hashCode();
        org.junit.Assert.assertTrue(string3.equals(string3));
    }

    @Test
    public void test846() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(chronology1);
        org.joda.time.LocalDate localDate3 = dateTime2.toLocalDate();
        localDate3.toString();
        localDate3.hashCode();
        org.junit.Assert.assertTrue(localDate3.equals(localDate3));
    }

    @Test
    public void test847() throws Throwable {
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        int int2 = yearMonthDay1.getYear();
    }

    @Test
    public void test848() throws Throwable {
        java.lang.Object object0 = null;
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(object0, dateTimeZone2);
        org.joda.time.LocalDate localDate4 = localDate3.withEra(1);
        localDate4.toString();
        localDate4.hashCode();
        org.junit.Assert.assertTrue(localDate4.equals(localDate4));
    }

    @Test
    public void test849() throws Throwable {
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendDayOfMonth(1);
        dateTimeFormatterBuilder1.toString();
        dateTimeFormatterBuilder1.hashCode();
        org.junit.Assert.assertTrue(dateTimeFormatterBuilder1.equals(dateTimeFormatterBuilder1));
    }

    @Test
    public void test850() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeUtils.getZone(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone2);
        java.lang.String string4 = localDateTime3.toString();
        string4.toString();
        string4.hashCode();
        org.junit.Assert.assertTrue(string4.equals(string4));
    }

    @Test
    public void test851() throws Throwable {
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTimeAtCurrentTime(dateTimeZone3);
        dateTime4.toString();
        dateTime4.hashCode();
        org.junit.Assert.assertTrue(dateTime4.equals(dateTime4));
    }

    @Test
    public void test852() throws Throwable {
        java.lang.Object object0 = null;
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getChronology(chronology1);
        org.joda.time.MonthDay monthDay3 = new org.joda.time.MonthDay(object0, chronology2);
        monthDay3.toString();
        monthDay3.hashCode();
        org.junit.Assert.assertTrue(monthDay3.equals(monthDay3));
    }

    @Test
    public void test853() throws Throwable {
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.years();
        org.joda.time.field.UnsupportedDurationField unsupportedDurationField1 = org.joda.time.field.UnsupportedDurationField.getInstance(durationFieldType0);
        boolean boolean2 = unsupportedDurationField1.isPrecise();
    }

    @Test
    public void test854() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeUtils.getZone(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime3.minusMonths(1);
        localDateTime4.toString();
        localDateTime4.hashCode();
        org.junit.Assert.assertTrue(localDateTime4.equals(localDateTime4));
    }

    @Test
    public void test855() throws Throwable {
        java.lang.Object object0 = null;
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(object0, chronology1);
        java.util.Date date3 = localDateTime2.toDate();
        date3.toString();
        date3.hashCode();
        org.junit.Assert.assertTrue(date3.equals(date3));
    }

    @Test
    public void test856() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeUtils.getZone(dateTimeZone1);
        long long3 = dateTimeZone2.adjustOffset(1, true);
    }

    @Test
    public void test857() throws Throwable {
        int int0 = org.joda.time.field.FieldUtils.safeAdd(1, 1);
    }

    @Test
    public void test858() throws Throwable {
        java.lang.Object object0 = null;
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay(object0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.TimeOfDay timeOfDay3 = timeOfDay1.minus(readablePeriod2);
        timeOfDay3.toString();
        timeOfDay3.hashCode();
        org.junit.Assert.assertTrue(timeOfDay3.equals(timeOfDay3));
    }

    @Test
    public void test859() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now(chronology1);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime2.minusMinutes(1);
        localDateTime3.toString();
        localDateTime3.hashCode();
        org.junit.Assert.assertTrue(localDateTime3.equals(localDateTime3));
    }

    @Test
    public void test860() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.Interval interval2 = new org.joda.time.Interval(1, 1, chronology1);
        interval2.toString();
        interval2.hashCode();
        org.junit.Assert.assertTrue(interval2.equals(interval2));
    }

    @Test
    public void test861() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.yearDay();
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod(readableInstant0, readableInstant1, periodType2);
        mutablePeriod3.toString();
        mutablePeriod3.hashCode();
        org.junit.Assert.assertTrue(mutablePeriod3.equals(mutablePeriod3));
    }

    @Test
    public void test862() throws Throwable {
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getChronology(chronology1);
        boolean boolean3 = durationFieldType0.isSupported(chronology2);
    }

    @Test
    public void test863() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeUtils.getZone(dateTimeZone1);
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime(1, dateTimeZone2);
        org.joda.time.LocalTime localTime4 = localTime3.minusMillis(1);
        localTime4.toString();
        localTime4.hashCode();
        org.junit.Assert.assertTrue(localTime4.equals(localTime4));
    }

    @Test
    public void test864() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(1, 1, 1, 1, 1, dateTimeZone1);
        org.joda.time.DateTime dateTime3 = dateTime2.plusDays(1);
        dateTime3.toString();
        dateTime3.hashCode();
        org.junit.Assert.assertTrue(dateTime3.equals(dateTime3));
    }

    @Test
    public void test865() throws Throwable {
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Hours hours3 = org.joda.time.Hours.hoursIn(readableInterval2);
        hours3.toString();
        hours3.hashCode();
        org.junit.Assert.assertTrue(hours3.equals(hours3));
    }

    @Test
    public void test866() throws Throwable {
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        dateTimeFieldType0.toString();
        dateTimeFieldType0.hashCode();
        org.junit.Assert.assertTrue(dateTimeFieldType0.equals(dateTimeFieldType0));
    }

    @Test
    public void test867() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime(1, chronology1);
        mutableDateTime2.toString();
        mutableDateTime2.hashCode();
        org.junit.Assert.assertTrue(mutableDateTime2.equals(mutableDateTime2));
    }

    @Test
    public void test868() throws Throwable {
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay(1, 1, 1);
        org.joda.time.YearMonthDay yearMonthDay1 = yearMonthDay0.minusYears(1);
        yearMonthDay1.toString();
        yearMonthDay1.hashCode();
        org.junit.Assert.assertTrue(yearMonthDay1.equals(yearMonthDay1));
    }

    @Test
    public void test869() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod(1, chronology0);
        int int2 = mutablePeriod1.getMinutes();
    }

    @Test
    public void test870() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(readableInstant0, readableInstant1);
        mutablePeriod2.setPeriod(1, 1);
    }

    @Test
    public void test871() throws Throwable {
        org.joda.time.DurationField getUnitMillis0 = null;
        long long1 = getUnitMillis0.getUnitMillis();
    }

    @Test
    public void test872() throws Throwable {
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate(1);
        org.joda.time.Chronology chronology1 = localDate0.getChronology();
        chronology1.toString();
        chronology1.hashCode();
        org.junit.Assert.assertTrue(chronology1.equals(chronology1));
    }

    @Test
    public void test873() throws Throwable {
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Weeks weeks2 = org.joda.time.Weeks.weeksIn(readableInterval1);
        java.lang.String string3 = weeks2.toString();
        string3.toString();
        string3.hashCode();
        org.junit.Assert.assertTrue(string3.equals(string3));
    }

    @Test
    public void test874() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.MonthDay monthDay2 = org.joda.time.MonthDay.now(chronology1);
        monthDay2.toString();
        monthDay2.hashCode();
        org.junit.Assert.assertTrue(monthDay2.equals(monthDay2));
    }

    @Test
    public void test875() throws Throwable {
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.time();
        java.lang.Object object1 = null;
        boolean boolean2 = periodType0.equals(object1);
    }

    @Test
    public void test876() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.MutableDateTime mutableDateTime2 = org.joda.time.MutableDateTime.now(dateTimeZone1);
        mutableDateTime2.toString();
        mutableDateTime2.hashCode();
        org.junit.Assert.assertTrue(mutableDateTime2.equals(mutableDateTime2));
    }

    @Test
    public void test877() throws Throwable {
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.timeParser();
        dateTimeFormatter0.toString();
        dateTimeFormatter0.hashCode();
        org.junit.Assert.assertTrue(dateTimeFormatter0.equals(dateTimeFormatter0));
    }

    @Test
    public void test878() throws Throwable {
        java.lang.Object object0 = null;
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getChronology(chronology1);
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth(object0, chronology2);
        org.joda.time.YearMonth yearMonth4 = yearMonth3.minusYears(1);
        yearMonth4.toString();
        yearMonth4.hashCode();
        org.junit.Assert.assertTrue(yearMonth4.equals(yearMonth4));
    }

    @Test
    public void test879() throws Throwable {
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(readableDuration0, readableInstant1);
        mutablePeriod2.addWeeks(1);
    }

    @Test
    public void test880() throws Throwable {
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.standard();
        java.lang.Object object1 = null;
        boolean boolean2 = periodType0.equals(object1);
    }

    @Test
    public void test881() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay(1, 1, 1, chronology1);
        org.joda.time.TimeOfDay timeOfDay3 = timeOfDay2.plusSeconds(1);
        timeOfDay3.toString();
        timeOfDay3.hashCode();
        org.junit.Assert.assertTrue(timeOfDay3.equals(timeOfDay3));
    }

    @Test
    public void test882() throws Throwable {
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Hours hours3 = org.joda.time.Hours.hoursIn(readableInterval2);
        org.joda.time.Hours hours4 = hours3.negated();
        hours4.toString();
        hours4.hashCode();
        org.junit.Assert.assertTrue(hours4.equals(hours4));
    }

    @Test
    public void test883() throws Throwable {
        org.joda.time.field.DecoratedDurationField add0 = null;
        long long1 = add0.add(1, 1);
    }

    @Test
    public void test884() throws Throwable {
        org.joda.time.Days days0 = org.joda.time.Days.days(1);
        days0.toString();
        days0.hashCode();
        org.junit.Assert.assertTrue(days0.equals(days0));
    }

    @Test
    public void test885() throws Throwable {
        java.lang.String string0 = null;
        org.joda.time.Minutes minutes1 = org.joda.time.Minutes.parseMinutes(string0);
        org.joda.time.Minutes minutes2 = minutes1.minus(1);
        minutes2.toString();
        minutes2.hashCode();
        org.junit.Assert.assertTrue(minutes2.equals(minutes2));
    }

    @Test
    public void test886() throws Throwable {
        org.joda.time.DateTimeField roundHalfCeiling0 = null;
        long long1 = roundHalfCeiling0.roundHalfCeiling(1);
    }

    @Test
    public void test887() throws Throwable {
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        periodFormatterBuilder0.toString();
        periodFormatterBuilder0.hashCode();
        org.junit.Assert.assertTrue(periodFormatterBuilder0.equals(periodFormatterBuilder0));
    }

    @Test
    public void test888() throws Throwable {
        java.lang.Object object0 = null;
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(object0, chronology1);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime2.plusMinutes(1);
        localDateTime3.toString();
        localDateTime3.hashCode();
        org.junit.Assert.assertTrue(localDateTime3.equals(localDateTime3));
    }

    @Test
    public void test889() throws Throwable {
        org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.fromMillisOfDay(1);
        int int1 = localTime0.getValue(1);
    }

    @Test
    public void test890() throws Throwable {
        org.joda.time.DateTimeField get0 = null;
        int int1 = get0.get(1);
    }

    @Test
    public void test891() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.hourOfDay();
        dateTimeField2.toString();
        dateTimeField2.hashCode();
        org.junit.Assert.assertTrue(dateTimeField2.equals(dateTimeField2));
    }

    @Test
    public void test892() throws Throwable {
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay(1, 1, 1, 1);
        timeOfDay0.toString();
        timeOfDay0.hashCode();
        org.junit.Assert.assertTrue(timeOfDay0.equals(timeOfDay0));
    }

    @Test
    public void test893() throws Throwable {
        java.lang.Object object0 = null;
        org.joda.time.PeriodType periodType1 = null;
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(object0, periodType1);
        org.joda.time.MutablePeriod mutablePeriod3 = mutablePeriod2.copy();
        mutablePeriod3.toString();
        mutablePeriod3.hashCode();
        org.junit.Assert.assertTrue(mutablePeriod3.equals(mutablePeriod3));
    }

    @Test
    public void test894() throws Throwable {
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.printZeroRarelyFirst();
        periodFormatterBuilder1.toString();
        periodFormatterBuilder1.hashCode();
        org.junit.Assert.assertTrue(periodFormatterBuilder1.equals(periodFormatterBuilder1));
    }

    @Test
    public void test895() throws Throwable {
        org.joda.time.DateTimeField getMinimumValue0 = null;
        org.joda.time.ReadablePartial readablePartial1 = null;
        int int2 = getMinimumValue0.getMinimumValue(readablePartial1);
    }

    @Test
    public void test896() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.millisOfDay();
        dateTimeField2.toString();
        dateTimeField2.hashCode();
        org.junit.Assert.assertTrue(dateTimeField2.equals(dateTimeField2));
    }

    @Test
    public void test897() throws Throwable {
        java.lang.String string0 = null;
        org.joda.time.format.PeriodPrinter periodPrinter1 = null;
        org.joda.time.format.PeriodParser periodParser2 = null;
        org.joda.time.format.PeriodFormatter periodFormatter3 = new org.joda.time.format.PeriodFormatter(periodPrinter1, periodParser2);
        org.joda.time.MutablePeriod mutablePeriod4 = org.joda.time.MutablePeriod.parse(string0, periodFormatter3);
        mutablePeriod4.toString();
        mutablePeriod4.hashCode();
        org.junit.Assert.assertTrue(mutablePeriod4.equals(mutablePeriod4));
    }

    @Test
    public void test898() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.Interval interval2 = new org.joda.time.Interval(readableInstant0, readablePeriod1);
        interval2.toString();
        interval2.hashCode();
        org.junit.Assert.assertTrue(interval2.equals(interval2));
    }

    @Test
    public void test899() throws Throwable {
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        mutableInterval0.toString();
        mutableInterval0.hashCode();
        org.junit.Assert.assertTrue(mutableInterval0.equals(mutableInterval0));
    }

    @Test
    public void test900() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.YearMonth yearMonth2 = org.joda.time.YearMonth.now(chronology1);
        org.joda.time.Interval interval3 = yearMonth2.toInterval();
        interval3.toString();
        interval3.hashCode();
        org.junit.Assert.assertTrue(interval3.equals(interval3));
    }

    @Test
    public void test901() throws Throwable {
        org.joda.time.LocalDateTime.Property setCopy0 = null;
        java.lang.String string1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.LocalDateTime localDateTime3 = setCopy0.setCopy(string1, locale2);
        localDateTime3.toString();
        localDateTime3.hashCode();
        org.junit.Assert.assertTrue(localDateTime3.equals(localDateTime3));
    }

    @Test
    public void test902() throws Throwable {
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.basicOrdinalDateTimeNoMillis();
        dateTimeFormatter0.toString();
        dateTimeFormatter0.hashCode();
        org.junit.Assert.assertTrue(dateTimeFormatter0.equals(dateTimeFormatter0));
    }

    @Test
    public void test903() throws Throwable {
        org.joda.time.field.DividedDateTimeField getDifferenceAsLong0 = null;
        long long1 = getDifferenceAsLong0.getDifferenceAsLong(1, 1);
    }

    @Test
    public void test904() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(1, chronology1);
        int int3 = localDate2.getMonthOfYear();
    }

    @Test
    public void test905() throws Throwable {
        int int0 = org.joda.time.field.FieldUtils.safeMultiplyToInt(1, 1);
    }

    @Test
    public void test906() throws Throwable {
        java.lang.Object object0 = null;
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(object0, dateTimeZone2);
        org.joda.time.LocalDate localDate4 = localDate3.plusDays(1);
        localDate4.toString();
        localDate4.hashCode();
        org.junit.Assert.assertTrue(localDate4.equals(localDate4));
    }

    @Test
    public void test907() throws Throwable {
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime(1, 1, 1, 1, 1, 1);
        dateTime0.toString();
        dateTime0.hashCode();
        org.junit.Assert.assertTrue(dateTime0.equals(dateTime0));
    }

    @Test
    public void test908() throws Throwable {
        org.joda.time.LocalDateTime.Property roundHalfFloorCopy0 = null;
        org.joda.time.LocalDateTime localDateTime1 = roundHalfFloorCopy0.roundHalfFloorCopy();
        localDateTime1.toString();
        localDateTime1.hashCode();
        org.junit.Assert.assertTrue(localDateTime1.equals(localDateTime1));
    }

    @Test
    public void test909() throws Throwable {
        org.joda.time.YearMonthDay.Property setCopy0 = null;
        java.lang.String string1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.YearMonthDay yearMonthDay3 = setCopy0.setCopy(string1, locale2);
        yearMonthDay3.toString();
        yearMonthDay3.hashCode();
        org.junit.Assert.assertTrue(yearMonthDay3.equals(yearMonthDay3));
    }

    @Test
    public void test910() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        long long2 = chronology1.add(1, 1, 1);
    }

    @Test
    public void test911() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.JulianChronology julianChronology2 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        julianChronology2.toString();
        julianChronology2.hashCode();
        org.junit.Assert.assertTrue(julianChronology2.equals(julianChronology2));
    }

    @Test
    public void test912() throws Throwable {
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.DateTimeComparator dateTimeComparator1 = org.joda.time.DateTimeComparator.getInstance(dateTimeFieldType0);
        dateTimeComparator1.toString();
        dateTimeComparator1.hashCode();
        org.junit.Assert.assertTrue(dateTimeComparator1.equals(dateTimeComparator1));
    }

    @Test
    public void test913() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(1, chronology1);
        org.joda.time.LocalDate.Property property3 = localDate2.yearOfCentury();
        property3.toString();
        property3.hashCode();
        org.junit.Assert.assertTrue(property3.equals(property3));
    }

    @Test
    public void test914() throws Throwable {
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.minutes();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getChronology(chronology1);
        org.joda.time.Period period3 = new org.joda.time.Period(1, 1, periodType0, chronology2);
        period3.toString();
        period3.hashCode();
        org.junit.Assert.assertTrue(period3.equals(period3));
    }

    @Test
    public void test915() throws Throwable {
        org.joda.time.DateTimeField add0 = null;
        long long1 = add0.add(1, 1);
    }

    @Test
    public void test916() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1, 1, 1, chronology1);
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight2.withYearOfEra(1);
        dateMidnight3.toString();
        dateMidnight3.hashCode();
        org.junit.Assert.assertTrue(dateMidnight3.equals(dateMidnight3));
    }

    @Test
    public void test917() throws Throwable {
        java.lang.String string0 = null;
        org.joda.time.Interval interval1 = org.joda.time.Interval.parse(string0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Interval interval3 = interval1.withPeriodBeforeEnd(readablePeriod2);
        interval3.toString();
        interval3.hashCode();
        org.junit.Assert.assertTrue(interval3.equals(interval3));
    }

    @Test
    public void test918() throws Throwable {
        org.joda.time.field.DelegatedDateTimeField set0 = null;
        org.joda.time.ReadablePartial readablePartial1 = null;
        int[] intArr2 = null;
        int[] intArr3 = set0.set(readablePartial1, 1, intArr2, 1);
        intArr3.toString();
        intArr3.hashCode();
        org.junit.Assert.assertTrue(intArr3.equals(intArr3));
    }

    @Test
    public void test919() throws Throwable {
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        java.lang.String string1 = null;
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparator(string1);
        periodFormatterBuilder2.toString();
        periodFormatterBuilder2.hashCode();
        org.junit.Assert.assertTrue(periodFormatterBuilder2.equals(periodFormatterBuilder2));
    }

    @Test
    public void test920() throws Throwable {
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime(1, 1, 1, 1, 1, 1);
        org.joda.time.DateTime dateTime1 = dateTime0.plusMillis(1);
        dateTime1.toString();
        dateTime1.hashCode();
        org.junit.Assert.assertTrue(dateTime1.equals(dateTime1));
    }

    @Test
    public void test921() throws Throwable {
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay(1);
        org.joda.time.TimeOfDay timeOfDay1 = timeOfDay0.minusMillis(1);
        timeOfDay1.toString();
        timeOfDay1.hashCode();
        org.junit.Assert.assertTrue(timeOfDay1.equals(timeOfDay1));
    }

    @Test
    public void test922() throws Throwable {
        java.lang.String string0 = null;
        org.joda.time.Years years1 = org.joda.time.Years.parseYears(string0);
        years1.toString();
        years1.hashCode();
        org.junit.Assert.assertTrue(years1.equals(years1));
    }

    @Test
    public void test923() throws Throwable {
        org.joda.time.Period period0 = new org.joda.time.Period();
        period0.toString();
        period0.hashCode();
        org.junit.Assert.assertTrue(period0.equals(period0));
    }

    @Test
    public void test924() throws Throwable {
        org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder0 = new org.joda.time.tz.DateTimeZoneBuilder();
        dateTimeZoneBuilder0.toString();
        dateTimeZoneBuilder0.hashCode();
        org.junit.Assert.assertTrue(dateTimeZoneBuilder0.equals(dateTimeZoneBuilder0));
    }

    @Test
    public void test925() throws Throwable {
        org.joda.time.Period period0 = org.joda.time.Period.months(1);
        org.joda.time.Period period1 = period0.minusMinutes(1);
        period1.toString();
        period1.hashCode();
        org.junit.Assert.assertTrue(period1.equals(period1));
    }

    @Test
    public void test926() throws Throwable {
        org.joda.time.field.UnsupportedDateTimeField getAsShortText0 = null;
        java.util.Locale locale1 = null;
        java.lang.String string2 = getAsShortText0.getAsShortText(1, locale1);
        string2.toString();
        string2.hashCode();
        org.junit.Assert.assertTrue(string2.equals(string2));
    }

    @Test
    public void test927() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.time();
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod(readableInstant0, readableInstant1, periodType2);
        int int4 = mutablePeriod3.getYears();
    }

    @Test
    public void test928() throws Throwable {
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.timeParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(1);
        dateTimeFormatter1.toString();
        dateTimeFormatter1.hashCode();
        org.junit.Assert.assertTrue(dateTimeFormatter1.equals(dateTimeFormatter1));
    }

    @Test
    public void test929() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(1, 1, chronology1);
        java.lang.Object object3 = mutableInterval2.clone();
        object3.toString();
        object3.hashCode();
        org.junit.Assert.assertTrue(object3.equals(object3));
    }

    @Test
    public void test930() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1, dateTimeZone1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus(readablePeriod3);
        dateMidnight4.toString();
        dateMidnight4.hashCode();
        org.junit.Assert.assertTrue(dateMidnight4.equals(dateMidnight4));
    }

    @Test
    public void test931() throws Throwable {
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.time();
        org.joda.time.PeriodType periodType1 = periodType0.withYearsRemoved();
        periodType1.toString();
        periodType1.hashCode();
        org.junit.Assert.assertTrue(periodType1.equals(periodType1));
    }

    @Test
    public void test932() throws Throwable {
        java.lang.Object object0 = null;
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(object0, chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.era();
        boolean boolean4 = localDateTime2.isSupported(dateTimeFieldType3);
    }

    @Test
    public void test933() throws Throwable {
        org.joda.time.DateTime.Property withMaximumValue0 = null;
        org.joda.time.DateTime dateTime1 = withMaximumValue0.withMaximumValue();
        dateTime1.toString();
        dateTime1.hashCode();
        org.junit.Assert.assertTrue(dateTime1.equals(dateTime1));
    }

    @Test
    public void test934() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime(1, chronology1);
        mutableDateTime2.addHours(1);
    }

    @Test
    public void test935() throws Throwable {
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.hourMinute();
        java.util.Locale locale1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withLocale(locale1);
        dateTimeFormatter2.toString();
        dateTimeFormatter2.hashCode();
        org.junit.Assert.assertTrue(dateTimeFormatter2.equals(dateTimeFormatter2));
    }

    @Test
    public void test936() throws Throwable {
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Hours hours3 = org.joda.time.Hours.hoursIn(readableInterval2);
        org.joda.time.Hours hours4 = hours3.minus(1);
        hours4.toString();
        hours4.hashCode();
        org.junit.Assert.assertTrue(hours4.equals(hours4));
    }

    @Test
    public void test937() throws Throwable {
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight1 = dateMidnight0.withCenturyOfEra(1);
        dateMidnight1.toString();
        dateMidnight1.hashCode();
        org.junit.Assert.assertTrue(dateMidnight1.equals(dateMidnight1));
    }

    @Test
    public void test938() throws Throwable {
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(1, 1, 1, 1, 1, 1, dateTimeZone0);
        org.joda.time.DateTime dateTime2 = dateTime1.withDate(1, 1, 1);
        dateTime2.toString();
        dateTime2.hashCode();
        org.junit.Assert.assertTrue(dateTime2.equals(dateTime2));
    }

    @Test
    public void test939() throws Throwable {
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.Period period3 = new org.joda.time.Period(readableDuration0, readableInstant1, periodType2);
        org.joda.time.Duration duration4 = period3.toStandardDuration();
        duration4.toString();
        duration4.hashCode();
        org.junit.Assert.assertTrue(duration4.equals(duration4));
    }

    @Test
    public void test940() throws Throwable {
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodPrinter periodPrinter1 = periodFormatterBuilder0.toPrinter();
        periodPrinter1.toString();
        periodPrinter1.hashCode();
        org.junit.Assert.assertTrue(periodPrinter1.equals(periodPrinter1));
    }

    @Test
    public void test941() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.YearMonth yearMonth2 = new org.joda.time.YearMonth(1, chronology1);
        yearMonth2.toString();
        yearMonth2.hashCode();
        org.junit.Assert.assertTrue(yearMonth2.equals(yearMonth2));
    }

    @Test
    public void test942() throws Throwable {
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        java.lang.String string1 = null;
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendLiteral(string1);
        periodFormatterBuilder2.toString();
        periodFormatterBuilder2.hashCode();
        org.junit.Assert.assertTrue(periodFormatterBuilder2.equals(periodFormatterBuilder2));
    }

    @Test
    public void test943() throws Throwable {
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.yearWeekDay();
        periodType0.toString();
        periodType0.hashCode();
        org.junit.Assert.assertTrue(periodType0.equals(periodType0));
    }

    @Test
    public void test944() throws Throwable {
        org.joda.time.Seconds plus0 = null;
        org.joda.time.Seconds seconds1 = plus0.plus(1);
        seconds1.toString();
        seconds1.hashCode();
        org.junit.Assert.assertTrue(seconds1.equals(seconds1));
    }

    @Test
    public void test945() throws Throwable {
        org.joda.time.tz.Provider provider0 = org.joda.time.DateTimeZone.getProvider();
        provider0.toString();
        provider0.hashCode();
        org.junit.Assert.assertTrue(provider0.equals(provider0));
    }

    @Test
    public void test946() throws Throwable {
        java.lang.Object object0 = null;
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(object0, chronology1);
        int int3 = localDateTime2.getWeekOfWeekyear();
    }

    @Test
    public void test947() throws Throwable {
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.yearMonth();
        dateTimeFormatter0.toString();
        dateTimeFormatter0.hashCode();
        org.junit.Assert.assertTrue(dateTimeFormatter0.equals(dateTimeFormatter0));
    }

    @Test
    public void test948() throws Throwable {
        java.lang.String string0 = null;
        org.joda.time.format.PeriodFormatter periodFormatter1 = org.joda.time.format.ISOPeriodFormat.alternateExtended();
        org.joda.time.Period period2 = org.joda.time.Period.parse(string0, periodFormatter1);
        period2.toString();
        period2.hashCode();
        org.junit.Assert.assertTrue(period2.equals(period2));
    }

    @Test
    public void test949() throws Throwable {
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime(1, 1, 1, 1, 1);
        org.joda.time.DateTime.Property property1 = dateTime0.weekOfWeekyear();
        property1.toString();
        property1.hashCode();
        org.junit.Assert.assertTrue(property1.equals(property1));
    }

    @Test
    public void test950() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeUtils.getZone(dateTimeZone1);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(1, 1, 1, 1, 1, dateTimeZone2);
        org.joda.time.DateTime dateTime4 = dateTime3.minusDays(1);
        dateTime4.toString();
        dateTime4.hashCode();
        org.junit.Assert.assertTrue(dateTime4.equals(dateTime4));
    }

    @Test
    public void test951() throws Throwable {
        org.joda.time.LocalTime.Property addCopy0 = null;
        org.joda.time.LocalTime localTime1 = addCopy0.addCopy(1);
        localTime1.toString();
        localTime1.hashCode();
        org.junit.Assert.assertTrue(localTime1.equals(localTime1));
    }

    @Test
    public void test952() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.DurationField durationField2 = chronology1.months();
        durationField2.toString();
        durationField2.hashCode();
        org.junit.Assert.assertTrue(durationField2.equals(durationField2));
    }

    @Test
    public void test953() throws Throwable {
        java.lang.Object object0 = null;
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getChronology(chronology1);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(object0, chronology2);
        org.joda.time.LocalDate.Property property4 = localDate3.yearOfCentury();
        property4.toString();
        property4.hashCode();
        org.junit.Assert.assertTrue(property4.equals(property4));
    }

    @Test
    public void test954() throws Throwable {
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.DateMidnight dateMidnight2 = yearMonthDay1.toDateMidnight();
        dateMidnight2.toString();
        dateMidnight2.hashCode();
        org.junit.Assert.assertTrue(dateMidnight2.equals(dateMidnight2));
    }

    @Test
    public void test955() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(1, chronology1);
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        dateTime3.toString();
        dateTime3.hashCode();
        org.junit.Assert.assertTrue(dateTime3.equals(dateTime3));
    }

    @Test
    public void test956() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        java.util.Locale locale1 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket2 = new org.joda.time.format.DateTimeParserBucket(1, chronology0, locale1);
        java.lang.Integer integer3 = dateTimeParserBucket2.getOffsetInteger();
        integer3.toString();
        integer3.hashCode();
        org.junit.Assert.assertTrue(integer3.equals(integer3));
    }

    @Test
    public void test957() throws Throwable {
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.yearDay();
        java.lang.String string1 = periodType0.toString();
        string1.toString();
        string1.hashCode();
        org.junit.Assert.assertTrue(string1.equals(string1));
    }

    @Test
    public void test958() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(1, 1, chronology1);
        org.joda.time.ReadableDuration readableDuration3 = null;
        mutableInterval2.setDurationAfterStart(readableDuration3);
    }

    @Test
    public void test959() throws Throwable {
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        mutableInterval0.setEndMillis(1);
    }

    @Test
    public void test960() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(1, chronology1);
        org.joda.time.LocalDate.Property property3 = localDate2.weekyear();
        property3.toString();
        property3.hashCode();
        org.junit.Assert.assertTrue(property3.equals(property3));
    }

    @Test
    public void test961() throws Throwable {
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.yearOfEra();
        dateTimeFieldType0.toString();
        dateTimeFieldType0.hashCode();
        org.junit.Assert.assertTrue(dateTimeFieldType0.equals(dateTimeFieldType0));
    }

    @Test
    public void test962() throws Throwable {
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(dateTimeZone0);
        org.joda.time.LocalTime localTime2 = localTime1.plusMillis(1);
        localTime2.toString();
        localTime2.hashCode();
        org.junit.Assert.assertTrue(localTime2.equals(localTime2));
    }

    @Test
    public void test963() throws Throwable {
        java.lang.Object object0 = null;
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getChronology(chronology1);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(object0, chronology2);
        org.joda.time.DateTime dateTime4 = dateTime3.withLaterOffsetAtOverlap();
        dateTime4.toString();
        dateTime4.hashCode();
        org.junit.Assert.assertTrue(dateTime4.equals(dateTime4));
    }

    @Test
    public void test964() throws Throwable {
        org.joda.time.Instant getMillis0 = null;
        long long1 = getMillis0.getMillis();
    }

    @Test
    public void test965() throws Throwable {
        org.joda.time.Seconds isGreaterThan0 = null;
        org.joda.time.Seconds seconds1 = null;
        boolean boolean2 = isGreaterThan0.isGreaterThan(seconds1);
    }

    @Test
    public void test966() throws Throwable {
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getChronology(chronology1);
        org.joda.time.DateTimeField dateTimeField3 = dateTimeFieldType0.getField(chronology2);
        dateTimeField3.toString();
        dateTimeField3.hashCode();
        org.junit.Assert.assertTrue(dateTimeField3.equals(dateTimeField3));
    }

    @Test
    public void test967() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay(1, 1, 1, 1, chronology0);
        int int2 = timeOfDay1.getHourOfDay();
    }

    @Test
    public void test968() throws Throwable {
        org.joda.time.DateTimeUtils.setCurrentMillisSystem();
    }

    @Test
    public void test969() throws Throwable {
        java.lang.String string0 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = org.joda.time.format.ISODateTimeFormat.hourMinute();
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.parse(string0, dateTimeFormatter1);
        dateTime2.toString();
        dateTime2.hashCode();
        org.junit.Assert.assertTrue(dateTime2.equals(dateTime2));
    }

    @Test
    public void test970() throws Throwable {
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfWeek();
        org.joda.time.DateTimeComparator dateTimeComparator1 = org.joda.time.DateTimeComparator.getInstance(dateTimeFieldType0);
        dateTimeComparator1.toString();
        dateTimeComparator1.hashCode();
        org.junit.Assert.assertTrue(dateTimeComparator1.equals(dateTimeComparator1));
    }

    @Test
    public void test971() throws Throwable {
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.dateHourMinuteSecond();
        java.lang.String string1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = dateTimeFormatter0.parseMutableDateTime(string1);
        mutableDateTime2.toString();
        mutableDateTime2.hashCode();
        org.junit.Assert.assertTrue(mutableDateTime2.equals(mutableDateTime2));
    }

    @Test
    public void test972() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        java.util.Locale locale1 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket2 = new org.joda.time.format.DateTimeParserBucket(1, chronology0, locale1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        dateTimeParserBucket2.saveField(dateTimeFieldType3, 1);
    }

    @Test
    public void test973() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.YearMonth yearMonth2 = new org.joda.time.YearMonth(1, 1, chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.dayOfMonth();
        org.joda.time.YearMonth yearMonth4 = yearMonth2.withField(dateTimeFieldType3, 1);
        yearMonth4.toString();
        yearMonth4.hashCode();
        org.junit.Assert.assertTrue(yearMonth4.equals(yearMonth4));
    }

    @Test
    public void test974() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.YearMonth yearMonth2 = new org.joda.time.YearMonth(1, chronology1);
        int int3 = yearMonth2.size();
    }

    @Test
    public void test975() throws Throwable {
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.years();
        org.joda.time.field.UnsupportedDurationField unsupportedDurationField1 = org.joda.time.field.UnsupportedDurationField.getInstance(durationFieldType0);
        long long2 = unsupportedDurationField1.getValueAsLong(1);
    }

    @Test
    public void test976() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone2 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone1);
        cachedDateTimeZone2.toString();
        cachedDateTimeZone2.hashCode();
        org.junit.Assert.assertTrue(cachedDateTimeZone2.equals(cachedDateTimeZone2));
    }

    @Test
    public void test977() throws Throwable {
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime(1);
        mutableDateTime0.setMillis(1);
    }

    @Test
    public void test978() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.yearDay();
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod(readableInstant0, readableInstant1, periodType2);
        mutablePeriod3.setWeeks(1);
    }

    @Test
    public void test979() throws Throwable {
        org.joda.time.field.OffsetDateTimeField roundFloor0 = null;
        long long1 = roundFloor0.roundFloor(1);
    }

    @Test
    public void test980() throws Throwable {
        org.joda.time.DateTimeField dateTimeField0 = null;
        org.joda.time.DurationField durationField1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.field.DelegatedDateTimeField delegatedDateTimeField3 = new org.joda.time.field.DelegatedDateTimeField(dateTimeField0, durationField1, dateTimeFieldType2);
        delegatedDateTimeField3.toString();
        delegatedDateTimeField3.hashCode();
        org.junit.Assert.assertTrue(delegatedDateTimeField3.equals(delegatedDateTimeField3));
    }

    @Test
    public void test981() throws Throwable {
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.yearWeekDay();
        java.lang.Object object1 = null;
        boolean boolean2 = periodType0.equals(object1);
    }

    @Test
    public void test982() throws Throwable {
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Weeks weeks3 = org.joda.time.Weeks.weeksIn(readableInterval2);
        weeks3.toString();
        weeks3.hashCode();
        org.junit.Assert.assertTrue(weeks3.equals(weeks3));
    }

    @Test
    public void test983() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        chronology1.toString();
        chronology1.hashCode();
        org.junit.Assert.assertTrue(chronology1.equals(chronology1));
    }

    @Test
    public void test984() throws Throwable {
        java.lang.String string0 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = org.joda.time.format.ISODateTimeFormat.weekDate();
        org.joda.time.Instant instant2 = org.joda.time.Instant.parse(string0, dateTimeFormatter1);
        instant2.toString();
        instant2.hashCode();
        org.junit.Assert.assertTrue(instant2.equals(instant2));
    }

    @Test
    public void test985() throws Throwable {
        org.joda.time.Days days0 = org.joda.time.Days.days(1);
        org.joda.time.Days days1 = days0.negated();
        days1.toString();
        days1.hashCode();
        org.junit.Assert.assertTrue(days1.equals(days1));
    }

    @Test
    public void test986() throws Throwable {
        org.joda.time.DateTimeField getLeapDurationField0 = null;
        org.joda.time.DurationField durationField1 = getLeapDurationField0.getLeapDurationField();
        durationField1.toString();
        durationField1.hashCode();
        org.junit.Assert.assertTrue(durationField1.equals(durationField1));
    }

    @Test
    public void test987() throws Throwable {
        org.joda.time.DateTimeField getName0 = null;
        java.lang.String string1 = getName0.getName();
        string1.toString();
        string1.hashCode();
        org.junit.Assert.assertTrue(string1.equals(string1));
    }

    @Test
    public void test988() throws Throwable {
        org.joda.time.DurationFieldType[] durationFieldTypeArr0 = null;
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.forFields(durationFieldTypeArr0);
        periodType1.toString();
        periodType1.hashCode();
        org.junit.Assert.assertTrue(periodType1.equals(periodType1));
    }

    @Test
    public void test989() throws Throwable {
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField0 = null;
        org.joda.time.DurationField durationField1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField3 = new org.joda.time.field.DividedDateTimeField(remainderDateTimeField0, durationField1, dateTimeFieldType2);
        dividedDateTimeField3.toString();
        dividedDateTimeField3.hashCode();
        org.junit.Assert.assertTrue(dividedDateTimeField3.equals(dividedDateTimeField3));
    }

    @Test
    public void test990() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeUtils.getZone(dateTimeZone1);
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime(dateTimeZone2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalTime localTime5 = localTime3.plus(readablePeriod4);
        localTime5.toString();
        localTime5.hashCode();
        org.junit.Assert.assertTrue(localTime5.equals(localTime5));
    }

    @Test
    public void test991() throws Throwable {
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendYear(1, 1);
        dateTimeFormatterBuilder1.toString();
        dateTimeFormatterBuilder1.hashCode();
        org.junit.Assert.assertTrue(dateTimeFormatterBuilder1.equals(dateTimeFormatterBuilder1));
    }

    @Test
    public void test992() throws Throwable {
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.minutes();
        org.joda.time.DurationFieldType durationFieldType1 = org.joda.time.DurationFieldType.centuries();
        boolean boolean2 = periodType0.isSupported(durationFieldType1);
    }

    @Test
    public void test993() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeUtils.getZone(dateTimeZone1);
        long long3 = dateTimeZone2.previousTransition(1);
    }

    @Test
    public void test994() throws Throwable {
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay(1);
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getChronology(chronology1);
        org.joda.time.TimeOfDay timeOfDay3 = timeOfDay0.withChronologyRetainFields(chronology2);
        timeOfDay3.toString();
        timeOfDay3.hashCode();
        org.junit.Assert.assertTrue(timeOfDay3.equals(timeOfDay3));
    }

    @Test
    public void test995() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(1, chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfWeek();
        property3.toString();
        property3.hashCode();
        org.junit.Assert.assertTrue(property3.equals(property3));
    }

    @Test
    public void test996() throws Throwable {
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.dateElementParser();
        dateTimeFormatter0.toString();
        dateTimeFormatter0.hashCode();
        org.junit.Assert.assertTrue(dateTimeFormatter0.equals(dateTimeFormatter0));
    }

    @Test
    public void test997() throws Throwable {
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight(1, 1, 1);
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getChronology(chronology1);
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight0.withChronology(chronology2);
        dateMidnight3.toString();
        dateMidnight3.hashCode();
        org.junit.Assert.assertTrue(dateMidnight3.equals(dateMidnight3));
    }

    @Test
    public void test998() throws Throwable {
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.localTimeParser();
        java.lang.String string1 = null;
        long long2 = dateTimeFormatter0.parseMillis(string1);
    }

    @Test
    public void test999() throws Throwable {
        org.joda.time.YearMonthDay.Property withMinimumValue0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = withMinimumValue0.withMinimumValue();
        yearMonthDay1.toString();
        yearMonthDay1.hashCode();
        org.junit.Assert.assertTrue(yearMonthDay1.equals(yearMonthDay1));
    }

    @Test
    public void test1000() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Minutes minutes2 = org.joda.time.Minutes.minutesBetween(readableInstant0, readableInstant1);
        minutes2.toString();
        minutes2.hashCode();
        org.junit.Assert.assertTrue(minutes2.equals(minutes2));
    }

    @Test
    public void test1001() throws Throwable {
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateTimeComparator dateTimeComparator2 = org.joda.time.DateTimeComparator.getInstance(dateTimeFieldType0, dateTimeFieldType1);
        java.lang.String string3 = dateTimeComparator2.toString();
        string3.toString();
        string3.hashCode();
        org.junit.Assert.assertTrue(string3.equals(string3));
    }

    @Test
    public void test1002() throws Throwable {
        org.joda.time.field.RemainderDateTimeField roundFloor0 = null;
        long long1 = roundFloor0.roundFloor(1);
    }

    @Test
    public void test1003() throws Throwable {
        java.lang.Object object0 = null;
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(object0, dateTimeZone2);
        int int4 = localDate3.getEra();
    }

    @Test
    public void test1004() throws Throwable {
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime(1, 1, 1, 1, 1, 1, 1);
        int int1 = localDateTime0.getSecondOfMinute();
    }

    @Test
    public void test1005() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        java.util.Locale locale1 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket2 = new org.joda.time.format.DateTimeParserBucket(1, chronology0, locale1);
        long long3 = dateTimeParserBucket2.computeMillis();
    }

    @Test
    public void test1006() throws Throwable {
        org.joda.time.LocalTime.Property withMaximumValue0 = null;
        org.joda.time.LocalTime localTime1 = withMaximumValue0.withMaximumValue();
        localTime1.toString();
        localTime1.hashCode();
        org.junit.Assert.assertTrue(localTime1.equals(localTime1));
    }

    @Test
    public void test1007() throws Throwable {
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.hour();
        dateTimeFormatter0.toString();
        dateTimeFormatter0.hashCode();
        org.junit.Assert.assertTrue(dateTimeFormatter0.equals(dateTimeFormatter0));
    }

    @Test
    public void test1008() throws Throwable {
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.basicOrdinalDateTime();
        java.lang.StringBuilder stringBuilder1 = null;
        org.joda.time.ReadablePartial readablePartial2 = null;
        dateTimeFormatter0.printTo(stringBuilder1, readablePartial2);
    }

    @Test
    public void test1009() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableInstant0, readableDuration1);
        mutableInterval2.toString();
        mutableInterval2.hashCode();
        org.junit.Assert.assertTrue(mutableInterval2.equals(mutableInterval2));
    }

    @Test
    public void test1010() throws Throwable {
        org.joda.time.DateMidnight.Property addToCopy0 = null;
        org.joda.time.DateMidnight dateMidnight1 = addToCopy0.addToCopy(1);
        dateMidnight1.toString();
        dateMidnight1.hashCode();
        org.junit.Assert.assertTrue(dateMidnight1.equals(dateMidnight1));
    }

    @Test
    public void test1011() throws Throwable {
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendFractionOfDay(1, 1);
        dateTimeFormatterBuilder1.toString();
        dateTimeFormatterBuilder1.hashCode();
        org.junit.Assert.assertTrue(dateTimeFormatterBuilder1.equals(dateTimeFormatterBuilder1));
    }

    @Test
    public void test1012() throws Throwable {
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.field.UnsupportedDurationField unsupportedDurationField1 = org.joda.time.field.UnsupportedDurationField.getInstance(durationFieldType0);
        unsupportedDurationField1.toString();
        unsupportedDurationField1.hashCode();
        org.junit.Assert.assertTrue(unsupportedDurationField1.equals(unsupportedDurationField1));
    }

    @Test
    public void test1013() throws Throwable {
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(1, 1, 1, 1, 1, 1, dateTimeZone0);
        org.joda.time.DateTime dateTime2 = dateTime1.plusYears(1);
        dateTime2.toString();
        dateTime2.hashCode();
        org.junit.Assert.assertTrue(dateTime2.equals(dateTime2));
    }

    @Test
    public void test1014() throws Throwable {
        java.lang.Object object0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant1);
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod(object0, chronology2);
        mutablePeriod3.toString();
        mutablePeriod3.hashCode();
        org.junit.Assert.assertTrue(mutablePeriod3.equals(mutablePeriod3));
    }

    @Test
    public void test1015() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeUtils.getZone(dateTimeZone1);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(1, 1, 1, 1, 1, dateTimeZone2);
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeUtils.getZone(dateTimeZone5);
        org.joda.time.DateTime dateTime7 = dateTime3.withZone(dateTimeZone6);
        dateTime7.toString();
        dateTime7.hashCode();
        org.junit.Assert.assertTrue(dateTime7.equals(dateTime7));
    }

    @Test
    public void test1016() throws Throwable {
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.minutes(1);
        org.joda.time.Weeks weeks1 = minutes0.toStandardWeeks();
        weeks1.toString();
        weeks1.hashCode();
        org.junit.Assert.assertTrue(weeks1.equals(weeks1));
    }

    @Test
    public void test1017() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(1, dateTimeZone1);
        localTime2.toString();
        localTime2.hashCode();
        org.junit.Assert.assertTrue(localTime2.equals(localTime2));
    }

    @Test
    public void test1018() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        int int2 = localDate1.getYearOfEra();
    }

    @Test
    public void test1019() throws Throwable {
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        java.lang.String string1 = null;
        java.lang.String string2 = null;
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSeparator(string1, string2);
        periodFormatterBuilder3.toString();
        periodFormatterBuilder3.hashCode();
        org.junit.Assert.assertTrue(periodFormatterBuilder3.equals(periodFormatterBuilder3));
    }

    @Test
    public void test1020() throws Throwable {
        org.joda.time.field.UnsupportedDateTimeField getAsShortText0 = null;
        org.joda.time.ReadablePartial readablePartial1 = null;
        java.util.Locale locale2 = null;
        java.lang.String string3 = getAsShortText0.getAsShortText(readablePartial1, locale2);
        string3.toString();
        string3.hashCode();
        org.junit.Assert.assertTrue(string3.equals(string3));
    }

    @Test
    public void test1021() throws Throwable {
        org.joda.time.Duration duration0 = org.joda.time.Duration.standardDays(1);
        java.math.RoundingMode roundingMode1 = null;
        org.joda.time.Duration duration2 = duration0.dividedBy(1, roundingMode1);
        duration2.toString();
        duration2.hashCode();
        org.junit.Assert.assertTrue(duration2.equals(duration2));
    }

    @Test
    public void test1022() throws Throwable {
        org.joda.time.DateTimeField setExtended0 = null;
        long long1 = setExtended0.setExtended(1, 1);
    }

    @Test
    public void test1023() throws Throwable {
        org.joda.time.Period period0 = org.joda.time.Period.days(1);
        int int1 = period0.getMinutes();
    }

    @Test
    public void test1024() throws Throwable {
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder0.append(dateTimePrinter1);
        dateTimeFormatterBuilder2.toString();
        dateTimeFormatterBuilder2.hashCode();
        org.junit.Assert.assertTrue(dateTimeFormatterBuilder2.equals(dateTimeFormatterBuilder2));
    }

    @Test
    public void test1025() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay(chronology0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.MonthDay.Property property3 = monthDay1.property(dateTimeFieldType2);
        property3.toString();
        property3.hashCode();
        org.junit.Assert.assertTrue(property3.equals(property3));
    }

    @Test
    public void test1026() throws Throwable {
        org.joda.time.Period period0 = org.joda.time.Period.months(1);
        org.joda.time.Period period1 = period0.withSeconds(1);
        period1.toString();
        period1.hashCode();
        org.junit.Assert.assertTrue(period1.equals(period1));
    }

    @Test
    public void test1027() throws Throwable {
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField0 = null;
        org.joda.time.DurationField durationField1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField3 = new org.joda.time.field.DividedDateTimeField(remainderDateTimeField0, durationField1, dateTimeFieldType2);
        dividedDateTimeField3.toString();
        dividedDateTimeField3.hashCode();
        org.junit.Assert.assertTrue(dividedDateTimeField3.equals(dividedDateTimeField3));
    }

    @Test
    public void test1028() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.millisOfDay();
        dateTimeField2.toString();
        dateTimeField2.hashCode();
        org.junit.Assert.assertTrue(dateTimeField2.equals(dateTimeField2));
    }

    @Test
    public void test1029() throws Throwable {
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate(1);
        org.joda.time.LocalDate.Property property1 = localDate0.monthOfYear();
        property1.toString();
        property1.hashCode();
        org.junit.Assert.assertTrue(property1.equals(property1));
    }

    @Test
    public void test1030() throws Throwable {
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendMinuteOfDay(1);
        dateTimeFormatterBuilder1.toString();
        dateTimeFormatterBuilder1.hashCode();
        org.junit.Assert.assertTrue(dateTimeFormatterBuilder1.equals(dateTimeFormatterBuilder1));
    }

    @Test
    public void test1031() throws Throwable {
        java.lang.String string0 = null;
        org.joda.time.Years years1 = org.joda.time.Years.parseYears(string0);
        org.joda.time.Years years2 = years1.dividedBy(1);
        years2.toString();
        years2.hashCode();
        org.junit.Assert.assertTrue(years2.equals(years2));
    }

    @Test
    public void test1032() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DurationField durationField2 = chronology1.eras();
        durationField2.toString();
        durationField2.hashCode();
        org.junit.Assert.assertTrue(durationField2.equals(durationField2));
    }

    @Test
    public void test1033() throws Throwable {
        java.lang.Object object0 = null;
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getChronology(chronology1);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(object0, chronology2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.DateTime dateTime5 = dateTime3.plus(readablePeriod4);
        dateTime5.toString();
        dateTime5.hashCode();
        org.junit.Assert.assertTrue(dateTime5.equals(dateTime5));
    }

    @Test
    public void test1034() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(1, 1, 1, 1, 1, dateTimeZone1);
        org.joda.time.DateTime dateTime3 = dateTime2.plusMonths(1);
        dateTime3.toString();
        dateTime3.hashCode();
        org.junit.Assert.assertTrue(dateTime3.equals(dateTime3));
    }

    @Test
    public void test1035() throws Throwable {
        java.lang.String string0 = null;
        org.joda.time.MutablePeriod mutablePeriod1 = org.joda.time.MutablePeriod.parse(string0);
        mutablePeriod1.toString();
        mutablePeriod1.hashCode();
        org.junit.Assert.assertTrue(mutablePeriod1.equals(mutablePeriod1));
    }

    @Test
    public void test1036() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(1, chronology1);
        org.joda.time.DurationFieldType durationFieldType3 = org.joda.time.DurationFieldType.weekyears();
        org.joda.time.LocalDate localDate4 = localDate2.withFieldAdded(durationFieldType3, 1);
        localDate4.toString();
        localDate4.hashCode();
        org.junit.Assert.assertTrue(localDate4.equals(localDate4));
    }

    @Test
    public void test1037() throws Throwable {
        org.joda.time.DateTimeField dateTimeField0 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.field.DelegatedDateTimeField delegatedDateTimeField2 = new org.joda.time.field.DelegatedDateTimeField(dateTimeField0, dateTimeFieldType1);
        delegatedDateTimeField2.toString();
        delegatedDateTimeField2.hashCode();
        org.junit.Assert.assertTrue(delegatedDateTimeField2.equals(delegatedDateTimeField2));
    }

    @Test
    public void test1038() throws Throwable {
        org.joda.time.field.DecoratedDurationField getMillis0 = null;
        long long1 = getMillis0.getMillis(1, 1);
    }

    @Test
    public void test1039() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(1, 1, 1, 1, 1, dateTimeZone1);
        org.joda.time.DateTime dateTime3 = dateTime2.minusMinutes(1);
        dateTime3.toString();
        dateTime3.hashCode();
        org.junit.Assert.assertTrue(dateTime3.equals(dateTime3));
    }

    @Test
    public void test1040() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        int int3 = dateTimeZone1.getOffset(readableInstant2);
    }

    @Test
    public void test1041() throws Throwable {
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay(1, 1, 1);
        org.joda.time.YearMonthDay yearMonthDay1 = yearMonthDay0.plusMonths(1);
        yearMonthDay1.toString();
        yearMonthDay1.hashCode();
        org.junit.Assert.assertTrue(yearMonthDay1.equals(yearMonthDay1));
    }

    @Test
    public void test1042() throws Throwable {
        java.lang.Object object0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant1);
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod(object0, chronology2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.ReadableInstant readableInstant5 = null;
        mutablePeriod3.setPeriod(readableInstant4, readableInstant5);
    }

    @Test
    public void test1043() throws Throwable {
        org.joda.time.field.UnsupportedDateTimeField getMaximumValue0 = null;
        org.joda.time.ReadablePartial readablePartial1 = null;
        int int2 = getMaximumValue0.getMaximumValue(readablePartial1);
    }

    @Test
    public void test1044() throws Throwable {
        java.util.Calendar calendar0 = null;
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.fromCalendarFields(calendar0);
        localDateTime1.toString();
        localDateTime1.hashCode();
        org.junit.Assert.assertTrue(localDateTime1.equals(localDateTime1));
    }

    @Test
    public void test1045() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.ReadableDateTime readableDateTime2 = null;
        org.joda.time.ReadableDateTime readableDateTime3 = null;
        org.joda.time.chrono.LimitChronology limitChronology4 = org.joda.time.chrono.LimitChronology.getInstance(chronology1, readableDateTime2, readableDateTime3);
        java.lang.Object object5 = null;
        boolean boolean6 = limitChronology4.equals(object5);
    }

    @Test
    public void test1046() throws Throwable {
        org.joda.time.Period period0 = new org.joda.time.Period(1, 1, 1, 1, 1, 1, 1, 1);
        period0.toString();
        period0.hashCode();
        org.junit.Assert.assertTrue(period0.equals(period0));
    }

    @Test
    public void test1047() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.secondOfDay();
        dateTimeField2.toString();
        dateTimeField2.hashCode();
        org.junit.Assert.assertTrue(dateTimeField2.equals(dateTimeField2));
    }

    @Test
    public void test1048() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime(chronology1);
        mutableDateTime2.toString();
        mutableDateTime2.hashCode();
        org.junit.Assert.assertTrue(mutableDateTime2.equals(mutableDateTime2));
    }

    @Test
    public void test1049() throws Throwable {
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.basicOrdinalDate();
        java.lang.StringBuffer stringBuffer1 = null;
        org.joda.time.ReadablePartial readablePartial2 = null;
        dateTimeFormatter0.printTo(stringBuffer1, readablePartial2);
    }

    @Test
    public void test1050() throws Throwable {
        org.joda.time.format.PeriodFormatter periodFormatter0 = org.joda.time.format.ISOPeriodFormat.alternateExtended();
        java.lang.String string1 = null;
        org.joda.time.MutablePeriod mutablePeriod2 = periodFormatter0.parseMutablePeriod(string1);
        mutablePeriod2.toString();
        mutablePeriod2.hashCode();
        org.junit.Assert.assertTrue(mutablePeriod2.equals(mutablePeriod2));
    }

    @Test
    public void test1051() throws Throwable {
        org.joda.time.LocalDate.Property setCopy0 = null;
        org.joda.time.LocalDate localDate1 = setCopy0.setCopy(1);
        localDate1.toString();
        localDate1.hashCode();
        org.junit.Assert.assertTrue(localDate1.equals(localDate1));
    }

    @Test
    public void test1052() throws Throwable {
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(1, 1, 1, 1, 1, 1, dateTimeZone0);
        org.joda.time.DateTime dateTime2 = dateTime1.plusHours(1);
        dateTime2.toString();
        dateTime2.hashCode();
        org.junit.Assert.assertTrue(dateTime2.equals(dateTime2));
    }

    @Test
    public void test1053() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GregorianChronology gregorianChronology2 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone1);
        gregorianChronology2.toString();
        gregorianChronology2.hashCode();
        org.junit.Assert.assertTrue(gregorianChronology2.equals(gregorianChronology2));
    }

    @Test
    public void test1054() throws Throwable {
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendFractionOfMinute(1, 1);
        dateTimeFormatterBuilder1.toString();
        dateTimeFormatterBuilder1.hashCode();
        org.junit.Assert.assertTrue(dateTimeFormatterBuilder1.equals(dateTimeFormatterBuilder1));
    }

    @Test
    public void test1055() throws Throwable {
        java.lang.Object object0 = null;
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getChronology(chronology1);
        org.joda.time.MonthDay monthDay3 = new org.joda.time.MonthDay(object0, chronology2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.MonthDay monthDay5 = monthDay3.plus(readablePeriod4);
        monthDay5.toString();
        monthDay5.hashCode();
        org.junit.Assert.assertTrue(monthDay5.equals(monthDay5));
    }

    @Test
    public void test1056() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.Interval interval2 = new org.joda.time.Interval(readableInstant0, readablePeriod1);
        org.joda.time.Interval interval3 = interval2.withStartMillis(1);
        interval3.toString();
        interval3.hashCode();
        org.junit.Assert.assertTrue(interval3.equals(interval3));
    }

    @Test
    public void test1057() throws Throwable {
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.basicDateTimeNoMillis();
        dateTimeFormatter0.toString();
        dateTimeFormatter0.hashCode();
        org.junit.Assert.assertTrue(dateTimeFormatter0.equals(dateTimeFormatter0));
    }

    @Test
    public void test1058() throws Throwable {
        org.joda.time.Period period0 = new org.joda.time.Period(1, 1);
        org.joda.time.Period period1 = period0.minusDays(1);
        period1.toString();
        period1.hashCode();
        org.junit.Assert.assertTrue(period1.equals(period1));
    }

    @Test
    public void test1059() throws Throwable {
        java.lang.Object object0 = null;
        org.joda.time.Period period1 = new org.joda.time.Period(object0);
        org.joda.time.Period period2 = period1.withWeeks(1);
        period2.toString();
        period2.hashCode();
        org.junit.Assert.assertTrue(period2.equals(period2));
    }

    @Test
    public void test1060() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.weekyears();
        org.joda.time.Partial partial3 = partial1.withFieldAddWrapped(durationFieldType2, 1);
        partial3.toString();
        partial3.hashCode();
        org.junit.Assert.assertTrue(partial3.equals(partial3));
    }

    @Test
    public void test1061() throws Throwable {
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.era();
        java.lang.String string1 = null;
        org.joda.time.IllegalFieldValueException illegalFieldValueException2 = new org.joda.time.IllegalFieldValueException(dateTimeFieldType0, string1);
        illegalFieldValueException2.toString();
        illegalFieldValueException2.hashCode();
        org.junit.Assert.assertTrue(illegalFieldValueException2.equals(illegalFieldValueException2));
    }

    @Test
    public void test1062() throws Throwable {
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getChronology(chronology1);
        mutableDateTime0.setChronology(chronology2);
    }

    @Test
    public void test1063() throws Throwable {
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval(1, 1);
        java.lang.Object object1 = mutableInterval0.clone();
        object1.toString();
        object1.hashCode();
        org.junit.Assert.assertTrue(object1.equals(object1));
    }

    @Test
    public void test1064() throws Throwable {
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.field.UnsupportedDurationField unsupportedDurationField1 = org.joda.time.field.UnsupportedDurationField.getInstance(durationFieldType0);
        long long2 = unsupportedDurationField1.add(1, 1);
    }

    @Test
    public void test1065() throws Throwable {
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight(1, 1, 1);
        org.joda.time.DurationFieldType durationFieldType1 = org.joda.time.DurationFieldType.weekyears();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.withFieldAdded(durationFieldType1, 1);
        dateMidnight2.toString();
        dateMidnight2.hashCode();
        org.junit.Assert.assertTrue(dateMidnight2.equals(dateMidnight2));
    }

    @Test
    public void test1066() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeUtils.getZone(dateTimeZone1);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(1, 1, 1, 1, 1, 1, dateTimeZone2);
        dateTime3.toString();
        dateTime3.hashCode();
        org.junit.Assert.assertTrue(dateTime3.equals(dateTime3));
    }

    @Test
    public void test1067() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeUtils.getZone(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime3.withMillisOfSecond(1);
        localDateTime4.toString();
        localDateTime4.hashCode();
        org.junit.Assert.assertTrue(localDateTime4.equals(localDateTime4));
    }

    @Test
    public void test1068() throws Throwable {
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay(1, 1, 1);
        org.joda.time.YearMonthDay.Property property1 = yearMonthDay0.dayOfMonth();
        property1.toString();
        property1.hashCode();
        org.junit.Assert.assertTrue(property1.equals(property1));
    }

    @Test
    public void test1069() throws Throwable {
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendMillisOfSecond(1);
        dateTimeFormatterBuilder1.toString();
        dateTimeFormatterBuilder1.hashCode();
        org.junit.Assert.assertTrue(dateTimeFormatterBuilder1.equals(dateTimeFormatterBuilder1));
    }

    @Test
    public void test1070() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeUtils.getZone(dateTimeZone1);
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime(dateTimeZone2);
        mutableDateTime3.addYears(1);
    }

    @Test
    public void test1071() throws Throwable {
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight(1, 1, 1);
        org.joda.time.DateMidnight.Property property1 = dateMidnight0.monthOfYear();
        property1.toString();
        property1.hashCode();
        org.junit.Assert.assertTrue(property1.equals(property1));
    }

    @Test
    public void test1072() throws Throwable {
        org.joda.time.LocalDate.Property withMinimumValue0 = null;
        org.joda.time.LocalDate localDate1 = withMinimumValue0.withMinimumValue();
        localDate1.toString();
        localDate1.hashCode();
        org.junit.Assert.assertTrue(localDate1.equals(localDate1));
    }

    @Test
    public void test1073() throws Throwable {
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.dateHourMinute();
        dateTimeFormatter0.toString();
        dateTimeFormatter0.hashCode();
        org.junit.Assert.assertTrue(dateTimeFormatter0.equals(dateTimeFormatter0));
    }

    @Test
    public void test1074() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.chrono.StrictChronology strictChronology2 = org.joda.time.chrono.StrictChronology.getInstance(chronology1);
        org.joda.time.Chronology chronology3 = strictChronology2.withUTC();
        chronology3.toString();
        chronology3.hashCode();
        org.junit.Assert.assertTrue(chronology3.equals(chronology3));
    }

    @Test
    public void test1075() throws Throwable {
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSecondsWithMillis();
        periodFormatterBuilder1.toString();
        periodFormatterBuilder1.hashCode();
        org.junit.Assert.assertTrue(periodFormatterBuilder1.equals(periodFormatterBuilder1));
    }

    @Test
    public void test1076() throws Throwable {
        org.joda.time.DateTimeField getMinimumValue0 = null;
        int int1 = getMinimumValue0.getMinimumValue();
    }

    @Test
    public void test1077() throws Throwable {
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendHours();
        periodFormatterBuilder1.toString();
        periodFormatterBuilder1.hashCode();
        org.junit.Assert.assertTrue(periodFormatterBuilder1.equals(periodFormatterBuilder1));
    }

    @Test
    public void test1078() throws Throwable {
        java.lang.Object object0 = null;
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(object0, chronology1);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime2.plusHours(1);
        localDateTime3.toString();
        localDateTime3.hashCode();
        org.junit.Assert.assertTrue(localDateTime3.equals(localDateTime3));
    }

    @Test
    public void test1079() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.minuteOfHour();
        dateTimeField2.toString();
        dateTimeField2.hashCode();
        org.junit.Assert.assertTrue(dateTimeField2.equals(dateTimeField2));
    }

    @Test
    public void test1080() throws Throwable {
        org.joda.time.DurationField durationField0 = null;
        org.joda.time.DurationFieldType durationFieldType1 = org.joda.time.DurationFieldType.weekyears();
        org.joda.time.field.ScaledDurationField scaledDurationField2 = new org.joda.time.field.ScaledDurationField(durationField0, durationFieldType1, 1);
        scaledDurationField2.toString();
        scaledDurationField2.hashCode();
        org.junit.Assert.assertTrue(scaledDurationField2.equals(scaledDurationField2));
    }

    @Test
    public void test1081() throws Throwable {
        org.joda.time.Period period0 = org.joda.time.Period.days(1);
        int int1 = period0.getYears();
    }

    @Test
    public void test1082() throws Throwable {
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.years();
        org.joda.time.field.UnsupportedDurationField unsupportedDurationField1 = org.joda.time.field.UnsupportedDurationField.getInstance(durationFieldType0);
        org.joda.time.DurationField durationField2 = null;
        int int3 = unsupportedDurationField1.compareTo(durationField2);
    }

    @Test
    public void test1083() throws Throwable {
        org.joda.time.MutablePeriod mutablePeriod0 = new org.joda.time.MutablePeriod(1, 1, 1, 1);
        org.joda.time.DurationFieldType durationFieldType1 = org.joda.time.DurationFieldType.years();
        mutablePeriod0.set(durationFieldType1, 1);
    }

    @Test
    public void test1084() throws Throwable {
        java.lang.Object object0 = null;
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getChronology(chronology1);
        org.joda.time.MonthDay monthDay3 = new org.joda.time.MonthDay(object0, chronology2);
        org.joda.time.MonthDay.Property property4 = monthDay3.monthOfYear();
        property4.toString();
        property4.hashCode();
        org.junit.Assert.assertTrue(property4.equals(property4));
    }

    @Test
    public void test1085() throws Throwable {
        org.joda.time.DurationField isPrecise0 = null;
        boolean boolean1 = isPrecise0.isPrecise();
    }

    @Test
    public void test1086() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime(chronology1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.minuteOfDay();
        property3.toString();
        property3.hashCode();
        org.junit.Assert.assertTrue(property3.equals(property3));
    }

    @Test
    public void test1087() throws Throwable {
        org.joda.time.ReadablePeriod readablePeriod0 = null;
        org.joda.time.Seconds seconds1 = org.joda.time.Seconds.standardSecondsIn(readablePeriod0);
        seconds1.toString();
        seconds1.hashCode();
        org.junit.Assert.assertTrue(seconds1.equals(seconds1));
    }

    @Test
    public void test1088() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.yearOfCentury();
        dateTimeField2.toString();
        dateTimeField2.hashCode();
        org.junit.Assert.assertTrue(dateTimeField2.equals(dateTimeField2));
    }

    @Test
    public void test1089() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getChronology(chronology2);
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        partial4.toString();
        partial4.hashCode();
        org.junit.Assert.assertTrue(partial4.equals(partial4));
    }

    @Test
    public void test1090() throws Throwable {
        org.joda.time.MutablePeriod mutablePeriod0 = new org.joda.time.MutablePeriod(1, 1, 1, 1);
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutablePeriod0.add(readableDuration1);
    }

    @Test
    public void test1091() throws Throwable {
        double double0 = org.joda.time.DateTimeUtils.toJulianDay(1);
    }

    @Test
    public void test1092() throws Throwable {
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.era();
        java.lang.String string1 = dateTimeFieldType0.toString();
        string1.toString();
        string1.hashCode();
        org.junit.Assert.assertTrue(string1.equals(string1));
    }

    @Test
    public void test1093() throws Throwable {
        java.lang.Object object0 = null;
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(object0, dateTimeZone2);
        int int4 = localDate3.getWeekOfWeekyear();
    }

    @Test
    public void test1094() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(readableInstant0, readableInstant1);
        org.joda.time.ReadableInterval readableInterval3 = null;
        org.joda.time.ReadableInterval readableInterval4 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval3);
        mutablePeriod2.add(readableInterval4);
    }

    @Test
    public void test1095() throws Throwable {
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.field.UnsupportedDurationField unsupportedDurationField1 = org.joda.time.field.UnsupportedDurationField.getInstance(durationFieldType0);
        long long2 = unsupportedDurationField1.getValueAsLong(1);
    }

    @Test
    public void test1096() throws Throwable {
        java.lang.Object object0 = null;
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime(object0, dateTimeZone2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.minus(readablePeriod4);
        localDateTime5.toString();
        localDateTime5.hashCode();
        org.junit.Assert.assertTrue(localDateTime5.equals(localDateTime5));
    }

    @Test
    public void test1097() throws Throwable {
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod(periodType0);
        mutablePeriod1.toString();
        mutablePeriod1.hashCode();
        org.junit.Assert.assertTrue(mutablePeriod1.equals(mutablePeriod1));
    }

    @Test
    public void test1098() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(1, 1, 1, 1, 1, 1, 1, chronology1);
        localDateTime2.toString();
        localDateTime2.hashCode();
        org.junit.Assert.assertTrue(localDateTime2.equals(localDateTime2));
    }

    @Test
    public void test1099() throws Throwable {
        java.util.Set<java.lang.String> set0 = org.joda.time.DateTimeZone.getAvailableIDs();
        set0.toString();
        set0.hashCode();
        org.junit.Assert.assertTrue(set0.equals(set0));
    }

    @Test
    public void test1100() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeUtils.getZone(dateTimeZone1);
        org.joda.time.chrono.EthiopicChronology ethiopicChronology3 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone2);
        ethiopicChronology3.toString();
        ethiopicChronology3.hashCode();
        org.junit.Assert.assertTrue(ethiopicChronology3.equals(ethiopicChronology3));
    }

    @Test
    public void test1101() throws Throwable {
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodPrinter periodPrinter1 = null;
        org.joda.time.format.PeriodParser periodParser2 = null;
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.append(periodPrinter1, periodParser2);
        periodFormatterBuilder3.toString();
        periodFormatterBuilder3.hashCode();
        org.junit.Assert.assertTrue(periodFormatterBuilder3.equals(periodFormatterBuilder3));
    }

    @Test
    public void test1102() throws Throwable {
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.era();
        java.lang.String string1 = null;
        org.joda.time.IllegalFieldValueException illegalFieldValueException2 = new org.joda.time.IllegalFieldValueException(dateTimeFieldType0, string1);
        java.lang.Number number3 = illegalFieldValueException2.getIllegalNumberValue();
        number3.toString();
        number3.hashCode();
        org.junit.Assert.assertTrue(number3.equals(number3));
    }

    @Test
    public void test1103() throws Throwable {
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Hours hours3 = org.joda.time.Hours.hoursIn(readableInterval2);
        org.joda.time.Hours hours4 = hours3.plus(1);
        hours4.toString();
        hours4.hashCode();
        org.junit.Assert.assertTrue(hours4.equals(hours4));
    }

    @Test
    public void test1104() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInstant0, readableInstant1);
        chronology2.toString();
        chronology2.hashCode();
        org.junit.Assert.assertTrue(chronology2.equals(chronology2));
    }

    @Test
    public void test1105() throws Throwable {
        org.joda.time.Period period0 = org.joda.time.Period.hours(1);
        org.joda.time.Period period1 = period0.plusMillis(1);
        period1.toString();
        period1.hashCode();
        org.junit.Assert.assertTrue(period1.equals(period1));
    }

    @Test
    public void test1106() throws Throwable {
        org.joda.time.DateTimeField getAsText0 = null;
        org.joda.time.ReadablePartial readablePartial1 = null;
        java.util.Locale locale2 = null;
        java.lang.String string3 = getAsText0.getAsText(readablePartial1, locale2);
        string3.toString();
        string3.hashCode();
        org.junit.Assert.assertTrue(string3.equals(string3));
    }

    @Test
    public void test1107() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.time();
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod(readableInstant0, readableInstant1, periodType2);
        mutablePeriod3.setYears(1);
    }

    @Test
    public void test1108() throws Throwable {
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight(1);
        dateMidnight0.toString();
        dateMidnight0.hashCode();
        org.junit.Assert.assertTrue(dateMidnight0.equals(dateMidnight0));
    }

    @Test
    public void test1109() throws Throwable {
        org.joda.time.DateTimeField roundCeiling0 = null;
        long long1 = roundCeiling0.roundCeiling(1);
    }

    @Test
    public void test1110() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(1, 1, chronology1);
        org.joda.time.ReadableInterval readableInterval3 = null;
        org.joda.time.ReadableInterval readableInterval4 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval3);
        mutableInterval2.setInterval(readableInterval4);
    }

    @Test
    public void test1111() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(1, 1, 1, 1, 1, dateTimeZone1);
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.DateTime dateTime4 = dateTime2.minus(readableDuration3);
        dateTime4.toString();
        dateTime4.hashCode();
        org.junit.Assert.assertTrue(dateTime4.equals(dateTime4));
    }

    @Test
    public void test1112() throws Throwable {
        java.lang.Object object0 = null;
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay(object0);
        org.joda.time.TimeOfDay timeOfDay2 = timeOfDay1.plusMillis(1);
        timeOfDay2.toString();
        timeOfDay2.hashCode();
        org.junit.Assert.assertTrue(timeOfDay2.equals(timeOfDay2));
    }

    @Test
    public void test1113() throws Throwable {
        org.joda.time.Duration duration0 = org.joda.time.Duration.standardSeconds(1);
        duration0.toString();
        duration0.hashCode();
        org.junit.Assert.assertTrue(duration0.equals(duration0));
    }

    @Test
    public void test1114() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.now(chronology1);
        org.joda.time.LocalTime localTime3 = localTime2.withSecondOfMinute(1);
        localTime3.toString();
        localTime3.hashCode();
        org.junit.Assert.assertTrue(localTime3.equals(localTime3));
    }

    @Test
    public void test1115() throws Throwable {
        org.joda.time.format.PeriodFormatter periodFormatter0 = org.joda.time.format.ISOPeriodFormat.alternateExtended();
        java.util.Locale locale1 = periodFormatter0.getLocale();
        locale1.toString();
        locale1.hashCode();
        org.junit.Assert.assertTrue(locale1.equals(locale1));
    }

    @Test
    public void test1116() throws Throwable {
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.basicOrdinalDateTimeNoMillis();
        java.lang.StringBuffer stringBuffer1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        dateTimeFormatter0.printTo(stringBuffer1, readableInstant2);
    }

    @Test
    public void test1117() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.yearDay();
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod(readableInstant0, readableInstant1, periodType2);
        org.joda.time.MutablePeriod mutablePeriod4 = mutablePeriod3.copy();
        mutablePeriod4.toString();
        mutablePeriod4.hashCode();
        org.junit.Assert.assertTrue(mutablePeriod4.equals(mutablePeriod4));
    }

    @Test
    public void test1118() throws Throwable {
        org.joda.time.field.UnsupportedDateTimeField addWrapPartial0 = null;
        org.joda.time.ReadablePartial readablePartial1 = null;
        int[] intArr2 = null;
        int[] intArr3 = addWrapPartial0.addWrapPartial(readablePartial1, 1, intArr2, 1);
        intArr3.toString();
        intArr3.hashCode();
        org.junit.Assert.assertTrue(intArr3.equals(intArr3));
    }

    @Test
    public void test1119() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(1, chronology0);
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight1.plusDays(1);
        dateMidnight2.toString();
        dateMidnight2.hashCode();
        org.junit.Assert.assertTrue(dateMidnight2.equals(dateMidnight2));
    }

    @Test
    public void test1120() throws Throwable {
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime(1, 1, 1, 1, 1, 1);
        org.joda.time.DateTime dateTime1 = dateTime0.toDateTimeISO();
        dateTime1.toString();
        dateTime1.hashCode();
        org.junit.Assert.assertTrue(dateTime1.equals(dateTime1));
    }

    @Test
    public void test1121() throws Throwable {
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.time();
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInstant1, readableInstant2);
        org.joda.time.Period period4 = new org.joda.time.Period(1, 1, periodType0, chronology3);
        period4.toString();
        period4.hashCode();
        org.junit.Assert.assertTrue(period4.equals(period4));
    }

    @Test
    public void test1122() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.minutes();
        org.joda.time.Period period3 = new org.joda.time.Period(readableInstant0, readableDuration1, periodType2);
        period3.toString();
        period3.hashCode();
        org.junit.Assert.assertTrue(period3.equals(period3));
    }

    @Test
    public void test1123() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeUtils.getZone(dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight3 = org.joda.time.DateMidnight.now(dateTimeZone2);
        dateMidnight3.toString();
        dateMidnight3.hashCode();
        org.junit.Assert.assertTrue(dateMidnight3.equals(dateMidnight3));
    }

    @Test
    public void test1124() throws Throwable {
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime(1, 1, 1, 1, 1, 1, 1);
        int int1 = localDateTime0.getWeekOfWeekyear();
    }

    @Test
    public void test1125() throws Throwable {
        int int0 = org.joda.time.field.FieldUtils.safeToInt(1);
    }

    @Test
    public void test1126() throws Throwable {
        org.joda.time.field.UnsupportedDateTimeField getAsText0 = null;
        java.util.Locale locale1 = null;
        java.lang.String string2 = getAsText0.getAsText(1, locale1);
        string2.toString();
        string2.hashCode();
        org.junit.Assert.assertTrue(string2.equals(string2));
    }

    @Test
    public void test1127() throws Throwable {
        java.lang.String string0 = null;
        org.joda.time.Instant instant1 = org.joda.time.Instant.parse(string0);
        instant1.toString();
        instant1.hashCode();
        org.junit.Assert.assertTrue(instant1.equals(instant1));
    }

    @Test
    public void test1128() throws Throwable {
        org.joda.time.LocalDate.Property roundHalfEvenCopy0 = null;
        org.joda.time.LocalDate localDate1 = roundHalfEvenCopy0.roundHalfEvenCopy();
        localDate1.toString();
        localDate1.hashCode();
        org.junit.Assert.assertTrue(localDate1.equals(localDate1));
    }

    @Test
    public void test1129() throws Throwable {
        org.joda.time.field.DelegatedDateTimeField isSupported0 = null;
        boolean boolean1 = isSupported0.isSupported();
    }

    @Test
    public void test1130() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        long long2 = dateTimeZone1.adjustOffset(1, true);
    }

    @Test
    public void test1131() throws Throwable {
        org.joda.time.tz.ZoneInfoProvider zoneInfoProvider0 = new org.joda.time.tz.ZoneInfoProvider();
        zoneInfoProvider0.toString();
        zoneInfoProvider0.hashCode();
        org.junit.Assert.assertTrue(zoneInfoProvider0.equals(zoneInfoProvider0));
    }

    @Test
    public void test1132() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(1, 1, 1, 1, 1, 1, 1, chronology1);
        int int3 = localDateTime2.getEra();
    }

    @Test
    public void test1133() throws Throwable {
        org.joda.time.field.ZeroIsMaxDateTimeField roundFloor0 = null;
        long long1 = roundFloor0.roundFloor(1);
    }

    @Test
    public void test1134() throws Throwable {
        org.joda.time.field.ScaledDurationField getValue0 = null;
        int int1 = getValue0.getValue(1);
    }

    @Test
    public void test1135() throws Throwable {
        java.lang.String string0 = null;
        java.lang.Number number1 = null;
        java.lang.Number number2 = null;
        java.lang.Number number3 = null;
        org.joda.time.IllegalFieldValueException illegalFieldValueException4 = new org.joda.time.IllegalFieldValueException(string0, number1, number2, number3);
        java.lang.String string5 = illegalFieldValueException4.getFieldName();
        string5.toString();
        string5.hashCode();
        org.junit.Assert.assertTrue(string5.equals(string5));
    }

    @Test
    public void test1136() throws Throwable {
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.printZeroRarelyLast();
        periodFormatterBuilder1.toString();
        periodFormatterBuilder1.hashCode();
        org.junit.Assert.assertTrue(periodFormatterBuilder1.equals(periodFormatterBuilder1));
    }

    @Test
    public void test1137() throws Throwable {
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay(1, 1, 1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArr1 = yearMonthDay0.getFieldTypes();
        dateTimeFieldTypeArr1.toString();
        dateTimeFieldTypeArr1.hashCode();
        org.junit.Assert.assertTrue(dateTimeFieldTypeArr1.equals(dateTimeFieldTypeArr1));
    }

    @Test
    public void test1138() throws Throwable {
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Hours hours3 = org.joda.time.Hours.hoursIn(readableInterval2);
        int int4 = hours3.getHours();
    }

    @Test
    public void test1139() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInstant0, readableInstant1);
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth(1, 1, chronology2);
        yearMonth3.toString();
        yearMonth3.hashCode();
        org.junit.Assert.assertTrue(yearMonth3.equals(yearMonth3));
    }

    @Test
    public void test1140() throws Throwable {
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.yearMonth();
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeUtils.getZone(dateTimeZone2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter0.withZone(dateTimeZone3);
        dateTimeFormatter4.toString();
        dateTimeFormatter4.hashCode();
        org.junit.Assert.assertTrue(dateTimeFormatter4.equals(dateTimeFormatter4));
    }

    @Test
    public void test1141() throws Throwable {
        org.joda.time.chrono.BuddhistChronology buddhistChronology0 = org.joda.time.chrono.BuddhistChronology.getInstance();
        int int1 = buddhistChronology0.hashCode();
    }

    @Test
    public void test1142() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay(1, 1, 1, chronology1);
        org.joda.time.DateTime dateTime3 = timeOfDay2.toDateTimeToday();
        dateTime3.toString();
        dateTime3.hashCode();
        org.junit.Assert.assertTrue(dateTime3.equals(dateTime3));
    }

    @Test
    public void test1143() throws Throwable {
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Hours hours3 = org.joda.time.Hours.hoursIn(readableInterval2);
        java.lang.String string4 = hours3.toString();
        string4.toString();
        string4.hashCode();
        org.junit.Assert.assertTrue(string4.equals(string4));
    }

    @Test
    public void test1144() throws Throwable {
        java.lang.Object object0 = null;
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getChronology(chronology1);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(object0, chronology2);
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeUtils.getZone(dateTimeZone5);
        org.joda.time.DateMidnight dateMidnight7 = localDate3.toDateMidnight(dateTimeZone6);
        dateMidnight7.toString();
        dateMidnight7.hashCode();
        org.junit.Assert.assertTrue(dateMidnight7.equals(dateMidnight7));
    }

    @Test
    public void test1145() throws Throwable {
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.field.UnsupportedDurationField unsupportedDurationField1 = org.joda.time.field.UnsupportedDurationField.getInstance(durationFieldType0);
        boolean boolean2 = unsupportedDurationField1.isPrecise();
    }

    @Test
    public void test1146() throws Throwable {
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.days();
        periodType0.toString();
        periodType0.hashCode();
        org.junit.Assert.assertTrue(periodType0.equals(periodType0));
    }

    @Test
    public void test1147() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInstant0, readableInstant1);
        org.joda.time.Period period3 = new org.joda.time.Period(1, 1, chronology2);
        period3.toString();
        period3.hashCode();
        org.junit.Assert.assertTrue(period3.equals(period3));
    }

    @Test
    public void test1148() throws Throwable {
        org.joda.time.field.UnsupportedDateTimeField set0 = null;
        org.joda.time.ReadablePartial readablePartial1 = null;
        int[] intArr2 = null;
        java.lang.String string3 = null;
        java.util.Locale locale4 = null;
        int[] intArr5 = set0.set(readablePartial1, 1, intArr2, string3, locale4);
        intArr5.toString();
        intArr5.hashCode();
        org.junit.Assert.assertTrue(intArr5.equals(intArr5));
    }

    @Test
    public void test1149() throws Throwable {
        java.lang.Object object0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(object0);
        localDate1.toString();
        localDate1.hashCode();
        org.junit.Assert.assertTrue(localDate1.equals(localDate1));
    }

    @Test
    public void test1150() throws Throwable {
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(readableDuration0, readableInstant1);
        java.lang.Object object3 = mutablePeriod2.clone();
        object3.toString();
        object3.hashCode();
        org.junit.Assert.assertTrue(object3.equals(object3));
    }

    @Test
    public void test1151() throws Throwable {
        org.joda.time.chrono.EthiopicChronology ethiopicChronology0 = org.joda.time.chrono.EthiopicChronology.getInstance();
        ethiopicChronology0.toString();
        ethiopicChronology0.hashCode();
        org.junit.Assert.assertTrue(ethiopicChronology0.equals(ethiopicChronology0));
    }

    @Test
    public void test1152() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInstant0, readableInstant1);
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth(1, 1, chronology2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.YearMonth yearMonth5 = yearMonth3.plus(readablePeriod4);
        yearMonth5.toString();
        yearMonth5.hashCode();
        org.junit.Assert.assertTrue(yearMonth5.equals(yearMonth5));
    }

    @Test
    public void test1153() throws Throwable {
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.dateTimeNoMillis();
        java.lang.Appendable appendable1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        dateTimeFormatter0.printTo(appendable1, readableInstant2);
    }

    @Test
    public void test1154() throws Throwable {
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(dateTimeZone0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        boolean boolean3 = localTime1.isSupported(dateTimeFieldType2);
    }

    @Test
    public void test1155() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime(1, chronology1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.weekyear();
        property3.toString();
        property3.hashCode();
        org.junit.Assert.assertTrue(property3.equals(property3));
    }

    @Test
    public void test1156() throws Throwable {
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime(1, 1, 1, 1, 1, 1);
        org.joda.time.DateTime.Property property1 = dateTime0.yearOfEra();
        property1.toString();
        property1.hashCode();
        org.junit.Assert.assertTrue(property1.equals(property1));
    }

    @Test
    public void test1157() throws Throwable {
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime(1, 1, 1, 1, 1);
        org.joda.time.DateTime dateTime1 = dateTime0.minus(1);
        dateTime1.toString();
        dateTime1.hashCode();
        org.junit.Assert.assertTrue(dateTime1.equals(dateTime1));
    }

    @Test
    public void test1158() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone2 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone1);
        long long3 = cachedDateTimeZone2.previousTransition(1);
    }

    @Test
    public void test1159() throws Throwable {
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.weekyearWeek();
        dateTimeFormatter0.toString();
        dateTimeFormatter0.hashCode();
        org.junit.Assert.assertTrue(dateTimeFormatter0.equals(dateTimeFormatter0));
    }

    @Test
    public void test1160() throws Throwable {
        org.joda.time.DateTimeField dateTimeField0 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.dayOfMonth();
        org.joda.time.field.DelegatedDateTimeField delegatedDateTimeField2 = new org.joda.time.field.DelegatedDateTimeField(dateTimeField0, dateTimeFieldType1);
        delegatedDateTimeField2.toString();
        delegatedDateTimeField2.hashCode();
        org.junit.Assert.assertTrue(delegatedDateTimeField2.equals(delegatedDateTimeField2));
    }

    @Test
    public void test1161() throws Throwable {
        org.joda.time.field.ScaledDurationField add0 = null;
        long long1 = add0.add(1, 1);
    }

    @Test
    public void test1162() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.ReadableDateTime readableDateTime2 = null;
        org.joda.time.ReadableDateTime readableDateTime3 = null;
        org.joda.time.chrono.LimitChronology limitChronology4 = org.joda.time.chrono.LimitChronology.getInstance(chronology1, readableDateTime2, readableDateTime3);
        org.joda.time.DateTime dateTime5 = limitChronology4.getLowerLimit();
        dateTime5.toString();
        dateTime5.hashCode();
        org.junit.Assert.assertTrue(dateTime5.equals(dateTime5));
    }

    @Test
    public void test1163() throws Throwable {
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        localDate0.toString();
        localDate0.hashCode();
        org.junit.Assert.assertTrue(localDate0.equals(localDate0));
    }

    @Test
    public void test1164() throws Throwable {
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay(1, 1, 1, 1);
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.TimeOfDay timeOfDay2 = timeOfDay0.minus(readablePeriod1);
        timeOfDay2.toString();
        timeOfDay2.hashCode();
        org.junit.Assert.assertTrue(timeOfDay2.equals(timeOfDay2));
    }

    @Test
    public void test1165() throws Throwable {
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.field.UnsupportedDurationField unsupportedDurationField1 = org.joda.time.field.UnsupportedDurationField.getInstance(durationFieldType0);
        int int2 = unsupportedDurationField1.hashCode();
    }

    @Test
    public void test1166() throws Throwable {
        org.joda.time.Partial.Property getPartial0 = null;
        org.joda.time.Partial partial1 = getPartial0.getPartial();
        partial1.toString();
        partial1.hashCode();
        org.junit.Assert.assertTrue(partial1.equals(partial1));
    }

    @Test
    public void test1167() throws Throwable {
        org.joda.time.format.PeriodFormatter periodFormatter0 = org.joda.time.format.PeriodFormat.getDefault();
        periodFormatter0.toString();
        periodFormatter0.hashCode();
        org.junit.Assert.assertTrue(periodFormatter0.equals(periodFormatter0));
    }

    @Test
    public void test1168() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime(chronology1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.millisOfDay();
        property3.toString();
        property3.hashCode();
        org.junit.Assert.assertTrue(property3.equals(property3));
    }

    @Test
    public void test1169() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate2 = localDate1.withYear(1);
        localDate2.toString();
        localDate2.hashCode();
        org.junit.Assert.assertTrue(localDate2.equals(localDate2));
    }

    @Test
    public void test1170() throws Throwable {
        org.joda.time.field.DecoratedDurationField getDifferenceAsLong0 = null;
        long long1 = getDifferenceAsLong0.getDifferenceAsLong(1, 1);
    }

    @Test
    public void test1171() throws Throwable {
        boolean boolean0 = org.joda.time.tz.ZoneInfoLogger.verbose();
    }

    @Test
    public void test1172() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay(chronology0);
        org.joda.time.MonthDay.Property property2 = monthDay1.monthOfYear();
        property2.toString();
        property2.hashCode();
        org.junit.Assert.assertTrue(property2.equals(property2));
    }

    @Test
    public void test1173() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableInstant0, readableDuration1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        mutableInterval2.setPeriodBeforeEnd(readablePeriod3);
    }

    @Test
    public void test1174() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1, dateTimeZone1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.minus(readablePeriod3);
        dateMidnight4.toString();
        dateMidnight4.hashCode();
        org.junit.Assert.assertTrue(dateMidnight4.equals(dateMidnight4));
    }

    @Test
    public void test1175() throws Throwable {
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.days();
        org.joda.time.PeriodType periodType1 = periodType0.withMonthsRemoved();
        periodType1.toString();
        periodType1.hashCode();
        org.junit.Assert.assertTrue(periodType1.equals(periodType1));
    }

    @Test
    public void test1176() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.MutableDateTime mutableDateTime2 = org.joda.time.MutableDateTime.now(chronology1);
        mutableDateTime2.setMillisOfDay(1);
    }

    @Test
    public void test1177() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(1, 1, 1, 1, 1, dateTimeZone1);
        org.joda.time.YearMonthDay yearMonthDay3 = dateTime2.toYearMonthDay();
        yearMonthDay3.toString();
        yearMonthDay3.hashCode();
        org.junit.Assert.assertTrue(yearMonthDay3.equals(yearMonthDay3));
    }

    @Test
    public void test1178() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.now(chronology1);
        org.joda.time.LocalTime localTime3 = localTime2.minusHours(1);
        localTime3.toString();
        localTime3.hashCode();
        org.junit.Assert.assertTrue(localTime3.equals(localTime3));
    }

    @Test
    public void test1179() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeUtils.getZone(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone2);
        int int4 = localDateTime3.getDayOfWeek();
    }

    @Test
    public void test1180() throws Throwable {
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay(1, 1, 1);
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.YearMonthDay yearMonthDay2 = yearMonthDay0.minus(readablePeriod1);
        yearMonthDay2.toString();
        yearMonthDay2.hashCode();
        org.junit.Assert.assertTrue(yearMonthDay2.equals(yearMonthDay2));
    }

    @Test
    public void test1181() throws Throwable {
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.basicDateTimeNoMillis();
        java.lang.String string1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = dateTimeFormatter0.parseMutableDateTime(string1);
        mutableDateTime2.toString();
        mutableDateTime2.hashCode();
        org.junit.Assert.assertTrue(mutableDateTime2.equals(mutableDateTime2));
    }

    @Test
    public void test1182() throws Throwable {
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.weekyears();
        java.lang.String string1 = null;
        org.joda.time.IllegalFieldValueException illegalFieldValueException2 = new org.joda.time.IllegalFieldValueException(durationFieldType0, string1);
        java.lang.Number number3 = illegalFieldValueException2.getIllegalNumberValue();
        number3.toString();
        number3.hashCode();
        org.junit.Assert.assertTrue(number3.equals(number3));
    }

    @Test
    public void test1183() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(1, chronology1);
        org.joda.time.DateTime dateTime3 = dateTime2.minus(1);
        dateTime3.toString();
        dateTime3.hashCode();
        org.junit.Assert.assertTrue(dateTime3.equals(dateTime3));
    }

    @Test
    public void test1184() throws Throwable {
        java.lang.Object object0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(object0);
        mutableDateTime1.toString();
        mutableDateTime1.hashCode();
        org.junit.Assert.assertTrue(mutableDateTime1.equals(mutableDateTime1));
    }

    @Test
    public void test1185() throws Throwable {
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.dateTime();
        dateTimeFormatter0.toString();
        dateTimeFormatter0.hashCode();
        org.junit.Assert.assertTrue(dateTimeFormatter0.equals(dateTimeFormatter0));
    }

    @Test
    public void test1186() throws Throwable {
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendHalfdayOfDayText();
        dateTimeFormatterBuilder1.toString();
        dateTimeFormatterBuilder1.hashCode();
        org.junit.Assert.assertTrue(dateTimeFormatterBuilder1.equals(dateTimeFormatterBuilder1));
    }

    @Test
    public void test1187() throws Throwable {
        org.joda.time.PeriodType periodType0 = null;
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(1, 1, periodType0, chronology1);
        mutablePeriod2.addDays(1);
    }

    @Test
    public void test1188() throws Throwable {
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime(1, 1, 1, 1, 1, 1, 1);
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withDurationAdded(readableDuration1, 1);
        localDateTime2.toString();
        localDateTime2.hashCode();
        org.junit.Assert.assertTrue(localDateTime2.equals(localDateTime2));
    }

    @Test
    public void test1189() throws Throwable {
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendMonthOfYear(1);
        dateTimeFormatterBuilder1.toString();
        dateTimeFormatterBuilder1.hashCode();
        org.junit.Assert.assertTrue(dateTimeFormatterBuilder1.equals(dateTimeFormatterBuilder1));
    }

    @Test
    public void test1190() throws Throwable {
        java.lang.Object object0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(object0);
        org.joda.time.LocalDate localDate2 = localDate1.withDayOfWeek(1);
        localDate2.toString();
        localDate2.hashCode();
        org.junit.Assert.assertTrue(localDate2.equals(localDate2));
    }

    @Test
    public void test1191() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.minuteOfHour();
        property3.toString();
        property3.hashCode();
        org.junit.Assert.assertTrue(property3.equals(property3));
    }

    @Test
    public void test1192() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.YearMonth yearMonth2 = new org.joda.time.YearMonth(1, chronology1);
        yearMonth2.toString();
        yearMonth2.hashCode();
        org.junit.Assert.assertTrue(yearMonth2.equals(yearMonth2));
    }

    @Test
    public void test1193() throws Throwable {
        java.lang.Object object0 = null;
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(object0, dateTimeZone2);
        org.joda.time.ReadablePartial readablePartial4 = null;
        org.joda.time.LocalDate localDate5 = localDate3.withFields(readablePartial4);
        localDate5.toString();
        localDate5.hashCode();
        org.junit.Assert.assertTrue(localDate5.equals(localDate5));
    }

    @Test
    public void test1194() throws Throwable {
        org.joda.time.field.UnsupportedDateTimeField roundHalfEven0 = null;
        long long1 = roundHalfEven0.roundHalfEven(1);
    }

    @Test
    public void test1195() throws Throwable {
        org.joda.time.chrono.IslamicChronology islamicChronology0 = org.joda.time.chrono.IslamicChronology.getInstance();
        int int1 = islamicChronology0.hashCode();
    }

    @Test
    public void test1196() throws Throwable {
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.Period period3 = new org.joda.time.Period(readableDuration0, readableInstant1, periodType2);
        org.joda.time.Weeks weeks4 = period3.toStandardWeeks();
        weeks4.toString();
        weeks4.hashCode();
        org.junit.Assert.assertTrue(weeks4.equals(weeks4));
    }

    @Test
    public void test1197() throws Throwable {
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.yearOfEra();
        java.lang.String string1 = null;
        org.joda.time.IllegalFieldValueException illegalFieldValueException2 = new org.joda.time.IllegalFieldValueException(dateTimeFieldType0, string1);
        illegalFieldValueException2.toString();
        illegalFieldValueException2.hashCode();
        org.junit.Assert.assertTrue(illegalFieldValueException2.equals(illegalFieldValueException2));
    }

    @Test
    public void test1198() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod(1, chronology0);
        mutablePeriod1.add(1, 1, 1, 1, 1, 1, 1, 1);
    }

    @Test
    public void test1199() throws Throwable {
        org.joda.time.field.DividedDateTimeField getDivisor0 = null;
        int int1 = getDivisor0.getDivisor();
    }

    @Test
    public void test1200() throws Throwable {
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.time();
        org.joda.time.Period period1 = new org.joda.time.Period(1, 1, periodType0);
        period1.toString();
        period1.hashCode();
        org.junit.Assert.assertTrue(period1.equals(period1));
    }

    @Test
    public void test1201() throws Throwable {
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Hours hours3 = org.joda.time.Hours.hoursIn(readableInterval2);
        org.joda.time.Duration duration4 = hours3.toStandardDuration();
        duration4.toString();
        duration4.hashCode();
        org.junit.Assert.assertTrue(duration4.equals(duration4));
    }

    @Test
    public void test1202() throws Throwable {
        java.lang.Object object0 = null;
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay(object0);
        org.joda.time.TimeOfDay timeOfDay2 = timeOfDay1.withMillisOfSecond(1);
        timeOfDay2.toString();
        timeOfDay2.hashCode();
        org.junit.Assert.assertTrue(timeOfDay2.equals(timeOfDay2));
    }

    @Test
    public void test1203() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        java.lang.String string2 = localDate1.toString();
        string2.toString();
        string2.hashCode();
        org.junit.Assert.assertTrue(string2.equals(string2));
    }

    @Test
    public void test1204() throws Throwable {
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.minutes(1);
        org.joda.time.PeriodType periodType1 = minutes0.getPeriodType();
        periodType1.toString();
        periodType1.hashCode();
        org.junit.Assert.assertTrue(periodType1.equals(periodType1));
    }

    @Test
    public void test1205() throws Throwable {
        org.joda.time.TimeOfDay.Property getTimeOfDay0 = null;
        org.joda.time.TimeOfDay timeOfDay1 = getTimeOfDay0.getTimeOfDay();
        timeOfDay1.toString();
        timeOfDay1.hashCode();
        org.junit.Assert.assertTrue(timeOfDay1.equals(timeOfDay1));
    }

    @Test
    public void test1206() throws Throwable {
        java.lang.String string0 = null;
        org.joda.time.Years years1 = org.joda.time.Years.parseYears(string0);
        int int2 = years1.getYears();
    }

    @Test
    public void test1207() throws Throwable {
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.yearMonth();
        org.joda.time.Chronology chronology1 = dateTimeFormatter0.getChronology();
        chronology1.toString();
        chronology1.hashCode();
        org.junit.Assert.assertTrue(chronology1.equals(chronology1));
    }

    @Test
    public void test1208() throws Throwable {
        org.joda.time.DateTimeField getAsShortText0 = null;
        org.joda.time.ReadablePartial readablePartial1 = null;
        java.util.Locale locale2 = null;
        java.lang.String string3 = getAsShortText0.getAsShortText(readablePartial1, 1, locale2);
        string3.toString();
        string3.hashCode();
        org.junit.Assert.assertTrue(string3.equals(string3));
    }

    @Test
    public void test1209() throws Throwable {
        org.joda.time.MonthDay monthDay0 = new org.joda.time.MonthDay(1, 1);
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.MonthDay monthDay2 = monthDay0.withPeriodAdded(readablePeriod1, 1);
        monthDay2.toString();
        monthDay2.hashCode();
        org.junit.Assert.assertTrue(monthDay2.equals(monthDay2));
    }

    @Test
    public void test1210() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(1, 1, 1, 1, 1, dateTimeZone1);
        org.joda.time.DateTime dateTime3 = dateTime2.plusYears(1);
        dateTime3.toString();
        dateTime3.hashCode();
        org.junit.Assert.assertTrue(dateTime3.equals(dateTime3));
    }

    @Test
    public void test1211() throws Throwable {
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime(1, 1, 1, 1, 1);
        org.joda.time.DateTime dateTime1 = dateTime0.toDateTimeISO();
        dateTime1.toString();
        dateTime1.hashCode();
        org.junit.Assert.assertTrue(dateTime1.equals(dateTime1));
    }

    @Test
    public void test1212() throws Throwable {
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.longDate();
        dateTimeFormatter0.toString();
        dateTimeFormatter0.hashCode();
        org.junit.Assert.assertTrue(dateTimeFormatter0.equals(dateTimeFormatter0));
    }

    @Test
    public void test1213() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay(1, 1, 1, chronology1);
        java.util.TimeZone timeZone3 = null;
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeUtils.getZone(dateTimeZone4);
        org.joda.time.DateTime dateTime6 = timeOfDay2.toDateTimeToday(dateTimeZone5);
        dateTime6.toString();
        dateTime6.hashCode();
        org.junit.Assert.assertTrue(dateTime6.equals(dateTime6));
    }

    @Test
    public void test1214() throws Throwable {
        org.joda.time.Instant instant0 = new org.joda.time.Instant(1);
        instant0.toString();
        instant0.hashCode();
        org.junit.Assert.assertTrue(instant0.equals(instant0));
    }

    @Test
    public void test1215() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInstant0, readableInstant1);
        org.joda.time.LocalTime localTime3 = org.joda.time.LocalTime.now(chronology2);
        localTime3.toString();
        localTime3.hashCode();
        org.junit.Assert.assertTrue(localTime3.equals(localTime3));
    }

    @Test
    public void test1216() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.hourOfDay();
        dateTimeField2.toString();
        dateTimeField2.hashCode();
        org.junit.Assert.assertTrue(dateTimeField2.equals(dateTimeField2));
    }

    @Test
    public void test1217() throws Throwable {
        java.lang.Object object0 = null;
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.yearDay();
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(object0, periodType1);
        mutablePeriod2.toString();
        mutablePeriod2.hashCode();
        org.junit.Assert.assertTrue(mutablePeriod2.equals(mutablePeriod2));
    }

    @Test
    public void test1218() throws Throwable {
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay(1, 1, 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.YearMonthDay.Property property2 = yearMonthDay0.property(dateTimeFieldType1);
        property2.toString();
        property2.hashCode();
        org.junit.Assert.assertTrue(property2.equals(property2));
    }

    @Test
    public void test1219() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime(chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime2.property(dateTimeFieldType3);
        property4.toString();
        property4.hashCode();
        org.junit.Assert.assertTrue(property4.equals(property4));
    }

    @Test
    public void test1220() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone2 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone1);
        java.lang.String string3 = cachedDateTimeZone2.getNameKey(1);
        string3.toString();
        string3.hashCode();
        org.junit.Assert.assertTrue(string3.equals(string3));
    }

    @Test
    public void test1221() throws Throwable {
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay(1, 1, 1);
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.YearMonthDay yearMonthDay2 = yearMonthDay0.plus(readablePeriod1);
        yearMonthDay2.toString();
        yearMonthDay2.hashCode();
        org.junit.Assert.assertTrue(yearMonthDay2.equals(yearMonthDay2));
    }

    @Test
    public void test1222() throws Throwable {
        org.joda.time.YearMonthDay.Property addWrapFieldToCopy0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = addWrapFieldToCopy0.addWrapFieldToCopy(1);
        yearMonthDay1.toString();
        yearMonthDay1.hashCode();
        org.junit.Assert.assertTrue(yearMonthDay1.equals(yearMonthDay1));
    }

    @Test
    public void test1223() throws Throwable {
        java.lang.Object object0 = null;
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(object0, dateTimeZone2);
        int int4 = localDate3.hashCode();
    }

    @Test
    public void test1224() throws Throwable {
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.era();
        java.lang.String string1 = null;
        org.joda.time.IllegalFieldValueException illegalFieldValueException2 = new org.joda.time.IllegalFieldValueException(dateTimeFieldType0, string1);
        java.lang.String string3 = illegalFieldValueException2.getFieldName();
        string3.toString();
        string3.hashCode();
        org.junit.Assert.assertTrue(string3.equals(string3));
    }

    @Test
    public void test1225() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeUtils.getZone(dateTimeZone1);
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth(dateTimeZone2);
        yearMonth3.toString();
        yearMonth3.hashCode();
        org.junit.Assert.assertTrue(yearMonth3.equals(yearMonth3));
    }

    @Test
    public void test1226() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.DurationField durationField2 = chronology1.weekyears();
        durationField2.toString();
        durationField2.hashCode();
        org.junit.Assert.assertTrue(durationField2.equals(durationField2));
    }

    @Test
    public void test1227() throws Throwable {
        org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.fromMillisOfDay(1);
        org.joda.time.LocalTime localTime1 = localTime0.minusSeconds(1);
        localTime1.toString();
        localTime1.hashCode();
        org.junit.Assert.assertTrue(localTime1.equals(localTime1));
    }

    @Test
    public void test1228() throws Throwable {
        org.joda.time.field.DecoratedDurationField getUnitMillis0 = null;
        long long1 = getUnitMillis0.getUnitMillis();
    }

    @Test
    public void test1229() throws Throwable {
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime(1, 1, 1);
        org.joda.time.DurationFieldType durationFieldType1 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.LocalTime localTime2 = localTime0.withFieldAdded(durationFieldType1, 1);
        localTime2.toString();
        localTime2.hashCode();
        org.junit.Assert.assertTrue(localTime2.equals(localTime2));
    }

    @Test
    public void test1230() throws Throwable {
        org.joda.time.Duration duration0 = org.joda.time.Duration.standardSeconds(1);
        org.joda.time.Duration duration1 = duration0.withDurationAdded(1, 1);
        duration1.toString();
        duration1.hashCode();
        org.junit.Assert.assertTrue(duration1.equals(duration1));
    }

    @Test
    public void test1231() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(1, chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.dayOfMonth();
        boolean boolean4 = localDate2.isSupported(dateTimeFieldType3);
    }

    @Test
    public void test1232() throws Throwable {
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.dateHourMinuteSecond();
        int int1 = dateTimeFormatter0.getDefaultYear();
    }

    @Test
    public void test1233() throws Throwable {
        org.joda.time.format.PeriodFormatter periodFormatter0 = org.joda.time.format.PeriodFormat.wordBased();
        java.lang.String string1 = null;
        org.joda.time.Period period2 = periodFormatter0.parsePeriod(string1);
        period2.toString();
        period2.hashCode();
        org.junit.Assert.assertTrue(period2.equals(period2));
    }

    @Test
    public void test1234() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.LocalDate localDate2 = org.joda.time.LocalDate.now(chronology1);
        org.joda.time.LocalDate.Property property3 = localDate2.weekyear();
        property3.toString();
        property3.hashCode();
        org.junit.Assert.assertTrue(property3.equals(property3));
    }

    @Test
    public void test1235() throws Throwable {
        java.lang.Object object0 = null;
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.minutes();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.Chronology chronology4 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInstant2, readableInstant3);
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod(object0, periodType1, chronology4);
        mutablePeriod5.toString();
        mutablePeriod5.hashCode();
        org.junit.Assert.assertTrue(mutablePeriod5.equals(mutablePeriod5));
    }

    @Test
    public void test1236() throws Throwable {
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.mediumTime();
        dateTimeFormatter0.toString();
        dateTimeFormatter0.hashCode();
        org.junit.Assert.assertTrue(dateTimeFormatter0.equals(dateTimeFormatter0));
    }

    @Test
    public void test1237() throws Throwable {
        org.joda.time.chrono.BuddhistChronology buddhistChronology0 = org.joda.time.chrono.BuddhistChronology.getInstanceUTC();
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeUtils.getZone(dateTimeZone2);
        org.joda.time.Chronology chronology4 = buddhistChronology0.withZone(dateTimeZone3);
        chronology4.toString();
        chronology4.hashCode();
        org.junit.Assert.assertTrue(chronology4.equals(chronology4));
    }

    @Test
    public void test1238() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        java.util.Locale locale1 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket2 = new org.joda.time.format.DateTimeParserBucket(1, chronology0, locale1);
        java.lang.Object object3 = dateTimeParserBucket2.saveState();
        object3.toString();
        object3.hashCode();
        org.junit.Assert.assertTrue(object3.equals(object3));
    }

    @Test
    public void test1239() throws Throwable {
        org.joda.time.MutableDateTime.Property roundHalfFloor0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = roundHalfFloor0.roundHalfFloor();
        mutableDateTime1.toString();
        mutableDateTime1.hashCode();
        org.junit.Assert.assertTrue(mutableDateTime1.equals(mutableDateTime1));
    }

    @Test
    public void test1240() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime(chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        mutableDateTime2.set(dateTimeFieldType3, 1);
    }

    @Test
    public void test1241() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.clockhourOfDay();
        dateTimeField2.toString();
        dateTimeField2.hashCode();
        org.junit.Assert.assertTrue(dateTimeField2.equals(dateTimeField2));
    }

    @Test
    public void test1242() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime(1, chronology1);
        int int3 = mutableDateTime2.getRoundingMode();
    }

    @Test
    public void test1243() throws Throwable {
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.centuries();
        java.lang.String string1 = durationFieldType0.getName();
        string1.toString();
        string1.hashCode();
        org.junit.Assert.assertTrue(string1.equals(string1));
    }

    @Test
    public void test1244() throws Throwable {
        java.lang.Object object0 = null;
        org.joda.time.Duration duration1 = new org.joda.time.Duration(object0);
        duration1.toString();
        duration1.hashCode();
        org.junit.Assert.assertTrue(duration1.equals(duration1));
    }

    @Test
    public void test1245() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.ReadablePartial readablePartial2 = null;
        int[] intArr3 = chronology1.get(readablePartial2, 1);
        intArr3.toString();
        intArr3.hashCode();
        org.junit.Assert.assertTrue(intArr3.equals(intArr3));
    }

    @Test
    public void test1246() throws Throwable {
        java.lang.String string0 = null;
        org.joda.time.MutableInterval mutableInterval1 = org.joda.time.MutableInterval.parse(string0);
        java.lang.Object object2 = mutableInterval1.clone();
        object2.toString();
        object2.hashCode();
        org.junit.Assert.assertTrue(object2.equals(object2));
    }

    @Test
    public void test1247() throws Throwable {
        java.lang.Object object0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(object0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.year();
        property2.toString();
        property2.hashCode();
        org.junit.Assert.assertTrue(property2.equals(property2));
    }

    @Test
    public void test1248() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.chrono.StrictChronology strictChronology2 = org.joda.time.chrono.StrictChronology.getInstance(chronology1);
        java.lang.String string3 = strictChronology2.toString();
        string3.toString();
        string3.hashCode();
        org.junit.Assert.assertTrue(string3.equals(string3));
    }

    @Test
    public void test1249() throws Throwable {
        org.joda.time.field.DelegatedDateTimeField getRangeDurationField0 = null;
        org.joda.time.DurationField durationField1 = getRangeDurationField0.getRangeDurationField();
        durationField1.toString();
        durationField1.hashCode();
        org.junit.Assert.assertTrue(durationField1.equals(durationField1));
    }

    @Test
    public void test1250() throws Throwable {
        org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder0 = new org.joda.time.tz.DateTimeZoneBuilder();
        org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder1 = dateTimeZoneBuilder0.setStandardOffset(1);
        dateTimeZoneBuilder1.toString();
        dateTimeZoneBuilder1.hashCode();
        org.junit.Assert.assertTrue(dateTimeZoneBuilder1.equals(dateTimeZoneBuilder1));
    }

    @Test
    public void test1251() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.LocalDate localDate2 = org.joda.time.LocalDate.now(chronology1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.LocalDate localDate4 = localDate2.withPeriodAdded(readablePeriod3, 1);
        localDate4.toString();
        localDate4.hashCode();
        org.junit.Assert.assertTrue(localDate4.equals(localDate4));
    }

    @Test
    public void test1252() throws Throwable {
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        instant0.toString();
        instant0.hashCode();
        org.junit.Assert.assertTrue(instant0.equals(instant0));
    }

    @Test
    public void test1253() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now(chronology1);
        int int3 = localDateTime2.getDayOfYear();
    }

    @Test
    public void test1254() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInstant0, readableInstant1);
        org.joda.time.DurationField durationField3 = chronology2.seconds();
        durationField3.toString();
        durationField3.hashCode();
        org.junit.Assert.assertTrue(durationField3.equals(durationField3));
    }

    @Test
    public void test1255() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(1, 1, 1, 1, 1, 1, 1, chronology1);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime2.plusDays(1);
        localDateTime3.toString();
        localDateTime3.hashCode();
        org.junit.Assert.assertTrue(localDateTime3.equals(localDateTime3));
    }

    @Test
    public void test1256() throws Throwable {
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.basicWeekDateTimeNoMillis();
        dateTimeFormatter0.toString();
        dateTimeFormatter0.hashCode();
        org.junit.Assert.assertTrue(dateTimeFormatter0.equals(dateTimeFormatter0));
    }

    @Test
    public void test1257() throws Throwable {
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        java.util.Date date1 = localDate0.toDate();
        date1.toString();
        date1.hashCode();
        org.junit.Assert.assertTrue(date1.equals(date1));
    }

    @Test
    public void test1258() throws Throwable {
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime(1, 1, 1, 1, 1, 1, 1);
        mutableDateTime0.setDateTime(1, 1, 1, 1, 1, 1, 1);
    }

    @Test
    public void test1259() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeUtils.getZone(dateTimeZone1);
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime(dateTimeZone2);
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        mutableDateTime3.setZoneRetainFields(dateTimeZone5);
    }

    @Test
    public void test1260() throws Throwable {
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay(1);
        org.joda.time.TimeOfDay timeOfDay1 = timeOfDay0.withMillisOfSecond(1);
        timeOfDay1.toString();
        timeOfDay1.hashCode();
        org.junit.Assert.assertTrue(timeOfDay1.equals(timeOfDay1));
    }

    @Test
    public void test1261() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Seconds seconds2 = org.joda.time.Seconds.secondsBetween(readableInstant0, readableInstant1);
        seconds2.toString();
        seconds2.hashCode();
        org.junit.Assert.assertTrue(seconds2.equals(seconds2));
    }

    @Test
    public void test1262() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay(chronology0);
        java.lang.String string2 = null;
        java.util.Locale locale3 = null;
        java.lang.String string4 = monthDay1.toString(string2, locale3);
        string4.toString();
        string4.hashCode();
        org.junit.Assert.assertTrue(string4.equals(string4));
    }

    @Test
    public void test1263() throws Throwable {
        org.joda.time.Duration duration0 = org.joda.time.Duration.standardHours(1);
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.Duration duration2 = duration0.withDurationAdded(readableDuration1, 1);
        duration2.toString();
        duration2.hashCode();
        org.junit.Assert.assertTrue(duration2.equals(duration2));
    }

    @Test
    public void test1264() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.LocalDate.Property property3 = localDate1.property(dateTimeFieldType2);
        property3.toString();
        property3.hashCode();
        org.junit.Assert.assertTrue(property3.equals(property3));
    }

    @Test
    public void test1265() throws Throwable {
        org.joda.time.tz.DefaultNameProvider defaultNameProvider0 = new org.joda.time.tz.DefaultNameProvider();
        defaultNameProvider0.toString();
        defaultNameProvider0.hashCode();
        org.junit.Assert.assertTrue(defaultNameProvider0.equals(defaultNameProvider0));
    }

    @Test
    public void test1266() throws Throwable {
        java.lang.Object object0 = null;
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime(object0, dateTimeZone2);
        int int4 = localDateTime3.size();
    }

    @Test
    public void test1267() throws Throwable {
        java.lang.String string0 = null;
        java.lang.Number number1 = null;
        java.lang.Number number2 = null;
        java.lang.Number number3 = null;
        org.joda.time.IllegalFieldValueException illegalFieldValueException4 = new org.joda.time.IllegalFieldValueException(string0, number1, number2, number3);
        java.lang.String string5 = illegalFieldValueException4.getIllegalStringValue();
        string5.toString();
        string5.hashCode();
        org.junit.Assert.assertTrue(string5.equals(string5));
    }

    @Test
    public void test1268() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        int int2 = localDate1.hashCode();
    }

    @Test
    public void test1269() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.chrono.StrictChronology strictChronology2 = org.joda.time.chrono.StrictChronology.getInstance(chronology1);
        java.util.TimeZone timeZone3 = null;
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeUtils.getZone(dateTimeZone4);
        org.joda.time.Chronology chronology6 = strictChronology2.withZone(dateTimeZone5);
        chronology6.toString();
        chronology6.hashCode();
        org.junit.Assert.assertTrue(chronology6.equals(chronology6));
    }

    @Test
    public void test1270() throws Throwable {
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay(1, 1, 1);
        int int1 = yearMonthDay0.size();
    }

    @Test
    public void test1271() throws Throwable {
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Hours hours3 = org.joda.time.Hours.hoursIn(readableInterval2);
        org.joda.time.ReadableInterval readableInterval4 = null;
        org.joda.time.ReadableInterval readableInterval5 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval4);
        org.joda.time.ReadableInterval readableInterval6 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval5);
        org.joda.time.Hours hours7 = org.joda.time.Hours.hoursIn(readableInterval6);
        boolean boolean8 = hours3.isGreaterThan(hours7);
    }

    @Test
    public void test1272() throws Throwable {
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder0.appendDecimal(dateTimeFieldType1, 1, 1);
        dateTimeFormatterBuilder2.toString();
        dateTimeFormatterBuilder2.hashCode();
        org.junit.Assert.assertTrue(dateTimeFormatterBuilder2.equals(dateTimeFormatterBuilder2));
    }

    @Test
    public void test1273() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(1, 1, 1, 1, 1, dateTimeZone1);
        org.joda.time.DateTime.Property property3 = dateTime2.weekyear();
        property3.toString();
        property3.hashCode();
        org.junit.Assert.assertTrue(property3.equals(property3));
    }

    @Test
    public void test1274() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay(1, 1, 1, 1, chronology1);
        org.joda.time.LocalTime localTime3 = timeOfDay2.toLocalTime();
        localTime3.toString();
        localTime3.hashCode();
        org.junit.Assert.assertTrue(localTime3.equals(localTime3));
    }

    @Test
    public void test1275() throws Throwable {
        java.lang.String string0 = null;
        org.joda.time.Duration duration1 = org.joda.time.Duration.parse(string0);
        duration1.toString();
        duration1.hashCode();
        org.junit.Assert.assertTrue(duration1.equals(duration1));
    }

    @Test
    public void test1276() throws Throwable {
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.basicDateTime();
        dateTimeFormatter0.toString();
        dateTimeFormatter0.hashCode();
        org.junit.Assert.assertTrue(dateTimeFormatter0.equals(dateTimeFormatter0));
    }

    @Test
    public void test1277() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int2 = dateTimeZone1.getOffsetFromLocal(1);
    }

    @Test
    public void test1278() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(dateTimeZone1);
        localDateTime2.toString();
        localDateTime2.hashCode();
        org.junit.Assert.assertTrue(localDateTime2.equals(localDateTime2));
    }

    @Test
    public void test1279() throws Throwable {
        org.joda.time.format.PeriodFormatter periodFormatter0 = org.joda.time.format.ISOPeriodFormat.alternate();
        periodFormatter0.toString();
        periodFormatter0.hashCode();
        org.junit.Assert.assertTrue(periodFormatter0.equals(periodFormatter0));
    }

    @Test
    public void test1280() throws Throwable {
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(1, 1, 1, 1, 1, 1, dateTimeZone0);
        org.joda.time.DateTime dateTime2 = dateTime1.withMonthOfYear(1);
        dateTime2.toString();
        dateTime2.hashCode();
        org.junit.Assert.assertTrue(dateTime2.equals(dateTime2));
    }

    @Test
    public void test1281() throws Throwable {
        java.lang.Object object0 = null;
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.minutes();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.Chronology chronology4 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInstant2, readableInstant3);
        org.joda.time.Period period5 = new org.joda.time.Period(object0, periodType1, chronology4);
        period5.toString();
        period5.hashCode();
        org.junit.Assert.assertTrue(period5.equals(period5));
    }

    @Test
    public void test1282() throws Throwable {
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.eras();
        durationFieldType0.toString();
        durationFieldType0.hashCode();
        org.junit.Assert.assertTrue(durationFieldType0.equals(durationFieldType0));
    }

    @Test
    public void test1283() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(1, 1, 1, 1, 1, dateTimeZone1);
        java.util.TimeZone timeZone3 = null;
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeUtils.getZone(dateTimeZone4);
        org.joda.time.DateTime dateTime6 = dateTime2.toDateTime(dateTimeZone5);
        dateTime6.toString();
        dateTime6.hashCode();
        org.junit.Assert.assertTrue(dateTime6.equals(dateTime6));
    }

    @Test
    public void test1284() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.Object object2 = null;
        java.util.TimeZone timeZone3 = null;
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(object2, dateTimeZone4);
        boolean boolean6 = dateTimeZone1.isLocalDateTimeGap(localDateTime5);
    }

    @Test
    public void test1285() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeUtils.getZone(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime3.withYearOfCentury(1);
        localDateTime4.toString();
        localDateTime4.hashCode();
        org.junit.Assert.assertTrue(localDateTime4.equals(localDateTime4));
    }

    @Test
    public void test1286() throws Throwable {
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.time();
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInstant1, readableInstant2);
        org.joda.time.Period period4 = new org.joda.time.Period(1, 1, periodType0, chronology3);
        int int5 = period4.getMillis();
    }

    @Test
    public void test1287() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(1, chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.era();
        property3.toString();
        property3.hashCode();
        org.junit.Assert.assertTrue(property3.equals(property3));
    }

    @Test
    public void test1288() throws Throwable {
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.secondOfDay();
        dateTimeFieldType0.toString();
        dateTimeFieldType0.hashCode();
        org.junit.Assert.assertTrue(dateTimeFieldType0.equals(dateTimeFieldType0));
    }

    @Test
    public void test1289() throws Throwable {
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Days days2 = org.joda.time.Days.daysIn(readableInterval1);
        org.joda.time.Days days3 = days2.negated();
        days3.toString();
        days3.hashCode();
        org.junit.Assert.assertTrue(days3.equals(days3));
    }

    @Test
    public void test1290() throws Throwable {
        org.joda.time.field.RemainderDateTimeField getMaximumValue0 = null;
        int int1 = getMaximumValue0.getMaximumValue();
    }

    @Test
    public void test1291() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        dateTime2.toString();
        dateTime2.hashCode();
        org.junit.Assert.assertTrue(dateTime2.equals(dateTime2));
    }

    @Test
    public void test1292() throws Throwable {
        org.joda.time.chrono.GJChronology gJChronology0 = org.joda.time.chrono.GJChronology.getInstance();
        gJChronology0.toString();
        gJChronology0.hashCode();
        org.junit.Assert.assertTrue(gJChronology0.equals(gJChronology0));
    }

    @Test
    public void test1293() throws Throwable {
        java.lang.Object object0 = null;
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.minutes();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.Chronology chronology4 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInstant2, readableInstant3);
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod(object0, periodType1, chronology4);
        org.joda.time.DurationFieldType durationFieldType6 = org.joda.time.DurationFieldType.seconds();
        mutablePeriod5.set(durationFieldType6, 1);
    }

    @Test
    public void test1294() throws Throwable {
        java.lang.Object object0 = null;
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.Chronology chronology4 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInstant2, readableInstant3);
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod(object0, periodType1, chronology4);
        mutablePeriod5.toString();
        mutablePeriod5.hashCode();
        org.junit.Assert.assertTrue(mutablePeriod5.equals(mutablePeriod5));
    }

    @Test
    public void test1295() throws Throwable {
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInstant1, readableInstant2);
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(1, periodType0, chronology3);
        mutablePeriod4.toString();
        mutablePeriod4.hashCode();
        org.junit.Assert.assertTrue(mutablePeriod4.equals(mutablePeriod4));
    }

    @Test
    public void test1296() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime(1, chronology1);
        mutableDateTime2.setDayOfWeek(1);
    }

    @Test
    public void test1297() throws Throwable {
        org.joda.time.DateTimeField getDifference0 = null;
        int int1 = getDifference0.getDifference(1, 1);
    }

    @Test
    public void test1298() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableInstant0, readableDuration1);
        mutableInterval2.setEndMillis(1);
    }

    @Test
    public void test1299() throws Throwable {
        org.joda.time.MutablePeriod mutablePeriod0 = new org.joda.time.MutablePeriod(1, 1, 1, 1);
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        mutablePeriod0.setPeriod(readablePeriod1);
    }

    @Test
    public void test1300() throws Throwable {
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.longTime();
        dateTimeFormatter0.toString();
        dateTimeFormatter0.hashCode();
        org.junit.Assert.assertTrue(dateTimeFormatter0.equals(dateTimeFormatter0));
    }

    @Test
    public void test1301() throws Throwable {
        org.joda.time.Period period0 = new org.joda.time.Period(1, 1, 1, 1, 1, 1, 1, 1);
        org.joda.time.Days days1 = period0.toStandardDays();
        days1.toString();
        days1.hashCode();
        org.junit.Assert.assertTrue(days1.equals(days1));
    }

    @Test
    public void test1302() throws Throwable {
        java.lang.Object object0 = null;
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.yearDay();
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(object0, periodType1);
        mutablePeriod2.setPeriod(1);
    }

    @Test
    public void test1303() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeUtils.getZone(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime3.withDayOfWeek(1);
        localDateTime4.toString();
        localDateTime4.hashCode();
        org.junit.Assert.assertTrue(localDateTime4.equals(localDateTime4));
    }

    @Test
    public void test1304() throws Throwable {
        java.lang.Object object0 = null;
        org.joda.time.Interval interval1 = new org.joda.time.Interval(object0);
        org.joda.time.ReadableInterval readableInterval2 = null;
        org.joda.time.ReadableInterval readableInterval3 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval2);
        org.joda.time.ReadableInterval readableInterval4 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval3);
        org.joda.time.Interval interval5 = interval1.overlap(readableInterval4);
        interval5.toString();
        interval5.hashCode();
        org.junit.Assert.assertTrue(interval5.equals(interval5));
    }

    @Test
    public void test1305() throws Throwable {
        java.lang.Object object0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(object0);
        int int2 = localDate1.getWeekyear();
    }

    @Test
    public void test1306() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(dateTimeZone1);
        java.lang.Object object3 = null;
        boolean boolean4 = localDateTime2.equals(object3);
    }

    @Test
    public void test1307() throws Throwable {
        org.joda.time.field.OffsetDateTimeField addWrapField0 = null;
        long long1 = addWrapField0.addWrapField(1, 1);
    }

    @Test
    public void test1308() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime(chronology1);
        org.joda.time.ReadableInstant readableInstant3 = null;
        mutableDateTime2.setMillis(readableInstant3);
    }

    @Test
    public void test1309() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(1, chronology1);
        org.joda.time.LocalDate.Property property3 = localDate2.weekOfWeekyear();
        property3.toString();
        property3.hashCode();
        org.junit.Assert.assertTrue(property3.equals(property3));
    }

    @Test
    public void test1310() throws Throwable {
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate(1);
        org.joda.time.LocalDate.Property property1 = localDate0.year();
        property1.toString();
        property1.hashCode();
        org.junit.Assert.assertTrue(property1.equals(property1));
    }

    @Test
    public void test1311() throws Throwable {
        org.joda.time.Duration duration0 = org.joda.time.Duration.standardDays(1);
        org.joda.time.Duration duration1 = duration0.toDuration();
        duration1.toString();
        duration1.hashCode();
        org.junit.Assert.assertTrue(duration1.equals(duration1));
    }

    @Test
    public void test1312() throws Throwable {
        java.lang.Object object0 = null;
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime(object0, dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime3.plusHours(1);
        localDateTime4.toString();
        localDateTime4.hashCode();
        org.junit.Assert.assertTrue(localDateTime4.equals(localDateTime4));
    }

    @Test
    public void test1313() throws Throwable {
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(readableDuration0, readableInstant1);
        mutablePeriod2.addDays(1);
    }

    @Test
    public void test1314() throws Throwable {
        org.joda.time.Period period0 = org.joda.time.Period.seconds(1);
        period0.toString();
        period0.hashCode();
        org.junit.Assert.assertTrue(period0.equals(period0));
    }

    @Test
    public void test1315() throws Throwable {
        org.joda.time.field.SkipDateTimeField getMinimumValue0 = null;
        int int1 = getMinimumValue0.getMinimumValue();
    }

    @Test
    public void test1316() throws Throwable {
        org.joda.time.field.DividedDateTimeField dividedDateTimeField0 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField2 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField0, dateTimeFieldType1);
        remainderDateTimeField2.toString();
        remainderDateTimeField2.hashCode();
        org.junit.Assert.assertTrue(remainderDateTimeField2.equals(remainderDateTimeField2));
    }

    @Test
    public void test1317() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(1, chronology1);
        localDateTime2.toString();
        localDateTime2.hashCode();
        org.junit.Assert.assertTrue(localDateTime2.equals(localDateTime2));
    }

    @Test
    public void test1318() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeUtils.getZone(dateTimeZone1);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(1, 1, 1, 1, 1, dateTimeZone2);
        org.joda.time.YearMonthDay yearMonthDay4 = dateTime3.toYearMonthDay();
        yearMonthDay4.toString();
        yearMonthDay4.hashCode();
        org.junit.Assert.assertTrue(yearMonthDay4.equals(yearMonthDay4));
    }

    @Test
    public void test1319() throws Throwable {
        java.lang.Object object0 = null;
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getChronology(chronology1);
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(object0, chronology2);
        dateMidnight3.toString();
        dateMidnight3.hashCode();
        org.junit.Assert.assertTrue(dateMidnight3.equals(dateMidnight3));
    }

    @Test
    public void test1320() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(1, 1, 1, 1, 1, 1, 1, chronology1);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime2.withMillisOfSecond(1);
        localDateTime3.toString();
        localDateTime3.hashCode();
        org.junit.Assert.assertTrue(localDateTime3.equals(localDateTime3));
    }

    @Test
    public void test1321() throws Throwable {
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime(1, 1, 1, 1, 1, 1, 1);
        mutableDateTime0.addWeekyears(1);
    }

    @Test
    public void test1322() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.chrono.StrictChronology strictChronology2 = org.joda.time.chrono.StrictChronology.getInstance(chronology1);
        int int3 = strictChronology2.hashCode();
    }

    @Test
    public void test1323() throws Throwable {
        java.lang.String string0 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = org.joda.time.format.ISODateTimeFormat.dateHourMinuteSecondFraction();
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.parse(string0, dateTimeFormatter1);
        localTime2.toString();
        localTime2.hashCode();
        org.junit.Assert.assertTrue(localTime2.equals(localTime2));
    }

    @Test
    public void test1324() throws Throwable {
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight(1);
        org.joda.time.DateMidnight dateMidnight1 = dateMidnight0.plusYears(1);
        dateMidnight1.toString();
        dateMidnight1.hashCode();
        org.junit.Assert.assertTrue(dateMidnight1.equals(dateMidnight1));
    }

    @Test
    public void test1325() throws Throwable {
        org.joda.time.MonthDay monthDay0 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay.Property property1 = monthDay0.dayOfMonth();
        property1.toString();
        property1.hashCode();
        org.junit.Assert.assertTrue(property1.equals(property1));
    }

    @Test
    public void test1326() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.minus(readablePeriod2);
        partial3.toString();
        partial3.hashCode();
        org.junit.Assert.assertTrue(partial3.equals(partial3));
    }

    @Test
    public void test1327() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeUtils.getZone(dateTimeZone1);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(1, 1, 1, 1, 1, 1, dateTimeZone2);
        org.joda.time.DateTime.Property property4 = dateTime3.dayOfMonth();
        property4.toString();
        property4.hashCode();
        org.junit.Assert.assertTrue(property4.equals(property4));
    }

    @Test
    public void test1328() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket3 = new org.joda.time.format.DateTimeParserBucket(1, chronology1, locale2);
        dateTimeParserBucket3.toString();
        dateTimeParserBucket3.hashCode();
        org.junit.Assert.assertTrue(dateTimeParserBucket3.equals(dateTimeParserBucket3));
    }

    @Test
    public void test1329() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.LocalDate localDate2 = org.joda.time.LocalDate.now(chronology1);
        java.util.TimeZone timeZone3 = null;
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime(1, dateTimeZone4);
        org.joda.time.LocalDateTime localDateTime6 = localDate2.toLocalDateTime(localTime5);
        localDateTime6.toString();
        localDateTime6.hashCode();
        org.junit.Assert.assertTrue(localDateTime6.equals(localDateTime6));
    }

    @Test
    public void test1330() throws Throwable {
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField0 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField2 = new org.joda.time.field.DividedDateTimeField(remainderDateTimeField0, dateTimeFieldType1);
        dividedDateTimeField2.toString();
        dividedDateTimeField2.hashCode();
        org.junit.Assert.assertTrue(dividedDateTimeField2.equals(dividedDateTimeField2));
    }

    @Test
    public void test1331() throws Throwable {
        org.joda.time.field.ZeroIsMaxDateTimeField isLeap0 = null;
        boolean boolean1 = isLeap0.isLeap(1);
    }

    @Test
    public void test1332() throws Throwable {
        org.joda.time.field.DividedDateTimeField getMinimumValue0 = null;
        int int1 = getMinimumValue0.getMinimumValue();
    }

    @Test
    public void test1333() throws Throwable {
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        periodFormatterBuilder0.clear();
    }

    @Test
    public void test1334() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Partial partial3 = partial1.withFieldAdded(durationFieldType2, 1);
        partial3.toString();
        partial3.hashCode();
        org.junit.Assert.assertTrue(partial3.equals(partial3));
    }

    @Test
    public void test1335() throws Throwable {
        org.joda.time.tz.DefaultNameProvider defaultNameProvider0 = new org.joda.time.tz.DefaultNameProvider();
        java.util.Locale locale1 = null;
        java.lang.String string2 = null;
        java.lang.String string3 = null;
        java.lang.String string4 = defaultNameProvider0.getShortName(locale1, string2, string3, true);
        string4.toString();
        string4.hashCode();
        org.junit.Assert.assertTrue(string4.equals(string4));
    }

    @Test
    public void test1336() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.MutableDateTime mutableDateTime2 = org.joda.time.MutableDateTime.now(chronology1);
        mutableDateTime2.setTime(1);
    }

    @Test
    public void test1337() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.Interval interval2 = new org.joda.time.Interval(1, 1, dateTimeZone1);
        interval2.toString();
        interval2.hashCode();
        org.junit.Assert.assertTrue(interval2.equals(interval2));
    }

    @Test
    public void test1338() throws Throwable {
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime(1, 1, 1, 1, 1, 1, 1);
        mutableDateTime0.addMillis(1);
    }

    @Test
    public void test1339() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeUtils.getZone(dateTimeZone1);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(1, dateTimeZone2);
        dateTime3.toString();
        dateTime3.hashCode();
        org.junit.Assert.assertTrue(dateTime3.equals(dateTime3));
    }

    @Test
    public void test1340() throws Throwable {
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfMonth();
        org.joda.time.DateTimeComparator dateTimeComparator1 = org.joda.time.DateTimeComparator.getInstance(dateTimeFieldType0);
        dateTimeComparator1.toString();
        dateTimeComparator1.hashCode();
        org.junit.Assert.assertTrue(dateTimeComparator1.equals(dateTimeComparator1));
    }

    @Test
    public void test1341() throws Throwable {
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortDate();
        dateTimeFormatter0.toString();
        dateTimeFormatter0.hashCode();
        org.junit.Assert.assertTrue(dateTimeFormatter0.equals(dateTimeFormatter0));
    }

    @Test
    public void test1342() throws Throwable {
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfWeek();
        org.joda.time.DateTimeComparator dateTimeComparator1 = org.joda.time.DateTimeComparator.getInstance(dateTimeFieldType0);
        int int2 = dateTimeComparator1.hashCode();
    }

    @Test
    public void test1343() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInstant0, readableInstant1);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.centuryOfEra();
        dateTimeField3.toString();
        dateTimeField3.hashCode();
        org.junit.Assert.assertTrue(dateTimeField3.equals(dateTimeField3));
    }

    @Test
    public void test1344() throws Throwable {
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime(1, 1, 1, 1, 1, 1, 1);
        org.joda.time.ReadablePartial readablePartial1 = null;
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withFields(readablePartial1);
        localDateTime2.toString();
        localDateTime2.hashCode();
        org.junit.Assert.assertTrue(localDateTime2.equals(localDateTime2));
    }

    @Test
    public void test1345() throws Throwable {
        org.joda.time.field.DelegatedDateTimeField getLeapDurationField0 = null;
        org.joda.time.DurationField durationField1 = getLeapDurationField0.getLeapDurationField();
        durationField1.toString();
        durationField1.hashCode();
        org.junit.Assert.assertTrue(durationField1.equals(durationField1));
    }

    @Test
    public void test1346() throws Throwable {
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Days days2 = org.joda.time.Days.daysIn(readableInterval1);
        org.joda.time.ReadableInterval readableInterval3 = null;
        org.joda.time.ReadableInterval readableInterval4 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval3);
        org.joda.time.Days days5 = org.joda.time.Days.daysIn(readableInterval4);
        org.joda.time.Days days6 = days2.minus(days5);
        days6.toString();
        days6.hashCode();
        org.junit.Assert.assertTrue(days6.equals(days6));
    }

    @Test
    public void test1347() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(1, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Chronology chronology4 = org.joda.time.DateTimeUtils.getChronology(chronology3);
        org.joda.time.LocalDate localDate5 = org.joda.time.LocalDate.now(chronology4);
        org.joda.time.DateTime dateTime6 = dateTime2.withDate(localDate5);
        dateTime6.toString();
        dateTime6.hashCode();
        org.junit.Assert.assertTrue(dateTime6.equals(dateTime6));
    }

    @Test
    public void test1348() throws Throwable {
        org.joda.time.DateTimeField dateTimeField0 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.field.DelegatedDateTimeField delegatedDateTimeField2 = new org.joda.time.field.DelegatedDateTimeField(dateTimeField0, dateTimeFieldType1);
        delegatedDateTimeField2.toString();
        delegatedDateTimeField2.hashCode();
        org.junit.Assert.assertTrue(delegatedDateTimeField2.equals(delegatedDateTimeField2));
    }

    @Test
    public void test1349() throws Throwable {
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.tTimeNoMillis();
        java.lang.StringBuilder stringBuilder1 = null;
        org.joda.time.ReadablePartial readablePartial2 = null;
        dateTimeFormatter0.printTo(stringBuilder1, readablePartial2);
    }

    @Test
    public void test1350() throws Throwable {
        org.joda.time.Instant instant0 = new org.joda.time.Instant(1);
        org.joda.time.Instant instant1 = instant0.plus(1);
        instant1.toString();
        instant1.hashCode();
        org.junit.Assert.assertTrue(instant1.equals(instant1));
    }

    @Test
    public void test1351() throws Throwable {
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        java.lang.String string2 = yearMonthDay1.toString();
        string2.toString();
        string2.hashCode();
        org.junit.Assert.assertTrue(string2.equals(string2));
    }

    @Test
    public void test1352() throws Throwable {
        org.joda.time.Years years0 = org.joda.time.Years.years(1);
        org.joda.time.Years years1 = years0.negated();
        years1.toString();
        years1.hashCode();
        org.junit.Assert.assertTrue(years1.equals(years1));
    }

    @Test
    public void test1353() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInstant0, readableInstant1);
        org.joda.time.chrono.LenientChronology lenientChronology3 = org.joda.time.chrono.LenientChronology.getInstance(chronology2);
        lenientChronology3.toString();
        lenientChronology3.hashCode();
        org.junit.Assert.assertTrue(lenientChronology3.equals(lenientChronology3));
    }

    @Test
    public void test1354() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(1, chronology1);
        int int3 = localDate2.getWeekOfWeekyear();
    }

    @Test
    public void test1355() throws Throwable {
        java.lang.Object object0 = null;
        org.joda.time.Period period1 = new org.joda.time.Period(object0);
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.standard();
        org.joda.time.Period period3 = period1.normalizedStandard(periodType2);
        period3.toString();
        period3.hashCode();
        org.junit.Assert.assertTrue(period3.equals(period3));
    }

    @Test
    public void test1356() throws Throwable {
        org.joda.time.ReadablePartial readablePartial0 = null;
        boolean boolean1 = org.joda.time.DateTimeUtils.isContiguous(readablePartial0);
    }

    @Test
    public void test1357() throws Throwable {
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Weeks weeks3 = org.joda.time.Weeks.weeksIn(readableInterval2);
        org.joda.time.Duration duration4 = weeks3.toStandardDuration();
        duration4.toString();
        duration4.hashCode();
        org.junit.Assert.assertTrue(duration4.equals(duration4));
    }

    @Test
    public void test1358() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        int int2 = localDate1.getYear();
    }

    @Test
    public void test1359() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInstant0, readableInstant1);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.halfdayOfDay();
        dateTimeField3.toString();
        dateTimeField3.hashCode();
        org.junit.Assert.assertTrue(dateTimeField3.equals(dateTimeField3));
    }

    @Test
    public void test1360() throws Throwable {
        org.joda.time.TimeOfDay.Property addToCopy0 = null;
        org.joda.time.TimeOfDay timeOfDay1 = addToCopy0.addToCopy(1);
        timeOfDay1.toString();
        timeOfDay1.hashCode();
        org.junit.Assert.assertTrue(timeOfDay1.equals(timeOfDay1));
    }

    @Test
    public void test1361() throws Throwable {
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.yearDay();
        org.joda.time.PeriodType periodType1 = periodType0.withMillisRemoved();
        periodType1.toString();
        periodType1.hashCode();
        org.junit.Assert.assertTrue(periodType1.equals(periodType1));
    }

    @Test
    public void test1362() throws Throwable {
        org.joda.time.field.ScaledDurationField getMillis0 = null;
        long long1 = getMillis0.getMillis(1);
    }

    @Test
    public void test1363() throws Throwable {
        java.util.Calendar calendar0 = null;
        org.joda.time.YearMonth yearMonth1 = org.joda.time.YearMonth.fromCalendarFields(calendar0);
        yearMonth1.toString();
        yearMonth1.hashCode();
        org.junit.Assert.assertTrue(yearMonth1.equals(yearMonth1));
    }

    @Test
    public void test1364() throws Throwable {
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.standard();
        org.joda.time.DurationFieldType durationFieldType1 = org.joda.time.DurationFieldType.eras();
        int int2 = periodType0.indexOf(durationFieldType1);
    }

    @Test
    public void test1365() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime2.withDayOfWeek(1);
        localDateTime3.toString();
        localDateTime3.hashCode();
        org.junit.Assert.assertTrue(localDateTime3.equals(localDateTime3));
    }

    @Test
    public void test1366() throws Throwable {
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        mutableDateTime0.toString();
        mutableDateTime0.hashCode();
        org.junit.Assert.assertTrue(mutableDateTime0.equals(mutableDateTime0));
    }

    @Test
    public void test1367() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeUtils.getZone(dateTimeZone1);
        long long3 = dateTimeZone2.nextTransition(1);
    }

    @Test
    public void test1368() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInstant0, readableInstant1);
        org.joda.time.Interval interval3 = new org.joda.time.Interval(1, 1, chronology2);
        interval3.toString();
        interval3.hashCode();
        org.junit.Assert.assertTrue(interval3.equals(interval3));
    }

    @Test
    public void test1369() throws Throwable {
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay(1, 1, 1);
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.DateTime dateTime3 = yearMonthDay0.toDateTimeAtMidnight(dateTimeZone2);
        dateTime3.toString();
        dateTime3.hashCode();
        org.junit.Assert.assertTrue(dateTime3.equals(dateTime3));
    }

    @Test
    public void test1370() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.Chronology chronology4 = chronology1.withZone(dateTimeZone3);
        chronology4.toString();
        chronology4.hashCode();
        org.junit.Assert.assertTrue(chronology4.equals(chronology4));
    }

    @Test
    public void test1371() throws Throwable {
        java.lang.Object object0 = null;
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(object0, chronology1);
        int int3 = localDateTime2.getCenturyOfEra();
    }

    @Test
    public void test1372() throws Throwable {
        org.joda.time.LocalDate.Property roundCeilingCopy0 = null;
        org.joda.time.LocalDate localDate1 = roundCeilingCopy0.roundCeilingCopy();
        localDate1.toString();
        localDate1.hashCode();
        org.junit.Assert.assertTrue(localDate1.equals(localDate1));
    }

    @Test
    public void test1373() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeUtils.getZone(dateTimeZone1);
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime(1, dateTimeZone2);
        mutableDateTime3.toString();
        mutableDateTime3.hashCode();
        org.junit.Assert.assertTrue(mutableDateTime3.equals(mutableDateTime3));
    }

    @Test
    public void test1374() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.LocalDate localDate2 = org.joda.time.LocalDate.now(chronology1);
        org.joda.time.DurationFieldType durationFieldType3 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.LocalDate localDate4 = localDate2.withFieldAdded(durationFieldType3, 1);
        localDate4.toString();
        localDate4.hashCode();
        org.junit.Assert.assertTrue(localDate4.equals(localDate4));
    }

    @Test
    public void test1375() throws Throwable {
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.basicWeekDate();
        dateTimeFormatter0.toString();
        dateTimeFormatter0.hashCode();
        org.junit.Assert.assertTrue(dateTimeFormatter0.equals(dateTimeFormatter0));
    }

    @Test
    public void test1376() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeUtils.getZone(dateTimeZone1);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone2);
    }

    @Test
    public void test1377() throws Throwable {
        org.joda.time.ReadablePeriod readablePeriod0 = null;
        org.joda.time.Seconds seconds1 = org.joda.time.Seconds.standardSecondsIn(readablePeriod0);
        org.joda.time.Seconds seconds2 = seconds1.plus(1);
        seconds2.toString();
        seconds2.hashCode();
        org.junit.Assert.assertTrue(seconds2.equals(seconds2));
    }

    @Test
    public void test1378() throws Throwable {
        java.lang.Object object0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(object0);
        org.joda.time.LocalDate.Property property2 = localDate1.centuryOfEra();
        property2.toString();
        property2.hashCode();
        org.junit.Assert.assertTrue(property2.equals(property2));
    }

    @Test
    public void test1379() throws Throwable {
        org.joda.time.DurationField getValue0 = null;
        int int1 = getValue0.getValue(1, 1);
    }

    @Test
    public void test1380() throws Throwable {
        org.joda.time.chrono.IslamicChronology islamicChronology0 = org.joda.time.chrono.IslamicChronology.getInstance();
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.Chronology chronology3 = islamicChronology0.withZone(dateTimeZone2);
        chronology3.toString();
        chronology3.hashCode();
        org.junit.Assert.assertTrue(chronology3.equals(chronology3));
    }

    @Test
    public void test1381() throws Throwable {
        java.lang.Object object0 = null;
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeUtils.getZone(dateTimeZone2);
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime(object0, dateTimeZone3);
        localTime4.toString();
        localTime4.hashCode();
        org.junit.Assert.assertTrue(localTime4.equals(localTime4));
    }

    @Test
    public void test1382() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.chrono.StrictChronology strictChronology2 = org.joda.time.chrono.StrictChronology.getInstance(chronology1);
        java.lang.Object object3 = null;
        boolean boolean4 = strictChronology2.equals(object3);
    }

    @Test
    public void test1383() throws Throwable {
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.YearMonthDay yearMonthDay2 = yearMonthDay1.plusYears(1);
        yearMonthDay2.toString();
        yearMonthDay2.hashCode();
        org.junit.Assert.assertTrue(yearMonthDay2.equals(yearMonthDay2));
    }

    @Test
    public void test1384() throws Throwable {
        org.joda.time.field.DividedDateTimeField add0 = null;
        long long1 = add0.add(1, 1);
    }

    @Test
    public void test1385() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInstant0, readableInstant1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        int[] intArr4 = chronology2.get(readablePeriod3, 1);
        intArr4.toString();
        intArr4.hashCode();
        org.junit.Assert.assertTrue(intArr4.equals(intArr4));
    }

    @Test
    public void test1386() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.minutes();
        org.joda.time.Period period3 = new org.joda.time.Period(readableInstant0, readableInstant1, periodType2);
        period3.toString();
        period3.hashCode();
        org.junit.Assert.assertTrue(period3.equals(period3));
    }

    @Test
    public void test1387() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(1, chronology1);
        org.joda.time.DurationFieldType durationFieldType3 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withFieldAdded(durationFieldType3, 1);
        localDateTime4.toString();
        localDateTime4.hashCode();
        org.junit.Assert.assertTrue(localDateTime4.equals(localDateTime4));
    }

    @Test
    public void test1388() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay(1, 1, chronology1);
        timeOfDay2.toString();
        timeOfDay2.hashCode();
        org.junit.Assert.assertTrue(timeOfDay2.equals(timeOfDay2));
    }

    @Test
    public void test1389() throws Throwable {
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight(1, 1, 1);
        org.joda.time.DateMidnight dateMidnight1 = dateMidnight0.withMonthOfYear(1);
        dateMidnight1.toString();
        dateMidnight1.hashCode();
        org.junit.Assert.assertTrue(dateMidnight1.equals(dateMidnight1));
    }

    @Test
    public void test1390() throws Throwable {
        java.lang.Object object0 = null;
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.minutes();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.Chronology chronology4 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInstant2, readableInstant3);
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod(object0, periodType1, chronology4);
        int int6 = mutablePeriod5.getMillis();
    }

    @Test
    public void test1391() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Weeks weeks2 = org.joda.time.Weeks.weeksBetween(readableInstant0, readableInstant1);
        weeks2.toString();
        weeks2.hashCode();
        org.junit.Assert.assertTrue(weeks2.equals(weeks2));
    }

    @Test
    public void test1392() throws Throwable {
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendMinutes();
        periodFormatterBuilder1.toString();
        periodFormatterBuilder1.hashCode();
        org.junit.Assert.assertTrue(periodFormatterBuilder1.equals(periodFormatterBuilder1));
    }

    @Test
    public void test1393() throws Throwable {
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.weekDateTimeNoMillis();
        dateTimeFormatter0.toString();
        dateTimeFormatter0.hashCode();
        org.junit.Assert.assertTrue(dateTimeFormatter0.equals(dateTimeFormatter0));
    }

    @Test
    public void test1394() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket3 = new org.joda.time.format.DateTimeParserBucket(1, chronology1, locale2);
        int int4 = dateTimeParserBucket3.getOffset();
    }

    @Test
    public void test1395() throws Throwable {
        java.lang.Object object0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(object0);
        org.joda.time.LocalDate.Property property2 = localDate1.dayOfMonth();
        property2.toString();
        property2.hashCode();
        org.junit.Assert.assertTrue(property2.equals(property2));
    }

    @Test
    public void test1396() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = partial1.getFormatter();
        dateTimeFormatter2.toString();
        dateTimeFormatter2.hashCode();
        org.junit.Assert.assertTrue(dateTimeFormatter2.equals(dateTimeFormatter2));
    }

    @Test
    public void test1397() throws Throwable {
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendTwoDigitWeekyear(1, true);
        dateTimeFormatterBuilder1.toString();
        dateTimeFormatterBuilder1.hashCode();
        org.junit.Assert.assertTrue(dateTimeFormatterBuilder1.equals(dateTimeFormatterBuilder1));
    }

    @Test
    public void test1398() throws Throwable {
        java.lang.Object object0 = null;
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay(object0);
        org.joda.time.TimeOfDay timeOfDay2 = timeOfDay1.minusSeconds(1);
        timeOfDay2.toString();
        timeOfDay2.hashCode();
        org.junit.Assert.assertTrue(timeOfDay2.equals(timeOfDay2));
    }

    @Test
    public void test1399() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(1, 1, 1, 1, chronology1);
        org.joda.time.LocalTime localTime3 = localTime2.plusHours(1);
        localTime3.toString();
        localTime3.hashCode();
        org.junit.Assert.assertTrue(localTime3.equals(localTime3));
    }

    @Test
    public void test1400() throws Throwable {
        org.joda.time.MonthDay monthDay0 = new org.joda.time.MonthDay(1, 1);
        org.joda.time.MonthDay monthDay1 = monthDay0.plusDays(1);
        monthDay1.toString();
        monthDay1.hashCode();
        org.junit.Assert.assertTrue(monthDay1.equals(monthDay1));
    }

    @Test
    public void test1401() throws Throwable {
        java.lang.Object object0 = null;
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.minutes();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.Chronology chronology4 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInstant2, readableInstant3);
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod(object0, periodType1, chronology4);
        mutablePeriod5.setMonths(1);
    }

    @Test
    public void test1402() throws Throwable {
        java.lang.Object object0 = null;
        org.joda.time.Duration duration1 = new org.joda.time.Duration(object0);
        org.joda.time.Duration duration2 = duration1.multipliedBy(1);
        duration2.toString();
        duration2.hashCode();
        org.junit.Assert.assertTrue(duration2.equals(duration2));
    }

    @Test
    public void test1403() throws Throwable {
        java.lang.String string0 = null;
        org.joda.time.Months months1 = org.joda.time.Months.parseMonths(string0);
        org.joda.time.Months months2 = months1.multipliedBy(1);
        months2.toString();
        months2.hashCode();
        org.junit.Assert.assertTrue(months2.equals(months2));
    }

    @Test
    public void test1404() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(1, 1, chronology1);
        mutableInterval2.setStartMillis(1);
    }

    @Test
    public void test1405() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone2 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone1);
        java.lang.Object object3 = null;
        boolean boolean4 = cachedDateTimeZone2.equals(object3);
    }

    @Test
    public void test1406() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(1, 1, 1, 1, 1, dateTimeZone1);
        org.joda.time.LocalTime localTime3 = dateTime2.toLocalTime();
        localTime3.toString();
        localTime3.hashCode();
        org.junit.Assert.assertTrue(localTime3.equals(localTime3));
    }

    @Test
    public void test1407() throws Throwable {
        java.lang.Object object0 = null;
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.Period period2 = new org.joda.time.Period(object0, periodType1);
        int int3 = period2.getDays();
    }

    @Test
    public void test1408() throws Throwable {
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime(1, 1, 1, 1, 1, 1, 1);
        org.joda.time.LocalDateTime localDateTime1 = localDateTime0.plusMonths(1);
        localDateTime1.toString();
        localDateTime1.hashCode();
        org.junit.Assert.assertTrue(localDateTime1.equals(localDateTime1));
    }

    @Test
    public void test1409() throws Throwable {
        org.joda.time.chrono.EthiopicChronology ethiopicChronology0 = org.joda.time.chrono.EthiopicChronology.getInstanceUTC();
        ethiopicChronology0.toString();
        ethiopicChronology0.hashCode();
        org.junit.Assert.assertTrue(ethiopicChronology0.equals(ethiopicChronology0));
    }

    @Test
    public void test1410() throws Throwable {
        org.joda.time.Duration duration0 = org.joda.time.Duration.standardMinutes(1);
        org.joda.time.Duration duration1 = duration0.dividedBy(1);
        duration1.toString();
        duration1.hashCode();
        org.junit.Assert.assertTrue(duration1.equals(duration1));
    }

    @Test
    public void test1411() throws Throwable {
        org.joda.time.Days days0 = org.joda.time.Days.days(1);
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Days days3 = org.joda.time.Days.daysIn(readableInterval2);
        boolean boolean4 = days0.isLessThan(days3);
    }

    @Test
    public void test1412() throws Throwable {
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder0.append(dateTimePrinter1, dateTimeParser2);
        dateTimeFormatterBuilder3.toString();
        dateTimeFormatterBuilder3.hashCode();
        org.junit.Assert.assertTrue(dateTimeFormatterBuilder3.equals(dateTimeFormatterBuilder3));
    }

    @Test
    public void test1413() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay(1, 1, 1, 1, chronology0);
        int int2 = timeOfDay1.getMinuteOfHour();
    }

    @Test
    public void test1414() throws Throwable {
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.Interval interval4 = yearMonthDay1.toInterval(dateTimeZone3);
        interval4.toString();
        interval4.hashCode();
        org.junit.Assert.assertTrue(interval4.equals(interval4));
    }

    @Test
    public void test1415() throws Throwable {
        org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder0 = new org.joda.time.tz.DateTimeZoneBuilder();
        java.lang.String string1 = null;
        org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder2 = dateTimeZoneBuilder0.setFixedSavings(string1, 1);
        dateTimeZoneBuilder2.toString();
        dateTimeZoneBuilder2.hashCode();
        org.junit.Assert.assertTrue(dateTimeZoneBuilder2.equals(dateTimeZoneBuilder2));
    }

    @Test
    public void test1416() throws Throwable {
        org.joda.time.field.DelegatedDateTimeField getMaximumShortTextLength0 = null;
        java.util.Locale locale1 = null;
        int int2 = getMaximumShortTextLength0.getMaximumShortTextLength(locale1);
    }

    @Test
    public void test1417() throws Throwable {
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.time();
        org.joda.time.Period period1 = new org.joda.time.Period(1, 1, periodType0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Period period3 = period1.withFields(readablePeriod2);
        period3.toString();
        period3.hashCode();
        org.junit.Assert.assertTrue(period3.equals(period3));
    }

    @Test
    public void test1418() throws Throwable {
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.minutes(1);
        java.lang.String string1 = null;
        org.joda.time.Minutes minutes2 = org.joda.time.Minutes.parseMinutes(string1);
        boolean boolean3 = minutes0.isGreaterThan(minutes2);
    }

    @Test
    public void test1419() throws Throwable {
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay(1, 1, 1, 1);
        org.joda.time.DateTime dateTime1 = timeOfDay0.toDateTimeToday();
        dateTime1.toString();
        dateTime1.hashCode();
        org.junit.Assert.assertTrue(dateTime1.equals(dateTime1));
    }

    @Test
    public void test1420() throws Throwable {
        org.joda.time.format.PeriodFormatter periodFormatter0 = org.joda.time.format.ISOPeriodFormat.standard();
        periodFormatter0.toString();
        periodFormatter0.hashCode();
        org.junit.Assert.assertTrue(periodFormatter0.equals(periodFormatter0));
    }

    @Test
    public void test1421() throws Throwable {
        java.lang.Object object0 = null;
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime(object0, dateTimeZone2);
        java.lang.String string4 = null;
        java.lang.String string5 = localDateTime3.toString(string4);
        string5.toString();
        string5.hashCode();
        org.junit.Assert.assertTrue(string5.equals(string5));
    }

    @Test
    public void test1422() throws Throwable {
        java.lang.String string0 = null;
        org.joda.time.LocalDate localDate1 = org.joda.time.LocalDate.parse(string0);
        localDate1.toString();
        localDate1.hashCode();
        org.junit.Assert.assertTrue(localDate1.equals(localDate1));
    }

    @Test
    public void test1423() throws Throwable {
        org.joda.time.ReadablePeriod readablePeriod0 = null;
        org.joda.time.Seconds seconds1 = org.joda.time.Seconds.standardSecondsIn(readablePeriod0);
        org.joda.time.Duration duration2 = seconds1.toStandardDuration();
        duration2.toString();
        duration2.hashCode();
        org.junit.Assert.assertTrue(duration2.equals(duration2));
    }

    @Test
    public void test1424() throws Throwable {
        org.joda.time.Period period0 = org.joda.time.Period.months(1);
        org.joda.time.Period period1 = period0.minusMonths(1);
        period1.toString();
        period1.hashCode();
        org.junit.Assert.assertTrue(period1.equals(period1));
    }

    @Test
    public void test1425() throws Throwable {
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArr0 = null;
        int[] intArr1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(dateTimeFieldTypeArr0, intArr1);
        partial2.toString();
        partial2.hashCode();
        org.junit.Assert.assertTrue(partial2.equals(partial2));
    }

    @Test
    public void test1426() throws Throwable {
        java.lang.String string0 = null;
        org.joda.time.Months months1 = org.joda.time.Months.parseMonths(string0);
        java.lang.String string2 = months1.toString();
        string2.toString();
        string2.hashCode();
        org.junit.Assert.assertTrue(string2.equals(string2));
    }

    @Test
    public void test1427() throws Throwable {
        java.lang.String string0 = null;
        org.joda.time.Minutes minutes1 = org.joda.time.Minutes.parseMinutes(string0);
        java.lang.String string2 = null;
        org.joda.time.Minutes minutes3 = org.joda.time.Minutes.parseMinutes(string2);
        org.joda.time.Minutes minutes4 = minutes1.plus(minutes3);
        minutes4.toString();
        minutes4.hashCode();
        org.junit.Assert.assertTrue(minutes4.equals(minutes4));
    }

    @Test
    public void test1428() throws Throwable {
        java.lang.Object object0 = null;
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.Chronology chronology4 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInstant2, readableInstant3);
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod(object0, periodType1, chronology4);
        mutablePeriod5.setSeconds(1);
    }

    @Test
    public void test1429() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay(1, chronology1);
        yearMonthDay2.toString();
        yearMonthDay2.hashCode();
        org.junit.Assert.assertTrue(yearMonthDay2.equals(yearMonthDay2));
    }

    @Test
    public void test1430() throws Throwable {
        org.joda.time.field.OffsetDateTimeField getLeapAmount0 = null;
        int int1 = getLeapAmount0.getLeapAmount(1);
    }

    @Test
    public void test1431() throws Throwable {
        java.lang.Throwable throwable0 = null;
        boolean boolean1 = org.joda.time.IllegalInstantException.isIllegalInstant(throwable0);
    }

    @Test
    public void test1432() throws Throwable {
        org.joda.time.Days days0 = org.joda.time.Days.days(1);
        org.joda.time.Weeks weeks1 = days0.toStandardWeeks();
        weeks1.toString();
        weeks1.hashCode();
        org.junit.Assert.assertTrue(weeks1.equals(weeks1));
    }

    @Test
    public void test1433() throws Throwable {
        java.lang.Object object0 = null;
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime(object0, dateTimeZone2);
        int int4 = localDateTime3.getDayOfWeek();
    }

    @Test
    public void test1434() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeUtils.getZone(dateTimeZone1);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(1, 1, 1, 1, 1, 1, dateTimeZone2);
        org.joda.time.DateTime dateTime4 = dateTime3.minusDays(1);
        dateTime4.toString();
        dateTime4.hashCode();
        org.junit.Assert.assertTrue(dateTime4.equals(dateTime4));
    }

    @Test
    public void test1435() throws Throwable {
        org.joda.time.field.RemainderDateTimeField roundHalfEven0 = null;
        long long1 = roundHalfEven0.roundHalfEven(1);
    }

    @Test
    public void test1436() throws Throwable {
        org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder0 = new org.joda.time.tz.DateTimeZoneBuilder();
        java.lang.String string1 = null;
        java.io.DataOutput dataOutput2 = null;
        dateTimeZoneBuilder0.writeTo(string1, dataOutput2);
    }

    @Test
    public void test1437() throws Throwable {
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.date();
        dateTimeFormatter0.toString();
        dateTimeFormatter0.hashCode();
        org.junit.Assert.assertTrue(dateTimeFormatter0.equals(dateTimeFormatter0));
    }

    @Test
    public void test1438() throws Throwable {
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(1, 1, 1, 1, 1, 1, dateTimeZone0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.Chronology chronology4 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInstant2, readableInstant3);
        org.joda.time.DateTime dateTime5 = dateTime1.toDateTime(chronology4);
        dateTime5.toString();
        dateTime5.hashCode();
        org.junit.Assert.assertTrue(dateTime5.equals(dateTime5));
    }

    @Test
    public void test1439() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(1, 1, 1, 1, 1, dateTimeZone1);
        org.joda.time.DateTime dateTime3 = dateTime2.minusDays(1);
        dateTime3.toString();
        dateTime3.hashCode();
        org.junit.Assert.assertTrue(dateTime3.equals(dateTime3));
    }

    @Test
    public void test1440() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(1, 1, chronology1);
        mutableInterval2.toString();
        mutableInterval2.hashCode();
        org.junit.Assert.assertTrue(mutableInterval2.equals(mutableInterval2));
    }

    @Test
    public void test1441() throws Throwable {
        java.lang.String string0 = null;
        org.joda.time.Duration duration1 = org.joda.time.Duration.parse(string0);
        org.joda.time.Hours hours2 = duration1.toStandardHours();
        hours2.toString();
        hours2.hashCode();
        org.junit.Assert.assertTrue(hours2.equals(hours2));
    }

    @Test
    public void test1442() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeUtils.getZone(dateTimeZone1);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(1, dateTimeZone2);
        org.joda.time.DateTime dateTime4 = dateTime3.toDateTime();
        dateTime4.toString();
        dateTime4.hashCode();
        org.junit.Assert.assertTrue(dateTime4.equals(dateTime4));
    }

    @Test
    public void test1443() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime(1, 1, 1, 1, 1, 1, 1, chronology1);
        mutableDateTime2.toString();
        mutableDateTime2.hashCode();
        org.junit.Assert.assertTrue(mutableDateTime2.equals(mutableDateTime2));
    }

    @Test
    public void test1444() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeUtils.getZone(dateTimeZone1);
        org.joda.time.LocalTime localTime3 = org.joda.time.LocalTime.now(dateTimeZone2);
        localTime3.toString();
        localTime3.hashCode();
        org.junit.Assert.assertTrue(localTime3.equals(localTime3));
    }

    @Test
    public void test1445() throws Throwable {
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.dateHourMinuteSecondFraction();
        int int1 = dateTimeFormatter0.getDefaultYear();
    }

    @Test
    public void test1446() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableInstant0, readableDuration1);
        java.lang.Object object3 = mutableInterval2.clone();
        object3.toString();
        object3.hashCode();
        org.junit.Assert.assertTrue(object3.equals(object3));
    }

    @Test
    public void test1447() throws Throwable {
        org.joda.time.PeriodType periodType0 = null;
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Period period2 = new org.joda.time.Period(1, periodType0, chronology1);
        org.joda.time.Period period3 = period2.minusMillis(1);
        period3.toString();
        period3.hashCode();
        org.junit.Assert.assertTrue(period3.equals(period3));
    }

    @Test
    public void test1448() throws Throwable {
        org.joda.time.MonthDay.Property setCopy0 = null;
        org.joda.time.MonthDay monthDay1 = setCopy0.setCopy(1);
        monthDay1.toString();
        monthDay1.hashCode();
        org.junit.Assert.assertTrue(monthDay1.equals(monthDay1));
    }

    @Test
    public void test1449() throws Throwable {
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Days days2 = org.joda.time.Days.daysIn(readableInterval1);
        org.joda.time.ReadableInterval readableInterval3 = null;
        org.joda.time.ReadableInterval readableInterval4 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval3);
        org.joda.time.Days days5 = org.joda.time.Days.daysIn(readableInterval4);
        boolean boolean6 = days2.isLessThan(days5);
    }

    @Test
    public void test1450() throws Throwable {
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.yearMonthDay();
        boolean boolean1 = dateTimeFormatter0.isPrinter();
    }

    @Test
    public void test1451() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeUtils.getZone(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone2);
        java.lang.Object object4 = null;
        boolean boolean5 = localDateTime3.equals(object4);
    }

    @Test
    public void test1452() throws Throwable {
        java.lang.Object object0 = null;
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getChronology(chronology1);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(object0, chronology2);
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        org.joda.time.Interval interval6 = localDate3.toInterval(dateTimeZone5);
        interval6.toString();
        interval6.hashCode();
        org.junit.Assert.assertTrue(interval6.equals(interval6));
    }

    @Test
    public void test1453() throws Throwable {
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.minimumPrintedDigits(1);
        periodFormatterBuilder1.toString();
        periodFormatterBuilder1.hashCode();
        org.junit.Assert.assertTrue(periodFormatterBuilder1.equals(periodFormatterBuilder1));
    }

    @Test
    public void test1454() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime(chronology1);
        mutableDateTime2.setDayOfYear(1);
    }

    @Test
    public void test1455() throws Throwable {
        org.joda.time.ReadablePeriod readablePeriod0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readablePeriod0, readableInstant1);
        mutableInterval2.toString();
        mutableInterval2.hashCode();
        org.junit.Assert.assertTrue(mutableInterval2.equals(mutableInterval2));
    }

    @Test
    public void test1456() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInstant0, readableInstant1);
        org.joda.time.LocalTime localTime3 = org.joda.time.LocalTime.now(chronology2);
        int int4 = localTime3.size();
    }

    @Test
    public void test1457() throws Throwable {
        org.joda.time.DateTimeField set0 = null;
        java.lang.String string1 = null;
        java.util.Locale locale2 = null;
        long long3 = set0.set(1, string1, locale2);
    }

    @Test
    public void test1458() throws Throwable {
        org.joda.time.Period period0 = new org.joda.time.Period(1, 1, 1, 1, 1, 1, 1, 1);
        org.joda.time.Period period1 = period0.withWeeks(1);
        period1.toString();
        period1.hashCode();
        org.junit.Assert.assertTrue(period1.equals(period1));
    }

    @Test
    public void test1459() throws Throwable {
        org.joda.time.MonthDay monthDay0 = org.joda.time.MonthDay.now();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        org.joda.time.MonthDay.Property property2 = monthDay0.property(dateTimeFieldType1);
        property2.toString();
        property2.hashCode();
        org.junit.Assert.assertTrue(property2.equals(property2));
    }

    @Test
    public void test1460() throws Throwable {
        java.lang.String string0 = null;
        org.joda.time.IllegalInstantException illegalInstantException1 = new org.joda.time.IllegalInstantException(1, string0);
        illegalInstantException1.toString();
        illegalInstantException1.hashCode();
        org.junit.Assert.assertTrue(illegalInstantException1.equals(illegalInstantException1));
    }

    @Test
    public void test1461() throws Throwable {
        java.lang.Object object0 = null;
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.minutes();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.Chronology chronology4 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInstant2, readableInstant3);
        org.joda.time.Period period5 = new org.joda.time.Period(object0, periodType1, chronology4);
        org.joda.time.Period period6 = period5.plusMillis(1);
        period6.toString();
        period6.hashCode();
        org.junit.Assert.assertTrue(period6.equals(period6));
    }

    @Test
    public void test1462() throws Throwable {
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTimeISO();
        mutableDateTime1.toString();
        mutableDateTime1.hashCode();
        org.junit.Assert.assertTrue(mutableDateTime1.equals(mutableDateTime1));
    }

    @Test
    public void test1463() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DurationField durationField2 = chronology1.days();
        durationField2.toString();
        durationField2.hashCode();
        org.junit.Assert.assertTrue(durationField2.equals(durationField2));
    }

    @Test
    public void test1464() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(1, chronology1);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime2.plusMonths(1);
        localDateTime3.toString();
        localDateTime3.hashCode();
        org.junit.Assert.assertTrue(localDateTime3.equals(localDateTime3));
    }

    @Test
    public void test1465() throws Throwable {
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeconds();
        periodFormatterBuilder1.toString();
        periodFormatterBuilder1.hashCode();
        org.junit.Assert.assertTrue(periodFormatterBuilder1.equals(periodFormatterBuilder1));
    }

    @Test
    public void test1466() throws Throwable {
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime(1, 1, 1, 1, 1, 1, 1);
        mutableDateTime0.setTime(1);
    }

    @Test
    public void test1467() throws Throwable {
        org.joda.time.Instant instant0 = new org.joda.time.Instant(1);
        org.joda.time.DateTime dateTime1 = instant0.toDateTimeISO();
        dateTime1.toString();
        dateTime1.hashCode();
        org.junit.Assert.assertTrue(dateTime1.equals(dateTime1));
    }

    @Test
    public void test1468() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(1, chronology0);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.monthOfYear();
        property2.toString();
        property2.hashCode();
        org.junit.Assert.assertTrue(property2.equals(property2));
    }

    @Test
    public void test1469() throws Throwable {
        java.util.Collection<org.joda.time.DateTimeFieldType> collection0 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = org.joda.time.format.ISODateTimeFormat.forFields(collection0, true, true);
        dateTimeFormatter1.toString();
        dateTimeFormatter1.hashCode();
        org.junit.Assert.assertTrue(dateTimeFormatter1.equals(dateTimeFormatter1));
    }

    @Test
    public void test1470() throws Throwable {
        org.joda.time.MutableDateTime.Property roundFloor0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = roundFloor0.roundFloor();
        mutableDateTime1.toString();
        mutableDateTime1.hashCode();
        org.junit.Assert.assertTrue(mutableDateTime1.equals(mutableDateTime1));
    }

    @Test
    public void test1471() throws Throwable {
        org.joda.time.DurationField getValueAsLong0 = null;
        long long1 = getValueAsLong0.getValueAsLong(1);
    }

    @Test
    public void test1472() throws Throwable {
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.days();
        org.joda.time.Period period1 = new org.joda.time.Period(1, periodType0);
        period1.toString();
        period1.hashCode();
        org.junit.Assert.assertTrue(period1.equals(period1));
    }

    @Test
    public void test1473() throws Throwable {
        java.lang.Object object0 = null;
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getChronology(chronology1);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(object0, chronology2);
        org.joda.time.DateTime.Property property4 = dateTime3.weekOfWeekyear();
        property4.toString();
        property4.hashCode();
        org.junit.Assert.assertTrue(property4.equals(property4));
    }

    @Test
    public void test1474() throws Throwable {
        org.joda.time.LocalDateTime.Property roundCeilingCopy0 = null;
        org.joda.time.LocalDateTime localDateTime1 = roundCeilingCopy0.roundCeilingCopy();
        localDateTime1.toString();
        localDateTime1.hashCode();
        org.junit.Assert.assertTrue(localDateTime1.equals(localDateTime1));
    }

    @Test
    public void test1475() throws Throwable {
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.Period period3 = new org.joda.time.Period(readableDuration0, readableInstant1, periodType2);
        org.joda.time.Days days4 = period3.toStandardDays();
        days4.toString();
        days4.hashCode();
        org.junit.Assert.assertTrue(days4.equals(days4));
    }

    @Test
    public void test1476() throws Throwable {
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        boolean boolean3 = periodFormatter2.isParser();
    }

    @Test
    public void test1477() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.ReadableDateTime readableDateTime2 = null;
        org.joda.time.ReadableDateTime readableDateTime3 = null;
        org.joda.time.chrono.LimitChronology limitChronology4 = org.joda.time.chrono.LimitChronology.getInstance(chronology1, readableDateTime2, readableDateTime3);
        long long5 = limitChronology4.getDateTimeMillis(1, 1, 1, 1, 1, 1, 1);
    }

    @Test
    public void test1478() throws Throwable {
        java.lang.Object object0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInstant1, readableInstant2);
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay(object0, chronology3);
        timeOfDay4.toString();
        timeOfDay4.hashCode();
        org.junit.Assert.assertTrue(timeOfDay4.equals(timeOfDay4));
    }

    @Test
    public void test1479() throws Throwable {
        org.joda.time.Partial.Property withMaximumValue0 = null;
        org.joda.time.Partial partial1 = withMaximumValue0.withMaximumValue();
        partial1.toString();
        partial1.hashCode();
        org.junit.Assert.assertTrue(partial1.equals(partial1));
    }

    @Test
    public void test1480() throws Throwable {
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(1, 1, 1, 1, 1, 1, dateTimeZone0);
        org.joda.time.DateTime dateTime2 = dateTime1.withYearOfEra(1);
        dateTime2.toString();
        dateTime2.hashCode();
        org.junit.Assert.assertTrue(dateTime2.equals(dateTime2));
    }

    @Test
    public void test1481() throws Throwable {
        org.joda.time.ReadablePeriod readablePeriod0 = null;
        org.joda.time.Seconds seconds1 = org.joda.time.Seconds.standardSecondsIn(readablePeriod0);
        org.joda.time.PeriodType periodType2 = seconds1.getPeriodType();
        periodType2.toString();
        periodType2.hashCode();
        org.junit.Assert.assertTrue(periodType2.equals(periodType2));
    }

    @Test
    public void test1482() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(1, 1, 1, 1, 1, 1, 1, chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.monthOfYear();
        property3.toString();
        property3.hashCode();
        org.junit.Assert.assertTrue(property3.equals(property3));
    }

    @Test
    public void test1483() throws Throwable {
        org.joda.time.DateTimeComparator dateTimeComparator0 = org.joda.time.DateTimeComparator.getTimeOnlyInstance();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = dateTimeComparator0.getUpperLimit();
        dateTimeFieldType1.toString();
        dateTimeFieldType1.hashCode();
        org.junit.Assert.assertTrue(dateTimeFieldType1.equals(dateTimeFieldType1));
    }

    @Test
    public void test1484() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime(chronology1);
        org.joda.time.DurationFieldType durationFieldType3 = org.joda.time.DurationFieldType.centuries();
        mutableDateTime2.add(durationFieldType3, 1);
    }

    @Test
    public void test1485() throws Throwable {
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        yearMonthDay0.toString();
        yearMonthDay0.hashCode();
        org.junit.Assert.assertTrue(yearMonthDay0.equals(yearMonthDay0));
    }

    @Test
    public void test1486() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeUtils.getZone(dateTimeZone1);
        java.util.TimeZone timeZone3 = null;
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(dateTimeZone4);
        boolean boolean6 = dateTimeZone2.isLocalDateTimeGap(localDateTime5);
    }

    @Test
    public void test1487() throws Throwable {
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Instant instant1 = instant0.withDurationAdded(1, 1);
        instant1.toString();
        instant1.hashCode();
        org.junit.Assert.assertTrue(instant1.equals(instant1));
    }

    @Test
    public void test1488() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.minuteOfDay();
        dateTimeField2.toString();
        dateTimeField2.hashCode();
        org.junit.Assert.assertTrue(dateTimeField2.equals(dateTimeField2));
    }

    @Test
    public void test1489() throws Throwable {
        org.joda.time.Days days0 = org.joda.time.Days.days(1);
        org.joda.time.Seconds seconds1 = days0.toStandardSeconds();
        seconds1.toString();
        seconds1.hashCode();
        org.junit.Assert.assertTrue(seconds1.equals(seconds1));
    }

    @Test
    public void test1490() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeUtils.getZone(dateTimeZone1);
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime(dateTimeZone2);
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime3.millisOfSecond();
        property4.toString();
        property4.hashCode();
        org.junit.Assert.assertTrue(property4.equals(property4));
    }

    @Test
    public void test1491() throws Throwable {
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.years();
        org.joda.time.field.UnsupportedDurationField unsupportedDurationField1 = org.joda.time.field.UnsupportedDurationField.getInstance(durationFieldType0);
        int int2 = unsupportedDurationField1.hashCode();
    }

    @Test
    public void test1492() throws Throwable {
        org.joda.time.format.PeriodFormatter periodFormatter0 = org.joda.time.format.PeriodFormat.getDefault();
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        java.lang.String string2 = periodFormatter0.print(readablePeriod1);
        string2.toString();
        string2.hashCode();
        org.junit.Assert.assertTrue(string2.equals(string2));
    }

    @Test
    public void test1493() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.now(chronology1);
        org.joda.time.DateTime dateTime3 = localTime2.toDateTimeToday();
        dateTime3.toString();
        dateTime3.hashCode();
        org.junit.Assert.assertTrue(dateTime3.equals(dateTime3));
    }

    @Test
    public void test1494() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now(chronology1);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime2.withDayOfWeek(1);
        localDateTime3.toString();
        localDateTime3.hashCode();
        org.junit.Assert.assertTrue(localDateTime3.equals(localDateTime3));
    }

    @Test
    public void test1495() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.YearMonth yearMonth2 = new org.joda.time.YearMonth(1, chronology1);
        org.joda.time.LocalDate localDate3 = yearMonth2.toLocalDate(1);
        localDate3.toString();
        localDate3.hashCode();
        org.junit.Assert.assertTrue(localDate3.equals(localDate3));
    }

    @Test
    public void test1496() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeUtils.getZone(dateTimeZone1);
        org.joda.time.chrono.BuddhistChronology buddhistChronology3 = org.joda.time.chrono.BuddhistChronology.getInstance(dateTimeZone2);
        buddhistChronology3.toString();
        buddhistChronology3.hashCode();
        org.junit.Assert.assertTrue(buddhistChronology3.equals(buddhistChronology3));
    }

    @Test
    public void test1497() throws Throwable {
        java.lang.String string0 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = org.joda.time.format.ISODateTimeFormat.basicOrdinalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.parse(string0, dateTimeFormatter1);
        localDateTime2.toString();
        localDateTime2.hashCode();
        org.junit.Assert.assertTrue(localDateTime2.equals(localDateTime2));
    }

    @Test
    public void test1498() throws Throwable {
        java.lang.Object object0 = null;
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(object0);
        org.joda.time.LocalTime.Property property2 = localTime1.millisOfSecond();
        property2.toString();
        property2.hashCode();
        org.junit.Assert.assertTrue(property2.equals(property2));
    }

    @Test
    public void test1499() throws Throwable {
        org.joda.time.DateTime.Property roundCeilingCopy0 = null;
        org.joda.time.DateTime dateTime1 = roundCeilingCopy0.roundCeilingCopy();
        dateTime1.toString();
        dateTime1.hashCode();
        org.junit.Assert.assertTrue(dateTime1.equals(dateTime1));
    }

    @Test
    public void test1500() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DurationField durationField2 = chronology1.seconds();
        durationField2.toString();
        durationField2.hashCode();
        org.junit.Assert.assertTrue(durationField2.equals(durationField2));
    }

    @Test
    public void test1501() throws Throwable {
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.time();
        org.joda.time.Period period1 = new org.joda.time.Period(1, periodType0);
        org.joda.time.Period period2 = period1.minusMillis(1);
        period2.toString();
        period2.hashCode();
        org.junit.Assert.assertTrue(period2.equals(period2));
    }

    @Test
    public void test1502() throws Throwable {
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Weeks weeks3 = org.joda.time.Weeks.weeksIn(readableInterval2);
        org.joda.time.Weeks weeks4 = weeks3.negated();
        weeks4.toString();
        weeks4.hashCode();
        org.junit.Assert.assertTrue(weeks4.equals(weeks4));
    }

    @Test
    public void test1503() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeUtils.getZone(dateTimeZone1);
        org.joda.time.chrono.EthiopicChronology ethiopicChronology3 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone2, 1);
        ethiopicChronology3.toString();
        ethiopicChronology3.hashCode();
        org.junit.Assert.assertTrue(ethiopicChronology3.equals(ethiopicChronology3));
    }

    @Test
    public void test1504() throws Throwable {
        org.joda.time.Duration duration0 = org.joda.time.Duration.standardHours(1);
        long long1 = duration0.getStandardHours();
    }

    @Test
    public void test1505() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay(1, chronology1);
        org.joda.time.DurationFieldType durationFieldType3 = org.joda.time.DurationFieldType.years();
        org.joda.time.YearMonthDay yearMonthDay4 = yearMonthDay2.withFieldAdded(durationFieldType3, 1);
        yearMonthDay4.toString();
        yearMonthDay4.hashCode();
        org.junit.Assert.assertTrue(yearMonthDay4.equals(yearMonthDay4));
    }

    @Test
    public void test1506() throws Throwable {
        org.joda.time.DateTimeComparator dateTimeComparator0 = org.joda.time.DateTimeComparator.getInstance();
        java.lang.Object object1 = null;
        boolean boolean2 = dateTimeComparator0.equals(object1);
    }

    @Test
    public void test1507() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate.Property property2 = localDate1.dayOfMonth();
        property2.toString();
        property2.hashCode();
        org.junit.Assert.assertTrue(property2.equals(property2));
    }

    @Test
    public void test1508() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay(dateTimeZone1);
        timeOfDay2.toString();
        timeOfDay2.hashCode();
        org.junit.Assert.assertTrue(timeOfDay2.equals(timeOfDay2));
    }

    @Test
    public void test1509() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.Object object2 = null;
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(object2, chronology3);
        boolean boolean5 = dateTimeZone1.isLocalDateTimeGap(localDateTime4);
    }

    @Test
    public void test1510() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeUtils.getZone(dateTimeZone1);
        org.joda.time.chrono.BuddhistChronology buddhistChronology3 = org.joda.time.chrono.BuddhistChronology.getInstance(dateTimeZone2);
        org.joda.time.Chronology chronology4 = buddhistChronology3.withUTC();
        chronology4.toString();
        chronology4.hashCode();
        org.junit.Assert.assertTrue(chronology4.equals(chronology4));
    }

    @Test
    public void test1511() throws Throwable {
        java.lang.String string0 = null;
        org.joda.time.Duration duration1 = org.joda.time.Duration.parse(string0);
        org.joda.time.Duration duration2 = duration1.minus(1);
        duration2.toString();
        duration2.hashCode();
        org.junit.Assert.assertTrue(duration2.equals(duration2));
    }

    @Test
    public void test1512() throws Throwable {
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendSecondOfDay(1);
        dateTimeFormatterBuilder1.toString();
        dateTimeFormatterBuilder1.hashCode();
        org.junit.Assert.assertTrue(dateTimeFormatterBuilder1.equals(dateTimeFormatterBuilder1));
    }

    @Test
    public void test1513() throws Throwable {
        org.joda.time.field.DelegatedDateTimeField getType0 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = getType0.getType();
        dateTimeFieldType1.toString();
        dateTimeFieldType1.hashCode();
        org.junit.Assert.assertTrue(dateTimeFieldType1.equals(dateTimeFieldType1));
    }

    @Test
    public void test1514() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket3 = new org.joda.time.format.DateTimeParserBucket(1, chronology1, locale2);
        dateTimeParserBucket3.toString();
        dateTimeParserBucket3.hashCode();
        org.junit.Assert.assertTrue(dateTimeParserBucket3.equals(dateTimeParserBucket3));
    }

    @Test
    public void test1515() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInstant0, readableInstant1);
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth(1, 1, chronology2);
        org.joda.time.YearMonth yearMonth4 = yearMonth3.minusYears(1);
        yearMonth4.toString();
        yearMonth4.hashCode();
        org.junit.Assert.assertTrue(yearMonth4.equals(yearMonth4));
    }

    @Test
    public void test1516() throws Throwable {
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.dateTimeParser();
        dateTimeFormatter0.toString();
        dateTimeFormatter0.hashCode();
        org.junit.Assert.assertTrue(dateTimeFormatter0.equals(dateTimeFormatter0));
    }

    @Test
    public void test1517() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.Interval interval2 = new org.joda.time.Interval(1, 1, dateTimeZone1);
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Interval interval4 = interval2.withDurationBeforeEnd(readableDuration3);
        interval4.toString();
        interval4.hashCode();
        org.junit.Assert.assertTrue(interval4.equals(interval4));
    }

    @Test
    public void test1518() throws Throwable {
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.months();
        periodType0.toString();
        periodType0.hashCode();
        org.junit.Assert.assertTrue(periodType0.equals(periodType0));
    }

    @Test
    public void test1519() throws Throwable {
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.printZeroNever();
        periodFormatterBuilder1.toString();
        periodFormatterBuilder1.hashCode();
        org.junit.Assert.assertTrue(periodFormatterBuilder1.equals(periodFormatterBuilder1));
    }

    @Test
    public void test1520() throws Throwable {
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.hourMinuteSecond();
        dateTimeFormatter0.toString();
        dateTimeFormatter0.hashCode();
        org.junit.Assert.assertTrue(dateTimeFormatter0.equals(dateTimeFormatter0));
    }

    @Test
    public void test1521() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.DurationField durationField2 = chronology1.centuries();
        durationField2.toString();
        durationField2.hashCode();
        org.junit.Assert.assertTrue(durationField2.equals(durationField2));
    }

    @Test
    public void test1522() throws Throwable {
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        int int1 = localDate0.getYearOfEra();
    }

    @Test
    public void test1523() throws Throwable {
        java.lang.Object object0 = null;
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth(object0);
        java.lang.String string2 = null;
        java.util.Locale locale3 = null;
        java.lang.String string4 = yearMonth1.toString(string2, locale3);
        string4.toString();
        string4.hashCode();
        org.junit.Assert.assertTrue(string4.equals(string4));
    }

    @Test
    public void test1524() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.dayOfYear();
        dateTimeField2.toString();
        dateTimeField2.hashCode();
        org.junit.Assert.assertTrue(dateTimeField2.equals(dateTimeField2));
    }

    @Test
    public void test1525() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay(1, 1, 1, 1, chronology0);
        org.joda.time.TimeOfDay timeOfDay2 = timeOfDay1.withSecondOfMinute(1);
        timeOfDay2.toString();
        timeOfDay2.hashCode();
        org.junit.Assert.assertTrue(timeOfDay2.equals(timeOfDay2));
    }

    @Test
    public void test1526() throws Throwable {
        org.joda.time.DateTimeField set0 = null;
        org.joda.time.ReadablePartial readablePartial1 = null;
        int[] intArr2 = null;
        java.lang.String string3 = null;
        java.util.Locale locale4 = null;
        int[] intArr5 = set0.set(readablePartial1, 1, intArr2, string3, locale4);
        intArr5.toString();
        intArr5.hashCode();
        org.junit.Assert.assertTrue(intArr5.equals(intArr5));
    }

    @Test
    public void test1527() throws Throwable {
        java.lang.Object object0 = null;
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getChronology(chronology1);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(object0, chronology2);
        org.joda.time.DateTime dateTime4 = dateTime3.plusYears(1);
        dateTime4.toString();
        dateTime4.hashCode();
        org.junit.Assert.assertTrue(dateTime4.equals(dateTime4));
    }

    @Test
    public void test1528() throws Throwable {
        org.joda.time.ReadablePeriod readablePeriod0 = null;
        org.joda.time.Weeks weeks1 = org.joda.time.Weeks.standardWeeksIn(readablePeriod0);
        weeks1.toString();
        weeks1.hashCode();
        org.junit.Assert.assertTrue(weeks1.equals(weeks1));
    }

    @Test
    public void test1529() throws Throwable {
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.ReadableInterval readableInterval3 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval2);
        readableInterval3.toString();
        readableInterval3.hashCode();
        org.junit.Assert.assertTrue(readableInterval3.equals(readableInterval3));
    }

    @Test
    public void test1530() throws Throwable {
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate(1);
        int int1 = localDate0.getValue(1);
    }

    @Test
    public void test1531() throws Throwable {
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.Number number1 = null;
        java.lang.Number number2 = null;
        java.lang.Number number3 = null;
        java.lang.String string4 = null;
        org.joda.time.IllegalFieldValueException illegalFieldValueException5 = new org.joda.time.IllegalFieldValueException(dateTimeFieldType0, number1, number2, number3, string4);
        illegalFieldValueException5.toString();
        illegalFieldValueException5.hashCode();
        org.junit.Assert.assertTrue(illegalFieldValueException5.equals(illegalFieldValueException5));
    }

    @Test
    public void test1532() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeUtils.getZone(dateTimeZone1);
        org.joda.time.LocalTime localTime3 = org.joda.time.LocalTime.now(dateTimeZone2);
        int int4 = localTime3.getHourOfDay();
    }

    @Test
    public void test1533() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.time();
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod(readableInstant0, readableInstant1, periodType2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.Chronology chronology5 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant4);
        mutablePeriod3.setPeriod(1, chronology5);
    }

    @Test
    public void test1534() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(1, chronology0);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight1.minus(readableDuration2);
        dateMidnight3.toString();
        dateMidnight3.hashCode();
        org.junit.Assert.assertTrue(dateMidnight3.equals(dateMidnight3));
    }

    @Test
    public void test1535() throws Throwable {
        java.lang.Object object0 = null;
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getChronology(chronology1);
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth(object0, chronology2);
        org.joda.time.YearMonth yearMonth4 = yearMonth3.plusYears(1);
        yearMonth4.toString();
        yearMonth4.hashCode();
        org.junit.Assert.assertTrue(yearMonth4.equals(yearMonth4));
    }

    @Test
    public void test1536() throws Throwable {
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime(1, 1, 1, 1, 1, 1);
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.DateTime dateTime2 = dateTime0.withPeriodAdded(readablePeriod1, 1);
        dateTime2.toString();
        dateTime2.hashCode();
        org.junit.Assert.assertTrue(dateTime2.equals(dateTime2));
    }

    @Test
    public void test1537() throws Throwable {
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(readableDuration0, readableInstant1);
        mutablePeriod2.setMonths(1);
    }

    @Test
    public void test1538() throws Throwable {
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.rejectSignedValues(true);
        periodFormatterBuilder1.toString();
        periodFormatterBuilder1.hashCode();
        org.junit.Assert.assertTrue(periodFormatterBuilder1.equals(periodFormatterBuilder1));
    }

    @Test
    public void test1539() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInstant0, readableInstant1);
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime(1, 1, 1, 1, 1, 1, 1, chronology2);
        localDateTime3.toString();
        localDateTime3.hashCode();
        org.junit.Assert.assertTrue(localDateTime3.equals(localDateTime3));
    }

    @Test
    public void test1540() throws Throwable {
        org.joda.time.Seconds seconds0 = org.joda.time.Seconds.seconds(1);
        seconds0.toString();
        seconds0.hashCode();
        org.junit.Assert.assertTrue(seconds0.equals(seconds0));
    }

    @Test
    public void test1541() throws Throwable {
        java.lang.Object object0 = null;
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getChronology(chronology1);
        org.joda.time.MonthDay monthDay3 = new org.joda.time.MonthDay(object0, chronology2);
        java.lang.String string4 = null;
        java.lang.String string5 = monthDay3.toString(string4);
        string5.toString();
        string5.hashCode();
        org.junit.Assert.assertTrue(string5.equals(string5));
    }

    @Test
    public void test1542() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.dayOfWeek();
        dateTimeField2.toString();
        dateTimeField2.hashCode();
        org.junit.Assert.assertTrue(dateTimeField2.equals(dateTimeField2));
    }

    @Test
    public void test1543() throws Throwable {
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight1 = dateMidnight0.minusWeeks(1);
        dateMidnight1.toString();
        dateMidnight1.hashCode();
        org.junit.Assert.assertTrue(dateMidnight1.equals(dateMidnight1));
    }

    @Test
    public void test1544() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        int int2 = localDate1.getMonthOfYear();
    }

    @Test
    public void test1545() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        java.util.Locale locale1 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket2 = new org.joda.time.format.DateTimeParserBucket(1, chronology0, locale1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.secondOfDay();
        dateTimeParserBucket2.saveField(dateTimeFieldType3, 1);
    }

    @Test
    public void test1546() throws Throwable {
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        dateTimeFieldType0.toString();
        dateTimeFieldType0.hashCode();
        org.junit.Assert.assertTrue(dateTimeFieldType0.equals(dateTimeFieldType0));
    }

    @Test
    public void test1547() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeUtils.getZone(dateTimeZone1);
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone2);
        int int4 = gJChronology3.getMinimumDaysInFirstWeek();
    }

    @Test
    public void test1548() throws Throwable {
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime(1, 1, 1, 1, 1, 1, 1);
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.weekyear();
        property1.toString();
        property1.hashCode();
        org.junit.Assert.assertTrue(property1.equals(property1));
    }

    @Test
    public void test1549() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay(1, 1, chronology1);
        org.joda.time.TimeOfDay timeOfDay3 = timeOfDay2.withMillisOfSecond(1);
        timeOfDay3.toString();
        timeOfDay3.hashCode();
        org.junit.Assert.assertTrue(timeOfDay3.equals(timeOfDay3));
    }

    @Test
    public void test1550() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now(chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfWeek();
        property3.toString();
        property3.hashCode();
        org.junit.Assert.assertTrue(property3.equals(property3));
    }

    @Test
    public void test1551() throws Throwable {
        org.joda.time.field.DelegatedDateTimeField getMaximumValue0 = null;
        org.joda.time.ReadablePartial readablePartial1 = null;
        int[] intArr2 = null;
        int int3 = getMaximumValue0.getMaximumValue(readablePartial1, intArr2);
    }

    @Test
    public void test1552() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
    }

    @Test
    public void test1553() throws Throwable {
        org.joda.time.YearMonth yearMonth0 = new org.joda.time.YearMonth(1);
        yearMonth0.toString();
        yearMonth0.hashCode();
        org.junit.Assert.assertTrue(yearMonth0.equals(yearMonth0));
    }

    @Test
    public void test1554() throws Throwable {
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.ordinalDate();
        dateTimeFormatter0.toString();
        dateTimeFormatter0.hashCode();
        org.junit.Assert.assertTrue(dateTimeFormatter0.equals(dateTimeFormatter0));
    }

    @Test
    public void test1555() throws Throwable {
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay(1, 1, 1);
        timeOfDay0.toString();
        timeOfDay0.hashCode();
        org.junit.Assert.assertTrue(timeOfDay0.equals(timeOfDay0));
    }

    @Test
    public void test1556() throws Throwable {
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant1);
        boolean boolean3 = durationFieldType0.isSupported(chronology2);
    }

    @Test
    public void test1557() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime2.withWeekOfWeekyear(1);
        localDateTime3.toString();
        localDateTime3.hashCode();
        org.junit.Assert.assertTrue(localDateTime3.equals(localDateTime3));
    }

    @Test
    public void test1558() throws Throwable {
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight(1, 1, 1);
        org.joda.time.DateMidnight dateMidnight1 = dateMidnight0.plusDays(1);
        dateMidnight1.toString();
        dateMidnight1.hashCode();
        org.junit.Assert.assertTrue(dateMidnight1.equals(dateMidnight1));
    }

    @Test
    public void test1559() throws Throwable {
        org.joda.time.field.SkipUndoDateTimeField get0 = null;
        int int1 = get0.get(1);
    }

    @Test
    public void test1560() throws Throwable {
        java.lang.Object object0 = null;
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(object0, chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.yearOfEra();
        property3.toString();
        property3.hashCode();
        org.junit.Assert.assertTrue(property3.equals(property3));
    }

    @Test
    public void test1561() throws Throwable {
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay(1, 1, 1, 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = timeOfDay0.getFieldType(1);
        dateTimeFieldType1.toString();
        dateTimeFieldType1.hashCode();
        org.junit.Assert.assertTrue(dateTimeFieldType1.equals(dateTimeFieldType1));
    }

    @Test
    public void test1562() throws Throwable {
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay(1, 1, 1);
        java.lang.Object object1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.Chronology chronology4 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInstant2, readableInstant3);
        org.joda.time.TimeOfDay timeOfDay5 = new org.joda.time.TimeOfDay(object1, chronology4);
        org.joda.time.DateTime dateTime6 = yearMonthDay0.toDateTime(timeOfDay5);
        dateTime6.toString();
        dateTime6.hashCode();
        org.junit.Assert.assertTrue(dateTime6.equals(dateTime6));
    }

    @Test
    public void test1563() throws Throwable {
        org.joda.time.Period period0 = org.joda.time.Period.hours(1);
        org.joda.time.Period period1 = period0.minusHours(1);
        period1.toString();
        period1.hashCode();
        org.junit.Assert.assertTrue(period1.equals(period1));
    }

    @Test
    public void test1564() throws Throwable {
        java.lang.Object object0 = null;
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getChronology(chronology1);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(object0, chronology2);
        org.joda.time.LocalDate localDate4 = localDate3.withEra(1);
        localDate4.toString();
        localDate4.hashCode();
        org.junit.Assert.assertTrue(localDate4.equals(localDate4));
    }

    @Test
    public void test1565() throws Throwable {
        org.joda.time.format.PeriodFormatter periodFormatter0 = org.joda.time.format.ISOPeriodFormat.alternateWithWeeks();
        boolean boolean1 = periodFormatter0.isPrinter();
    }

    @Test
    public void test1566() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInstant0, readableInstant1);
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(1, chronology2);
        timeOfDay3.toString();
        timeOfDay3.hashCode();
        org.junit.Assert.assertTrue(timeOfDay3.equals(timeOfDay3));
    }

    @Test
    public void test1567() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now(chronology1);
        java.util.TimeZone timeZone3 = null;
        java.util.Date date4 = localDateTime2.toDate(timeZone3);
        date4.toString();
        date4.hashCode();
        org.junit.Assert.assertTrue(date4.equals(date4));
    }

    @Test
    public void test1568() throws Throwable {
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.millis();
        durationFieldType0.toString();
        durationFieldType0.hashCode();
        org.junit.Assert.assertTrue(durationFieldType0.equals(durationFieldType0));
    }

    @Test
    public void test1569() throws Throwable {
        java.lang.Object object0 = null;
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(object0, dateTimeZone2);
        org.joda.time.DateTime dateTime4 = localDate3.toDateTimeAtMidnight();
        dateTime4.toString();
        dateTime4.hashCode();
        org.junit.Assert.assertTrue(dateTime4.equals(dateTime4));
    }

    @Test
    public void test1570() throws Throwable {
        java.lang.Object object0 = null;
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.time();
        org.joda.time.Period period2 = new org.joda.time.Period(object0, periodType1);
        period2.toString();
        period2.hashCode();
        org.junit.Assert.assertTrue(period2.equals(period2));
    }

    @Test
    public void test1571() throws Throwable {
        org.joda.time.field.UnsupportedDateTimeField remainder0 = null;
        long long1 = remainder0.remainder(1);
    }

    @Test
    public void test1572() throws Throwable {
        org.joda.time.ReadablePeriod readablePeriod0 = null;
        org.joda.time.Days days1 = org.joda.time.Days.standardDaysIn(readablePeriod0);
        days1.toString();
        days1.hashCode();
        org.junit.Assert.assertTrue(days1.equals(days1));
    }

    @Test
    public void test1573() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.MonthDay monthDay2 = new org.joda.time.MonthDay(1, chronology1);
        monthDay2.toString();
        monthDay2.hashCode();
        org.junit.Assert.assertTrue(monthDay2.equals(monthDay2));
    }

    @Test
    public void test1574() throws Throwable {
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        instant0.toString();
        instant0.hashCode();
        org.junit.Assert.assertTrue(instant0.equals(instant0));
    }

    @Test
    public void test1575() throws Throwable {
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.field.PreciseDurationField preciseDurationField1 = new org.joda.time.field.PreciseDurationField(durationFieldType0, 1);
        preciseDurationField1.toString();
        preciseDurationField1.hashCode();
        org.junit.Assert.assertTrue(preciseDurationField1.equals(preciseDurationField1));
    }

    @Test
    public void test1576() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(chronology1);
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.DateTime dateTime4 = dateTime2.minus(readableDuration3);
        dateTime4.toString();
        dateTime4.hashCode();
        org.junit.Assert.assertTrue(dateTime4.equals(dateTime4));
    }

    @Test
    public void test1577() throws Throwable {
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.yearMonth();
        java.lang.String string1 = null;
        long long2 = dateTimeFormatter0.parseMillis(string1);
    }

    @Test
    public void test1578() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now(chronology1);
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.plus(readableDuration3);
        localDateTime4.toString();
        localDateTime4.hashCode();
        org.junit.Assert.assertTrue(localDateTime4.equals(localDateTime4));
    }

    @Test
    public void test1579() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime(dateTimeZone1);
        mutableDateTime2.toString();
        mutableDateTime2.hashCode();
        org.junit.Assert.assertTrue(mutableDateTime2.equals(mutableDateTime2));
    }

    @Test
    public void test1580() throws Throwable {
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod(periodType0);
        int int2 = mutablePeriod1.getDays();
    }

    @Test
    public void test1581() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.YearMonth yearMonth2 = new org.joda.time.YearMonth(1, chronology1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.YearMonth yearMonth4 = yearMonth2.plus(readablePeriod3);
        yearMonth4.toString();
        yearMonth4.hashCode();
        org.junit.Assert.assertTrue(yearMonth4.equals(yearMonth4));
    }

    @Test
    public void test1582() throws Throwable {
        org.joda.time.Seconds seconds0 = org.joda.time.Seconds.seconds(1);
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.Seconds seconds2 = org.joda.time.Seconds.standardSecondsIn(readablePeriod1);
        boolean boolean3 = seconds0.isLessThan(seconds2);
    }

    @Test
    public void test1583() throws Throwable {
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod(periodType0);
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.years();
        mutablePeriod1.add(durationFieldType2, 1);
    }

    @Test
    public void test1584() throws Throwable {
        org.joda.time.field.UnsupportedDateTimeField roundCeiling0 = null;
        long long1 = roundCeiling0.roundCeiling(1);
    }

    @Test
    public void test1585() throws Throwable {
        org.joda.time.Partial.Property setCopy0 = null;
        org.joda.time.Partial partial1 = setCopy0.setCopy(1);
        partial1.toString();
        partial1.hashCode();
        org.junit.Assert.assertTrue(partial1.equals(partial1));
    }

    @Test
    public void test1586() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeUtils.getZone(dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight3 = org.joda.time.DateMidnight.now(dateTimeZone2);
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight3.toYearMonthDay();
        yearMonthDay4.toString();
        yearMonthDay4.hashCode();
        org.junit.Assert.assertTrue(yearMonthDay4.equals(yearMonthDay4));
    }

    @Test
    public void test1587() throws Throwable {
        org.joda.time.TimeOfDay.Property withMaximumValue0 = null;
        org.joda.time.TimeOfDay timeOfDay1 = withMaximumValue0.withMaximumValue();
        timeOfDay1.toString();
        timeOfDay1.hashCode();
        org.junit.Assert.assertTrue(timeOfDay1.equals(timeOfDay1));
    }

    @Test
    public void test1588() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.secondOfMinute();
        dateTimeField2.toString();
        dateTimeField2.hashCode();
        org.junit.Assert.assertTrue(dateTimeField2.equals(dateTimeField2));
    }

    @Test
    public void test1589() throws Throwable {
        org.joda.time.ReadablePeriod readablePeriod0 = null;
        org.joda.time.Hours hours1 = org.joda.time.Hours.standardHoursIn(readablePeriod0);
        hours1.toString();
        hours1.hashCode();
        org.junit.Assert.assertTrue(hours1.equals(hours1));
    }

    @Test
    public void test1590() throws Throwable {
        java.lang.Object object0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(object0);
        localDateTime1.toString();
        localDateTime1.hashCode();
        org.junit.Assert.assertTrue(localDateTime1.equals(localDateTime1));
    }

    @Test
    public void test1591() throws Throwable {
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfWeek();
        org.joda.time.DateTimeComparator dateTimeComparator1 = org.joda.time.DateTimeComparator.getInstance(dateTimeFieldType0);
        java.lang.Object object2 = null;
        boolean boolean3 = dateTimeComparator1.equals(object2);
    }

    @Test
    public void test1592() throws Throwable {
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime(1, 1, 1, 1, 1, 1);
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.DateTime dateTime3 = dateTime0.withZone(dateTimeZone2);
        dateTime3.toString();
        dateTime3.hashCode();
        org.junit.Assert.assertTrue(dateTime3.equals(dateTime3));
    }

    @Test
    public void test1593() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(1, 1, 1, 1, 1, 1, 1, chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.LocalDateTime.Property property4 = localDateTime2.property(dateTimeFieldType3);
        property4.toString();
        property4.hashCode();
        org.junit.Assert.assertTrue(property4.equals(property4));
    }

    @Test
    public void test1594() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now(chronology1);
        int int3 = localDateTime2.getHourOfDay();
    }

    @Test
    public void test1595() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.MutableDateTime mutableDateTime2 = org.joda.time.MutableDateTime.now(chronology1);
        mutableDateTime2.addWeeks(1);
    }

    @Test
    public void test1596() throws Throwable {
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Hours hours3 = org.joda.time.Hours.hoursIn(readableInterval2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Hours hours5 = org.joda.time.Hours.standardHoursIn(readablePeriod4);
        org.joda.time.Hours hours6 = hours3.plus(hours5);
        hours6.toString();
        hours6.hashCode();
        org.junit.Assert.assertTrue(hours6.equals(hours6));
    }

    @Test
    public void test1597() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime(dateTimeZone1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.yearOfCentury();
        property3.toString();
        property3.hashCode();
        org.junit.Assert.assertTrue(property3.equals(property3));
    }

    @Test
    public void test1598() throws Throwable {
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.weekyearWeekDay();
        dateTimeFormatter0.toString();
        dateTimeFormatter0.hashCode();
        org.junit.Assert.assertTrue(dateTimeFormatter0.equals(dateTimeFormatter0));
    }

    @Test
    public void test1599() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        org.joda.time.DateTime dateTime3 = dateTime2.minusYears(1);
        dateTime3.toString();
        dateTime3.hashCode();
        org.junit.Assert.assertTrue(dateTime3.equals(dateTime3));
    }

    @Test
    public void test1600() throws Throwable {
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.minutes(1);
        org.joda.time.Minutes minutes1 = minutes0.negated();
        minutes1.toString();
        minutes1.hashCode();
        org.junit.Assert.assertTrue(minutes1.equals(minutes1));
    }

    @Test
    public void test1601() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.MonthDay monthDay2 = org.joda.time.MonthDay.now(chronology1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.MonthDay monthDay4 = monthDay2.withPeriodAdded(readablePeriod3, 1);
        monthDay4.toString();
        monthDay4.hashCode();
        org.junit.Assert.assertTrue(monthDay4.equals(monthDay4));
    }

    @Test
    public void test1602() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeUtils.getZone(dateTimeZone1);
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime(1, dateTimeZone2);
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime3.minuteOfHour();
        property4.toString();
        property4.hashCode();
        org.junit.Assert.assertTrue(property4.equals(property4));
    }

    @Test
    public void test1603() throws Throwable {
        org.joda.time.ReadablePartial readablePartial0 = null;
        org.joda.time.ReadablePartial readablePartial1 = null;
        org.joda.time.Seconds seconds2 = org.joda.time.Seconds.secondsBetween(readablePartial0, readablePartial1);
        seconds2.toString();
        seconds2.hashCode();
        org.junit.Assert.assertTrue(seconds2.equals(seconds2));
    }

    @Test
    public void test1604() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(dateTimeZone1);
        dateTime2.toString();
        dateTime2.hashCode();
        org.junit.Assert.assertTrue(dateTime2.equals(dateTime2));
    }

    @Test
    public void test1605() throws Throwable {
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime0.property(dateTimeFieldType1);
        property2.toString();
        property2.hashCode();
        org.junit.Assert.assertTrue(property2.equals(property2));
    }

    @Test
    public void test1606() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeUtils.getZone(dateTimeZone1);
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime(1, dateTimeZone2);
        org.joda.time.LocalTime localTime4 = localTime3.withMillisOfSecond(1);
        localTime4.toString();
        localTime4.hashCode();
        org.junit.Assert.assertTrue(localTime4.equals(localTime4));
    }

    @Test
    public void test1607() throws Throwable {
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfHour();
        dateTimeFieldType0.toString();
        dateTimeFieldType0.hashCode();
        org.junit.Assert.assertTrue(dateTimeFieldType0.equals(dateTimeFieldType0));
    }

    @Test
    public void test1608() throws Throwable {
        org.joda.time.YearMonth yearMonth0 = new org.joda.time.YearMonth(1);
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeUtils.getZone(dateTimeZone2);
        org.joda.time.Interval interval4 = yearMonth0.toInterval(dateTimeZone3);
        interval4.toString();
        interval4.hashCode();
        org.junit.Assert.assertTrue(interval4.equals(interval4));
    }

    @Test
    public void test1609() throws Throwable {
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.time();
        dateTimeFormatter0.toString();
        dateTimeFormatter0.hashCode();
        org.junit.Assert.assertTrue(dateTimeFormatter0.equals(dateTimeFormatter0));
    }

    @Test
    public void test1610() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeUtils.getZone(dateTimeZone1);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(1, dateTimeZone2);
        org.joda.time.DateTime dateTime4 = dateTime3.minusMillis(1);
        dateTime4.toString();
        dateTime4.hashCode();
        org.junit.Assert.assertTrue(dateTime4.equals(dateTime4));
    }

    @Test
    public void test1611() throws Throwable {
        org.joda.time.MonthDay monthDay0 = new org.joda.time.MonthDay(1, 1);
        org.joda.time.MonthDay monthDay1 = monthDay0.minusDays(1);
        monthDay1.toString();
        monthDay1.hashCode();
        org.junit.Assert.assertTrue(monthDay1.equals(monthDay1));
    }

    @Test
    public void test1612() throws Throwable {
        java.lang.Object object0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInstant1, readableInstant2);
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay(object0, chronology3);
        yearMonthDay4.toString();
        yearMonthDay4.hashCode();
        org.junit.Assert.assertTrue(yearMonthDay4.equals(yearMonthDay4));
    }

    @Test
    public void test1613() throws Throwable {
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight(1, 1, 1);
        org.joda.time.DateMidnight dateMidnight1 = dateMidnight0.withEra(1);
        dateMidnight1.toString();
        dateMidnight1.hashCode();
        org.junit.Assert.assertTrue(dateMidnight1.equals(dateMidnight1));
    }

    @Test
    public void test1614() throws Throwable {
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInstant1, readableInstant2);
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(1, periodType0, chronology3);
        mutablePeriod4.add(1);
    }

    @Test
    public void test1615() throws Throwable {
        java.lang.Object object0 = null;
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeUtils.getZone(dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(object0, dateTimeZone3);
        dateMidnight4.toString();
        dateMidnight4.hashCode();
        org.junit.Assert.assertTrue(dateMidnight4.equals(dateMidnight4));
    }

    @Test
    public void test1616() throws Throwable {
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.localDateOptionalTimeParser();
        boolean boolean1 = dateTimeFormatter0.isParser();
    }

    @Test
    public void test1617() throws Throwable {
        org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder0 = new org.joda.time.tz.DateTimeZoneBuilder();
        java.lang.String string1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = dateTimeZoneBuilder0.toDateTimeZone(string1, true);
        dateTimeZone2.toString();
        dateTimeZone2.hashCode();
        org.junit.Assert.assertTrue(dateTimeZone2.equals(dateTimeZone2));
    }

    @Test
    public void test1618() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeUtils.getZone(dateTimeZone1);
        org.joda.time.LocalDate localDate3 = org.joda.time.LocalDate.now(dateTimeZone2);
        localDate3.toString();
        localDate3.hashCode();
        org.junit.Assert.assertTrue(localDate3.equals(localDate3));
    }

    @Test
    public void test1619() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeUtils.getZone(dateTimeZone1);
        org.joda.time.LocalTime localTime3 = org.joda.time.LocalTime.now(dateTimeZone2);
        org.joda.time.LocalTime localTime4 = localTime3.plusHours(1);
        localTime4.toString();
        localTime4.hashCode();
        org.junit.Assert.assertTrue(localTime4.equals(localTime4));
    }

    @Test
    public void test1620() throws Throwable {
        java.lang.Object object0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(object0);
        dateTime1.toString();
        dateTime1.hashCode();
        org.junit.Assert.assertTrue(dateTime1.equals(dateTime1));
    }

    @Test
    public void test1621() throws Throwable {
        org.joda.time.ReadablePeriod readablePeriod0 = null;
        org.joda.time.Hours hours1 = org.joda.time.Hours.standardHoursIn(readablePeriod0);
        org.joda.time.DurationFieldType durationFieldType2 = hours1.getFieldType();
        durationFieldType2.toString();
        durationFieldType2.hashCode();
        org.junit.Assert.assertTrue(durationFieldType2.equals(durationFieldType2));
    }

    @Test
    public void test1622() throws Throwable {
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight(1);
        org.joda.time.DateMidnight dateMidnight1 = dateMidnight0.withDayOfWeek(1);
        dateMidnight1.toString();
        dateMidnight1.hashCode();
        org.junit.Assert.assertTrue(dateMidnight1.equals(dateMidnight1));
    }

    @Test
    public void test1623() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableInstant0, readableDuration1);
        mutableInterval2.setInterval(1, 1);
    }

    @Test
    public void test1624() throws Throwable {
        java.lang.Object object0 = null;
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(object0, dateTimeZone2);
        int int4 = localDate3.getYearOfCentury();
    }

    @Test
    public void test1625() throws Throwable {
        java.lang.Object object0 = null;
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime(object0, dateTimeZone2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.plus(readableDuration4);
        localDateTime5.toString();
        localDateTime5.hashCode();
        org.junit.Assert.assertTrue(localDateTime5.equals(localDateTime5));
    }

    @Test
    public void test1626() throws Throwable {
        org.joda.time.MutablePeriod mutablePeriod0 = new org.joda.time.MutablePeriod(1, 1, 1, 1, 1, 1, 1, 1);
        mutablePeriod0.toString();
        mutablePeriod0.hashCode();
        org.junit.Assert.assertTrue(mutablePeriod0.equals(mutablePeriod0));
    }

    @Test
    public void test1627() throws Throwable {
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay(1, 1, 1);
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.DateTime dateTime3 = yearMonthDay0.toDateTimeAtCurrentTime(dateTimeZone2);
        dateTime3.toString();
        dateTime3.hashCode();
        org.junit.Assert.assertTrue(dateTime3.equals(dateTime3));
    }

    @Test
    public void test1628() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeUtils.getZone(dateTimeZone1);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(1, 1, 1, 1, 1, dateTimeZone2);
        org.joda.time.DateTime dateTime4 = dateTime3.plusMillis(1);
        dateTime4.toString();
        dateTime4.hashCode();
        org.junit.Assert.assertTrue(dateTime4.equals(dateTime4));
    }

    @Test
    public void test1629() throws Throwable {
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.field.PreciseDurationField preciseDurationField1 = new org.joda.time.field.PreciseDurationField(durationFieldType0, 1);
        boolean boolean2 = preciseDurationField1.isPrecise();
    }

    @Test
    public void test1630() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInstant0, readableInstant1);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.secondOfMinute();
        dateTimeField3.toString();
        dateTimeField3.hashCode();
        org.junit.Assert.assertTrue(dateTimeField3.equals(dateTimeField3));
    }

    @Test
    public void test1631() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.MutableDateTime mutableDateTime2 = org.joda.time.MutableDateTime.now(dateTimeZone1);
        java.util.TimeZone timeZone3 = null;
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeUtils.getZone(dateTimeZone4);
        mutableDateTime2.setZoneRetainFields(dateTimeZone5);
    }

    @Test
    public void test1632() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay(1, 1, 1, 1, chronology1);
        org.joda.time.TimeOfDay.Property property3 = timeOfDay2.secondOfMinute();
        property3.toString();
        property3.hashCode();
        org.junit.Assert.assertTrue(property3.equals(property3));
    }

    @Test
    public void test1633() throws Throwable {
        java.lang.Object object0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInstant1, readableInstant2);
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay(object0, chronology3);
        int int5 = yearMonthDay4.getMonthOfYear();
    }

    @Test
    public void test1634() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime(chronology1);
        mutableDateTime2.addMillis(1);
    }

    @Test
    public void test1635() throws Throwable {
        java.lang.Object object0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(object0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalDate localDate3 = localDate1.plus(readablePeriod2);
        localDate3.toString();
        localDate3.hashCode();
        org.junit.Assert.assertTrue(localDate3.equals(localDate3));
    }

    @Test
    public void test1636() throws Throwable {
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(1, 1, 1, 1, 1, 1, dateTimeZone0);
        org.joda.time.DateTime dateTime2 = dateTime1.toDateTimeISO();
        dateTime2.toString();
        dateTime2.hashCode();
        org.junit.Assert.assertTrue(dateTime2.equals(dateTime2));
    }

    @Test
    public void test1637() throws Throwable {
        org.joda.time.Period period0 = org.joda.time.Period.seconds(1);
        org.joda.time.Period period1 = period0.withHours(1);
        period1.toString();
        period1.hashCode();
        org.junit.Assert.assertTrue(period1.equals(period1));
    }

    @Test
    public void test1638() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeUtils.getZone(dateTimeZone1);
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime(dateTimeZone2);
        org.joda.time.DateTimeField dateTimeField4 = null;
        mutableDateTime3.setRounding(dateTimeField4);
    }

    @Test
    public void test1639() throws Throwable {
        java.lang.Object object0 = null;
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime(object0, dateTimeZone2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.plus(readablePeriod4);
        localDateTime5.toString();
        localDateTime5.hashCode();
        org.junit.Assert.assertTrue(localDateTime5.equals(localDateTime5));
    }

    @Test
    public void test1640() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInstant0, readableInstant1);
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth(1, 1, chronology2);
        int int4 = yearMonth3.getMonthOfYear();
    }

    @Test
    public void test1641() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.now(chronology1);
        org.joda.time.LocalTime localTime3 = localTime2.withHourOfDay(1);
        localTime3.toString();
        localTime3.hashCode();
        org.junit.Assert.assertTrue(localTime3.equals(localTime3));
    }

    @Test
    public void test1642() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime(chronology1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.monthOfYear();
        property3.toString();
        property3.hashCode();
        org.junit.Assert.assertTrue(property3.equals(property3));
    }

    @Test
    public void test1643() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        java.util.Locale locale1 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket2 = new org.joda.time.format.DateTimeParserBucket(1, chronology0, locale1);
        org.joda.time.Chronology chronology3 = dateTimeParserBucket2.getChronology();
        chronology3.toString();
        chronology3.hashCode();
        org.junit.Assert.assertTrue(chronology3.equals(chronology3));
    }

    @Test
    public void test1644() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(1, 1, 1, 1, 1, 1, 1, chronology1);
        int int3 = localDateTime2.getWeekyear();
    }

    @Test
    public void test1645() throws Throwable {
        org.joda.time.DurationField getName0 = null;
        java.lang.String string1 = getName0.getName();
        string1.toString();
        string1.hashCode();
        org.junit.Assert.assertTrue(string1.equals(string1));
    }

    @Test
    public void test1646() throws Throwable {
        org.joda.time.TimeOfDay.Property get0 = null;
        int int1 = get0.get();
    }

    @Test
    public void test1647() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime(1, chronology1);
        mutableDateTime2.setMillisOfSecond(1);
    }

    @Test
    public void test1648() throws Throwable {
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.dayOfWeek();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder0.appendFixedSignedDecimal(dateTimeFieldType1, 1);
        dateTimeFormatterBuilder2.toString();
        dateTimeFormatterBuilder2.hashCode();
        org.junit.Assert.assertTrue(dateTimeFormatterBuilder2.equals(dateTimeFormatterBuilder2));
    }

    @Test
    public void test1649() throws Throwable {
        java.lang.String string0 = null;
        org.joda.time.DateMidnight dateMidnight1 = org.joda.time.DateMidnight.parse(string0);
        dateMidnight1.toString();
        dateMidnight1.hashCode();
        org.junit.Assert.assertTrue(dateMidnight1.equals(dateMidnight1));
    }

    @Test
    public void test1650() throws Throwable {
        java.lang.Object object0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(object0);
        int int2 = localDateTime1.getYearOfEra();
    }

    @Test
    public void test1651() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.LocalDate localDate2 = org.joda.time.LocalDate.now(chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.LocalDate.Property property4 = localDate2.property(dateTimeFieldType3);
        property4.toString();
        property4.hashCode();
        org.junit.Assert.assertTrue(property4.equals(property4));
    }

    @Test
    public void test1652() throws Throwable {
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.yearDayTime();
        java.lang.String string1 = periodType0.getName();
        string1.toString();
        string1.hashCode();
        org.junit.Assert.assertTrue(string1.equals(string1));
    }

    @Test
    public void test1653() throws Throwable {
        org.joda.time.field.DelegatedDateTimeField remainder0 = null;
        long long1 = remainder0.remainder(1);
    }

    @Test
    public void test1654() throws Throwable {
        java.lang.Object object0 = null;
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getChronology(chronology1);
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(object0, chronology2);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight3.plusYears(1);
        dateMidnight4.toString();
        dateMidnight4.hashCode();
        org.junit.Assert.assertTrue(dateMidnight4.equals(dateMidnight4));
    }

    @Test
    public void test1655() throws Throwable {
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.fullDateTime();
        dateTimeFormatter0.toString();
        dateTimeFormatter0.hashCode();
        org.junit.Assert.assertTrue(dateTimeFormatter0.equals(dateTimeFormatter0));
    }

    @Test
    public void test1656() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeUtils.getZone(dateTimeZone1);
        org.joda.time.chrono.CopticChronology copticChronology3 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone2, 1);
        copticChronology3.toString();
        copticChronology3.hashCode();
        org.junit.Assert.assertTrue(copticChronology3.equals(copticChronology3));
    }

    @Test
    public void test1657() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeUtils.getZone(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone2);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.secondOfMinute();
        property4.toString();
        property4.hashCode();
        org.junit.Assert.assertTrue(property4.equals(property4));
    }

    @Test
    public void test1658() throws Throwable {
        org.joda.time.chrono.JulianChronology julianChronology0 = org.joda.time.chrono.JulianChronology.getInstance();
        julianChronology0.toString();
        julianChronology0.hashCode();
        org.junit.Assert.assertTrue(julianChronology0.equals(julianChronology0));
    }

    @Test
    public void test1659() throws Throwable {
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Weeks weeks3 = org.joda.time.Weeks.weeksIn(readableInterval2);
        org.joda.time.Days days4 = weeks3.toStandardDays();
        days4.toString();
        days4.hashCode();
        org.junit.Assert.assertTrue(days4.equals(days4));
    }

    @Test
    public void test1660() throws Throwable {
        java.lang.String string0 = null;
        org.joda.time.Minutes minutes1 = org.joda.time.Minutes.parseMinutes(string0);
        org.joda.time.Minutes minutes2 = org.joda.time.Minutes.minutes(1);
        boolean boolean3 = minutes1.isGreaterThan(minutes2);
    }

    @Test
    public void test1661() throws Throwable {
        java.lang.String string0 = null;
        org.joda.time.format.PeriodFormatter periodFormatter1 = org.joda.time.format.PeriodFormat.wordBased();
        org.joda.time.Period period2 = org.joda.time.Period.parse(string0, periodFormatter1);
        period2.toString();
        period2.hashCode();
        org.junit.Assert.assertTrue(period2.equals(period2));
    }

    @Test
    public void test1662() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.minutes();
        org.joda.time.Period period3 = new org.joda.time.Period(readableInstant0, readableInstant1, periodType2);
        int int4 = period3.getDays();
    }

    @Test
    public void test1663() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(1, dateTimeZone1);
        dateTime2.toString();
        dateTime2.hashCode();
        org.junit.Assert.assertTrue(dateTime2.equals(dateTime2));
    }

    @Test
    public void test1664() throws Throwable {
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Hours hours3 = org.joda.time.Hours.hoursIn(readableInterval2);
        org.joda.time.DurationFieldType durationFieldType4 = hours3.getFieldType();
        durationFieldType4.toString();
        durationFieldType4.hashCode();
        org.junit.Assert.assertTrue(durationFieldType4.equals(durationFieldType4));
    }

    @Test
    public void test1665() throws Throwable {
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight(1, 1, 1);
        org.joda.time.LocalDate localDate1 = dateMidnight0.toLocalDate();
        localDate1.toString();
        localDate1.hashCode();
        org.junit.Assert.assertTrue(localDate1.equals(localDate1));
    }

    @Test
    public void test1666() throws Throwable {
        java.lang.String string0 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = org.joda.time.format.ISODateTimeFormat.basicWeekDateTimeNoMillis();
        org.joda.time.MutableDateTime mutableDateTime2 = org.joda.time.MutableDateTime.parse(string0, dateTimeFormatter1);
        mutableDateTime2.toString();
        mutableDateTime2.hashCode();
        org.junit.Assert.assertTrue(mutableDateTime2.equals(mutableDateTime2));
    }

    @Test
    public void test1667() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Interval interval2 = new org.joda.time.Interval(readableInstant0, readableInstant1);
        interval2.toString();
        interval2.hashCode();
        org.junit.Assert.assertTrue(interval2.equals(interval2));
    }

    @Test
    public void test1668() throws Throwable {
        java.lang.Object object0 = null;
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getChronology(chronology1);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(object0, chronology2);
        org.joda.time.DateTime dateTime4 = dateTime3.withSecondOfMinute(1);
        dateTime4.toString();
        dateTime4.hashCode();
        org.junit.Assert.assertTrue(dateTime4.equals(dateTime4));
    }

    @Test
    public void test1669() throws Throwable {
        org.joda.time.DateMidnight.Property getField0 = null;
        org.joda.time.DateTimeField dateTimeField1 = getField0.getField();
        dateTimeField1.toString();
        dateTimeField1.hashCode();
        org.junit.Assert.assertTrue(dateTimeField1.equals(dateTimeField1));
    }

    @Test
    public void test1670() throws Throwable {
        java.lang.Object object0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(object0);
        org.joda.time.DateTime dateTime2 = dateTime1.withTimeAtStartOfDay();
        dateTime2.toString();
        dateTime2.hashCode();
        org.junit.Assert.assertTrue(dateTime2.equals(dateTime2));
    }

    @Test
    public void test1671() throws Throwable {
        org.joda.time.DateTime.Property roundHalfEvenCopy0 = null;
        org.joda.time.DateTime dateTime1 = roundHalfEvenCopy0.roundHalfEvenCopy();
        dateTime1.toString();
        dateTime1.hashCode();
        org.junit.Assert.assertTrue(dateTime1.equals(dateTime1));
    }

    @Test
    public void test1672() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeUtils.getZone(dateTimeZone1);
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth(dateTimeZone2);
        java.lang.String string4 = null;
        java.lang.String string5 = yearMonth3.toString(string4);
        string5.toString();
        string5.hashCode();
        org.junit.Assert.assertTrue(string5.equals(string5));
    }

    @Test
    public void test1673() throws Throwable {
        java.lang.Object object0 = null;
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.yearDay();
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(object0, periodType1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        mutablePeriod2.setPeriod(readablePeriod3);
    }

    @Test
    public void test1674() throws Throwable {
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.dateTimeNoMillis();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
        dateTimeFormatter1.toString();
        dateTimeFormatter1.hashCode();
        org.junit.Assert.assertTrue(dateTimeFormatter1.equals(dateTimeFormatter1));
    }

    @Test
    public void test1675() throws Throwable {
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay(1, 1, 1);
        org.joda.time.TimeOfDay timeOfDay1 = timeOfDay0.plusMillis(1);
        timeOfDay1.toString();
        timeOfDay1.hashCode();
        org.junit.Assert.assertTrue(timeOfDay1.equals(timeOfDay1));
    }

    @Test
    public void test1676() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInstant0, readableInstant1);
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(chronology2);
        timeOfDay3.toString();
        timeOfDay3.hashCode();
        org.junit.Assert.assertTrue(timeOfDay3.equals(timeOfDay3));
    }

    @Test
    public void test1677() throws Throwable {
        org.joda.time.Period period0 = new org.joda.time.Period(1, 1);
        org.joda.time.Period period1 = period0.plusHours(1);
        period1.toString();
        period1.hashCode();
        org.junit.Assert.assertTrue(period1.equals(period1));
    }

    @Test
    public void test1678() throws Throwable {
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.dateHourMinuteSecond();
        java.lang.StringBuffer stringBuffer1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        dateTimeFormatter0.printTo(stringBuffer1, readableInstant2);
    }

    @Test
    public void test1679() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.ReadableDateTime readableDateTime2 = null;
        org.joda.time.ReadableDateTime readableDateTime3 = null;
        org.joda.time.chrono.LimitChronology limitChronology4 = org.joda.time.chrono.LimitChronology.getInstance(chronology1, readableDateTime2, readableDateTime3);
        int int5 = limitChronology4.hashCode();
    }

    @Test
    public void test1680() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Period period2 = new org.joda.time.Period(readableInstant0, readableInstant1);
        period2.toString();
        period2.hashCode();
        org.junit.Assert.assertTrue(period2.equals(period2));
    }

    @Test
    public void test1681() throws Throwable {
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate(1);
        org.joda.time.DateTime dateTime1 = localDate0.toDateTimeAtCurrentTime();
        dateTime1.toString();
        dateTime1.hashCode();
        org.junit.Assert.assertTrue(dateTime1.equals(dateTime1));
    }

    @Test
    public void test1682() throws Throwable {
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        dateTimeFormatter2.toString();
        dateTimeFormatter2.hashCode();
        org.junit.Assert.assertTrue(dateTimeFormatter2.equals(dateTimeFormatter2));
    }

    @Test
    public void test1683() throws Throwable {
        org.joda.time.Instant instant0 = org.joda.time.Instant.ofEpochSecond(1);
        instant0.toString();
        instant0.hashCode();
        org.junit.Assert.assertTrue(instant0.equals(instant0));
    }

    @Test
    public void test1684() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay(1, chronology1);
        org.joda.time.YearMonthDay yearMonthDay3 = yearMonthDay2.plusMonths(1);
        yearMonthDay3.toString();
        yearMonthDay3.hashCode();
        org.junit.Assert.assertTrue(yearMonthDay3.equals(yearMonthDay3));
    }

    @Test
    public void test1685() throws Throwable {
        java.lang.Object object0 = null;
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeUtils.getZone(dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(object0, dateTimeZone3);
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.withDurationAdded(readableDuration5, 1);
        dateMidnight6.toString();
        dateMidnight6.hashCode();
        org.junit.Assert.assertTrue(dateMidnight6.equals(dateMidnight6));
    }

    @Test
    public void test1686() throws Throwable {
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.YearMonthDay yearMonthDay2 = yearMonthDay0.plus(readablePeriod1);
        yearMonthDay2.toString();
        yearMonthDay2.hashCode();
        org.junit.Assert.assertTrue(yearMonthDay2.equals(yearMonthDay2));
    }

    @Test
    public void test1687() throws Throwable {
        java.lang.String string0 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = org.joda.time.format.DateTimeFormat.longDate();
        org.joda.time.YearMonth yearMonth2 = org.joda.time.YearMonth.parse(string0, dateTimeFormatter1);
        yearMonth2.toString();
        yearMonth2.hashCode();
        org.junit.Assert.assertTrue(yearMonth2.equals(yearMonth2));
    }

    @Test
    public void test1688() throws Throwable {
        java.lang.Object object0 = null;
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.Chronology chronology4 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInstant2, readableInstant3);
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod(object0, periodType1, chronology4);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.Chronology chronology7 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant6);
        mutablePeriod5.setPeriod(1, 1, chronology7);
    }

    @Test
    public void test1689() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.LocalDate localDate2 = org.joda.time.LocalDate.now(chronology1);
        int int3 = localDate2.getWeekyear();
    }

    @Test
    public void test1690() throws Throwable {
        org.joda.time.DateTimeComparator dateTimeComparator0 = org.joda.time.DateTimeComparator.getTimeOnlyInstance();
        java.lang.String string1 = dateTimeComparator0.toString();
        string1.toString();
        string1.hashCode();
        org.junit.Assert.assertTrue(string1.equals(string1));
    }

    @Test
    public void test1691() throws Throwable {
        org.joda.time.field.UnsupportedDateTimeField getAsShortText0 = null;
        org.joda.time.ReadablePartial readablePartial1 = null;
        java.util.Locale locale2 = null;
        java.lang.String string3 = getAsShortText0.getAsShortText(readablePartial1, 1, locale2);
        string3.toString();
        string3.hashCode();
        org.junit.Assert.assertTrue(string3.equals(string3));
    }

    @Test
    public void test1692() throws Throwable {
        org.joda.time.field.ScaledDurationField getValueAsLong0 = null;
        long long1 = getValueAsLong0.getValueAsLong(1, 1);
    }

    @Test
    public void test1693() throws Throwable {
        java.lang.Object object0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInstant1, readableInstant2);
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay(object0, chronology3);
        int int5 = yearMonthDay4.getDayOfMonth();
    }

    @Test
    public void test1694() throws Throwable {
        java.lang.String string0 = null;
        org.joda.time.Interval interval1 = org.joda.time.Interval.parseWithOffset(string0);
        interval1.toString();
        interval1.hashCode();
        org.junit.Assert.assertTrue(interval1.equals(interval1));
    }

    @Test
    public void test1695() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        boolean boolean4 = localTime2.isSupported(dateTimeFieldType3);
    }

    @Test
    public void test1696() throws Throwable {
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime(1, 1, 1, 1, 1);
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.DateTime dateTime2 = dateTime0.withPeriodAdded(readablePeriod1, 1);
        dateTime2.toString();
        dateTime2.hashCode();
        org.junit.Assert.assertTrue(dateTime2.equals(dateTime2));
    }

    @Test
    public void test1697() throws Throwable {
        java.lang.String string0 = null;
        org.joda.time.Months months1 = org.joda.time.Months.parseMonths(string0);
        org.joda.time.DurationFieldType durationFieldType2 = months1.getFieldType();
        durationFieldType2.toString();
        durationFieldType2.hashCode();
        org.junit.Assert.assertTrue(durationFieldType2.equals(durationFieldType2));
    }

    @Test
    public void test1698() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeUtils.getZone(dateTimeZone1);
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime(dateTimeZone2);
        org.joda.time.LocalTime localTime4 = localTime3.plusMinutes(1);
        localTime4.toString();
        localTime4.hashCode();
        org.junit.Assert.assertTrue(localTime4.equals(localTime4));
    }

    @Test
    public void test1699() throws Throwable {
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.ordinalDateTimeNoMillis();
        dateTimeFormatter0.toString();
        dateTimeFormatter0.hashCode();
        org.junit.Assert.assertTrue(dateTimeFormatter0.equals(dateTimeFormatter0));
    }

    @Test
    public void test1700() throws Throwable {
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getChronology(chronology1);
        org.joda.time.Partial partial3 = new org.joda.time.Partial(dateTimeFieldType0, 1, chronology2);
        partial3.toString();
        partial3.hashCode();
        org.junit.Assert.assertTrue(partial3.equals(partial3));
    }

    @Test
    public void test1701() throws Throwable {
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.years();
        java.lang.String string1 = durationFieldType0.toString();
        string1.toString();
        string1.hashCode();
        org.junit.Assert.assertTrue(string1.equals(string1));
    }

    @Test
    public void test1702() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DurationField durationField2 = chronology1.years();
        durationField2.toString();
        durationField2.hashCode();
        org.junit.Assert.assertTrue(durationField2.equals(durationField2));
    }

    @Test
    public void test1703() throws Throwable {
        java.lang.String string0 = null;
        org.joda.time.Minutes minutes1 = org.joda.time.Minutes.parseMinutes(string0);
        org.joda.time.Minutes minutes2 = org.joda.time.Minutes.minutes(1);
        boolean boolean3 = minutes1.isLessThan(minutes2);
    }

    @Test
    public void test1704() throws Throwable {
        org.joda.time.field.ScaledDurationField getValue0 = null;
        int int1 = getValue0.getValue(1, 1);
    }

    @Test
    public void test1705() throws Throwable {
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatter periodFormatter1 = org.joda.time.format.ISOPeriodFormat.alternateWithWeeks();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.append(periodFormatter1);
        periodFormatterBuilder2.toString();
        periodFormatterBuilder2.hashCode();
        org.junit.Assert.assertTrue(periodFormatterBuilder2.equals(periodFormatterBuilder2));
    }

    @Test
    public void test1706() throws Throwable {
        java.lang.Object object0 = null;
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(object0);
        int int2 = localTime1.size();
    }

    @Test
    public void test1707() throws Throwable {
        org.joda.time.Period period0 = new org.joda.time.Period();
        org.joda.time.Hours hours1 = period0.toStandardHours();
        hours1.toString();
        hours1.hashCode();
        org.junit.Assert.assertTrue(hours1.equals(hours1));
    }

    @Test
    public void test1708() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod(readableInstant0, readableInstant1, periodType2);
        mutablePeriod3.toString();
        mutablePeriod3.hashCode();
        org.junit.Assert.assertTrue(mutablePeriod3.equals(mutablePeriod3));
    }

    @Test
    public void test1709() throws Throwable {
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder0.appendText(dateTimeFieldType1);
        dateTimeFormatterBuilder2.toString();
        dateTimeFormatterBuilder2.hashCode();
        org.junit.Assert.assertTrue(dateTimeFormatterBuilder2.equals(dateTimeFormatterBuilder2));
    }

    @Test
    public void test1710() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay(1, chronology1);
        java.util.TimeZone timeZone3 = null;
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        org.joda.time.Interval interval5 = yearMonthDay2.toInterval(dateTimeZone4);
        interval5.toString();
        interval5.hashCode();
        org.junit.Assert.assertTrue(interval5.equals(interval5));
    }

    @Test
    public void test1711() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        org.joda.time.DateTime dateTime3 = dateTime2.plusHours(1);
        dateTime3.toString();
        dateTime3.hashCode();
        org.junit.Assert.assertTrue(dateTime3.equals(dateTime3));
    }

    @Test
    public void test1712() throws Throwable {
        java.lang.Appendable appendable0 = null;
        org.joda.time.format.FormatUtils.appendPaddedInteger(appendable0, 1, 1);
    }

    @Test
    public void test1713() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeUtils.getZone(dateTimeZone1);
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime(1, dateTimeZone2);
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        mutableDateTime3.setZoneRetainFields(dateTimeZone5);
    }

    @Test
    public void test1714() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.days();
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod(readableInstant0, readableInstant1, periodType2);
        mutablePeriod3.toString();
        mutablePeriod3.hashCode();
        org.junit.Assert.assertTrue(mutablePeriod3.equals(mutablePeriod3));
    }

    @Test
    public void test1715() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInstant0, readableInstant1);
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(chronology2);
        org.joda.time.TimeOfDay.Property property4 = timeOfDay3.hourOfDay();
        property4.toString();
        property4.hashCode();
        org.junit.Assert.assertTrue(property4.equals(property4));
    }

    @Test
    public void test1716() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeUtils.getZone(dateTimeZone1);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(1, dateTimeZone2);
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate(1);
        org.joda.time.DateTime dateTime5 = dateTime3.withDate(localDate4);
        dateTime5.toString();
        dateTime5.hashCode();
        org.junit.Assert.assertTrue(dateTime5.equals(dateTime5));
    }

    @Test
    public void test1717() throws Throwable {
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.mediumDate();
        dateTimeFormatter0.toString();
        dateTimeFormatter0.hashCode();
        org.junit.Assert.assertTrue(dateTimeFormatter0.equals(dateTimeFormatter0));
    }

    @Test
    public void test1718() throws Throwable {
        org.joda.time.ReadablePeriod readablePeriod0 = null;
        org.joda.time.Weeks weeks1 = org.joda.time.Weeks.standardWeeksIn(readablePeriod0);
        java.lang.String string2 = weeks1.toString();
        string2.toString();
        string2.hashCode();
        org.junit.Assert.assertTrue(string2.equals(string2));
    }

    @Test
    public void test1719() throws Throwable {
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.minutes(1);
        org.joda.time.Minutes minutes1 = minutes0.multipliedBy(1);
        minutes1.toString();
        minutes1.hashCode();
        org.junit.Assert.assertTrue(minutes1.equals(minutes1));
    }

    @Test
    public void test1720() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeUtils.getZone(dateTimeZone1);
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone2, 1, 1);
        gJChronology3.toString();
        gJChronology3.hashCode();
        org.junit.Assert.assertTrue(gJChronology3.equals(gJChronology3));
    }

    @Test
    public void test1721() throws Throwable {
        java.util.Locale locale0 = null;
        java.text.DateFormatSymbols dateFormatSymbols1 = org.joda.time.DateTimeUtils.getDateFormatSymbols(locale0);
        dateFormatSymbols1.toString();
        dateFormatSymbols1.hashCode();
        org.junit.Assert.assertTrue(dateFormatSymbols1.equals(dateFormatSymbols1));
    }

    @Test
    public void test1722() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket3 = new org.joda.time.format.DateTimeParserBucket(1, chronology1, locale2);
        org.joda.time.DateTimeZone dateTimeZone4 = dateTimeParserBucket3.getZone();
        dateTimeZone4.toString();
        dateTimeZone4.hashCode();
        org.junit.Assert.assertTrue(dateTimeZone4.equals(dateTimeZone4));
    }

    @Test
    public void test1723() throws Throwable {
        org.joda.time.Duration duration0 = org.joda.time.Duration.standardHours(1);
        org.joda.time.Duration duration1 = duration0.plus(1);
        duration1.toString();
        duration1.hashCode();
        org.junit.Assert.assertTrue(duration1.equals(duration1));
    }

    @Test
    public void test1724() throws Throwable {
        java.lang.Object object0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(object0);
        int int2 = localDateTime1.getCenturyOfEra();
    }

    @Test
    public void test1725() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(dateTimeZone1);
        dateMidnight2.toString();
        dateMidnight2.hashCode();
        org.junit.Assert.assertTrue(dateMidnight2.equals(dateMidnight2));
    }

    @Test
    public void test1726() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeUtils.getZone(dateTimeZone1);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(1, 1, 1, 1, 1, dateTimeZone2);
        org.joda.time.DateTime dateTime4 = dateTime3.plusWeeks(1);
        dateTime4.toString();
        dateTime4.hashCode();
        org.junit.Assert.assertTrue(dateTime4.equals(dateTime4));
    }

    @Test
    public void test1727() throws Throwable {
        org.joda.time.LocalTime.Property getLocalTime0 = null;
        org.joda.time.LocalTime localTime1 = getLocalTime0.getLocalTime();
        localTime1.toString();
        localTime1.hashCode();
        org.junit.Assert.assertTrue(localTime1.equals(localTime1));
    }

    @Test
    public void test1728() throws Throwable {
        java.lang.Object object0 = null;
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(object0);
        org.joda.time.DateTime dateTime2 = localTime1.toDateTimeToday();
        dateTime2.toString();
        dateTime2.hashCode();
        org.junit.Assert.assertTrue(dateTime2.equals(dateTime2));
    }

    @Test
    public void test1729() throws Throwable {
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay(1, 1);
        timeOfDay0.toString();
        timeOfDay0.hashCode();
        org.junit.Assert.assertTrue(timeOfDay0.equals(timeOfDay0));
    }

    @Test
    public void test1730() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(chronology1);
        org.joda.time.DateTime dateTime3 = dateTime2.withWeekyear(1);
        dateTime3.toString();
        dateTime3.hashCode();
        org.junit.Assert.assertTrue(dateTime3.equals(dateTime3));
    }

    @Test
    public void test1731() throws Throwable {
        org.joda.time.field.UnsupportedDateTimeField getMaximumValue0 = null;
        int int1 = getMaximumValue0.getMaximumValue(1);
    }

    @Test
    public void test1732() throws Throwable {
        org.joda.time.ReadablePeriod readablePeriod0 = null;
        org.joda.time.Minutes minutes1 = org.joda.time.Minutes.standardMinutesIn(readablePeriod0);
        minutes1.toString();
        minutes1.hashCode();
        org.junit.Assert.assertTrue(minutes1.equals(minutes1));
    }

    @Test
    public void test1733() throws Throwable {
        org.joda.time.field.UnsupportedDateTimeField set0 = null;
        long long1 = set0.set(1, 1);
    }

    @Test
    public void test1734() throws Throwable {
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.ordinalDateTimeNoMillis();
        java.lang.Integer integer1 = dateTimeFormatter0.getPivotYear();
        integer1.toString();
        integer1.hashCode();
        org.junit.Assert.assertTrue(integer1.equals(integer1));
    }

    @Test
    public void test1735() throws Throwable {
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime(1, 1, 1, 1, 1, 1);
        org.joda.time.LocalDateTime localDateTime1 = dateTime0.toLocalDateTime();
        localDateTime1.toString();
        localDateTime1.hashCode();
        org.junit.Assert.assertTrue(localDateTime1.equals(localDateTime1));
    }

    @Test
    public void test1736() throws Throwable {
        org.joda.time.field.UnsupportedDateTimeField add0 = null;
        long long1 = add0.add(1, 1);
    }

    @Test
    public void test1737() throws Throwable {
        org.joda.time.ReadablePeriod readablePeriod0 = null;
        org.joda.time.Days days1 = org.joda.time.Days.standardDaysIn(readablePeriod0);
        org.joda.time.Days days2 = org.joda.time.Days.days(1);
        boolean boolean3 = days1.isLessThan(days2);
    }

    @Test
    public void test1738() throws Throwable {
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        java.lang.String[] stringArr1 = null;
        java.lang.String[] stringArr2 = null;
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendPrefix(stringArr1, stringArr2);
        periodFormatterBuilder3.toString();
        periodFormatterBuilder3.hashCode();
        org.junit.Assert.assertTrue(periodFormatterBuilder3.equals(periodFormatterBuilder3));
    }

    @Test
    public void test1739() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(1, chronology1);
        java.util.TimeZone timeZone3 = null;
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        org.joda.time.DateMidnight dateMidnight5 = localDate2.toDateMidnight(dateTimeZone4);
        dateMidnight5.toString();
        dateMidnight5.hashCode();
        org.junit.Assert.assertTrue(dateMidnight5.equals(dateMidnight5));
    }

    @Test
    public void test1740() throws Throwable {
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.basicWeekDate();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
        dateTimeFormatter1.toString();
        dateTimeFormatter1.hashCode();
        org.junit.Assert.assertTrue(dateTimeFormatter1.equals(dateTimeFormatter1));
    }

    @Test
    public void test1741() throws Throwable {
        java.lang.String string0 = null;
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.LocalDate localDate4 = org.joda.time.LocalDate.parse(string0, dateTimeFormatter3);
        localDate4.toString();
        localDate4.hashCode();
        org.junit.Assert.assertTrue(localDate4.equals(localDate4));
    }

    @Test
    public void test1742() throws Throwable {
        org.joda.time.DateTimeField getType0 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = getType0.getType();
        dateTimeFieldType1.toString();
        dateTimeFieldType1.hashCode();
        org.junit.Assert.assertTrue(dateTimeFieldType1.equals(dateTimeFieldType1));
    }

    @Test
    public void test1743() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay(1, 1, chronology1);
        org.joda.time.TimeOfDay timeOfDay3 = timeOfDay2.withHourOfDay(1);
        timeOfDay3.toString();
        timeOfDay3.hashCode();
        org.junit.Assert.assertTrue(timeOfDay3.equals(timeOfDay3));
    }

    @Test
    public void test1744() throws Throwable {
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfDay();
        dateTimeFieldType0.toString();
        dateTimeFieldType0.hashCode();
        org.junit.Assert.assertTrue(dateTimeFieldType0.equals(dateTimeFieldType0));
    }

    @Test
    public void test1745() throws Throwable {
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        java.lang.String string1 = null;
        java.lang.String string2 = null;
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSuffix(string1, string2);
        periodFormatterBuilder3.toString();
        periodFormatterBuilder3.hashCode();
        org.junit.Assert.assertTrue(periodFormatterBuilder3.equals(periodFormatterBuilder3));
    }

    @Test
    public void test1746() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeUtils.getZone(dateTimeZone1);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(1, 1, 1, 1, 1, dateTimeZone2);
        org.joda.time.DateTime dateTime4 = dateTime3.withEra(1);
        dateTime4.toString();
        dateTime4.hashCode();
        org.junit.Assert.assertTrue(dateTime4.equals(dateTime4));
    }

    @Test
    public void test1747() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(1, 1, 1, 1, 1, 1, 1, chronology1);
        localDateTime2.toString();
        localDateTime2.hashCode();
        org.junit.Assert.assertTrue(localDateTime2.equals(localDateTime2));
    }

    @Test
    public void test1748() throws Throwable {
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.minutes();
        org.joda.time.PeriodType periodType1 = periodType0.withMonthsRemoved();
        periodType1.toString();
        periodType1.hashCode();
        org.junit.Assert.assertTrue(periodType1.equals(periodType1));
    }

    @Test
    public void test1749() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInstant0, readableInstant1);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(1, 1, 1, 1, 1, chronology2);
        dateTime3.toString();
        dateTime3.hashCode();
        org.junit.Assert.assertTrue(dateTime3.equals(dateTime3));
    }

    @Test
    public void test1750() throws Throwable {
        org.joda.time.MonthDay.Property setCopy0 = null;
        java.lang.String string1 = null;
        org.joda.time.MonthDay monthDay2 = setCopy0.setCopy(string1);
        monthDay2.toString();
        monthDay2.hashCode();
        org.junit.Assert.assertTrue(monthDay2.equals(monthDay2));
    }

    @Test
    public void test1751() throws Throwable {
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight(1, 1, 1);
        org.joda.time.DateMidnight.Property property1 = dateMidnight0.yearOfEra();
        property1.toString();
        property1.hashCode();
        org.junit.Assert.assertTrue(property1.equals(property1));
    }

    @Test
    public void test1752() throws Throwable {
        org.joda.time.tz.ZoneInfoLogger.set(true);
    }

    @Test
    public void test1753() throws Throwable {
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.Interval interval1 = new org.joda.time.Interval(1, 1, dateTimeZone0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.Interval interval3 = interval1.withStart(readableInstant2);
        interval3.toString();
        interval3.hashCode();
        org.junit.Assert.assertTrue(interval3.equals(interval3));
    }

    @Test
    public void test1754() throws Throwable {
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder0.appendShortText(dateTimeFieldType1);
        dateTimeFormatterBuilder2.toString();
        dateTimeFormatterBuilder2.hashCode();
        org.junit.Assert.assertTrue(dateTimeFormatterBuilder2.equals(dateTimeFormatterBuilder2));
    }

    @Test
    public void test1755() throws Throwable {
        java.lang.Object object0 = null;
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getChronology(chronology1);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(object0, chronology2);
        int int4 = localDate3.getDayOfYear();
    }

    @Test
    public void test1756() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.MonthDay monthDay2 = new org.joda.time.MonthDay(chronology1);
        org.joda.time.MonthDay monthDay3 = monthDay2.plusDays(1);
        monthDay3.toString();
        monthDay3.hashCode();
        org.junit.Assert.assertTrue(monthDay3.equals(monthDay3));
    }

    @Test
    public void test1757() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.ReadablePartial readablePartial2 = null;
        int[] intArr3 = chronology1.get(readablePartial2, 1);
        intArr3.toString();
        intArr3.hashCode();
        org.junit.Assert.assertTrue(intArr3.equals(intArr3));
    }

    @Test
    public void test1758() throws Throwable {
        java.lang.Object object0 = null;
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getChronology(chronology1);
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(object0, chronology2);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight3.plusDays(1);
        dateMidnight4.toString();
        dateMidnight4.hashCode();
        org.junit.Assert.assertTrue(dateMidnight4.equals(dateMidnight4));
    }

    @Test
    public void test1759() throws Throwable {
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType1 = periodType0.withYearsRemoved();
        periodType1.toString();
        periodType1.hashCode();
        org.junit.Assert.assertTrue(periodType1.equals(periodType1));
    }

    @Test
    public void test1760() throws Throwable {
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.DurationFieldType durationFieldType1 = periodType0.getFieldType(1);
        durationFieldType1.toString();
        durationFieldType1.hashCode();
        org.junit.Assert.assertTrue(durationFieldType1.equals(durationFieldType1));
    }

    @Test
    public void test1761() throws Throwable {
        org.joda.time.ReadablePeriod readablePeriod0 = null;
        org.joda.time.Days days1 = org.joda.time.Days.standardDaysIn(readablePeriod0);
        int int2 = days1.getDays();
    }

    @Test
    public void test1762() throws Throwable {
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Days days2 = org.joda.time.Days.daysIn(readableInterval1);
        org.joda.time.DurationFieldType durationFieldType3 = days2.getFieldType();
        durationFieldType3.toString();
        durationFieldType3.hashCode();
        org.junit.Assert.assertTrue(durationFieldType3.equals(durationFieldType3));
    }

    @Test
    public void test1763() throws Throwable {
        org.joda.time.field.OffsetDateTimeField getMaximumValue0 = null;
        int int1 = getMaximumValue0.getMaximumValue();
    }

    @Test
    public void test1764() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeUtils.getZone(dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight3 = org.joda.time.DateMidnight.now(dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight3.plusWeeks(1);
        dateMidnight4.toString();
        dateMidnight4.hashCode();
        org.junit.Assert.assertTrue(dateMidnight4.equals(dateMidnight4));
    }

    @Test
    public void test1765() throws Throwable {
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(dateTimeZone0);
        org.joda.time.ReadablePartial readablePartial2 = null;
        int int3 = localTime1.compareTo(readablePartial2);
    }

    @Test
    public void test1766() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.standard();
        org.joda.time.Period period3 = new org.joda.time.Period(readableInstant0, readableDuration1, periodType2);
        period3.toString();
        period3.hashCode();
        org.junit.Assert.assertTrue(period3.equals(period3));
    }

    @Test
    public void test1767() throws Throwable {
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime(1, 1, 1, 1, 1, 1, 1);
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.hourOfDay();
        property1.toString();
        property1.hashCode();
        org.junit.Assert.assertTrue(property1.equals(property1));
    }

    @Test
    public void test1768() throws Throwable {
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.ordinalDate();
        java.lang.String string1 = null;
        org.joda.time.LocalTime localTime2 = dateTimeFormatter0.parseLocalTime(string1);
        localTime2.toString();
        localTime2.hashCode();
        org.junit.Assert.assertTrue(localTime2.equals(localTime2));
    }

    @Test
    public void test1769() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay(1, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay(1, 1, 1, 1, chronology3);
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTime dateTime7 = yearMonthDay2.toDateTime(timeOfDay4, dateTimeZone6);
        dateTime7.toString();
        dateTime7.hashCode();
        org.junit.Assert.assertTrue(dateTime7.equals(dateTime7));
    }

    @Test
    public void test1770() throws Throwable {
        org.joda.time.ReadablePeriod readablePeriod0 = null;
        org.joda.time.Hours hours1 = org.joda.time.Hours.standardHoursIn(readablePeriod0);
        org.joda.time.Hours hours2 = hours1.negated();
        hours2.toString();
        hours2.hashCode();
        org.junit.Assert.assertTrue(hours2.equals(hours2));
    }

    @Test
    public void test1771() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeUtils.getZone(dateTimeZone1);
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime(1, dateTimeZone2);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalTime localTime5 = localTime3.withField(dateTimeFieldType4, 1);
        localTime5.toString();
        localTime5.hashCode();
        org.junit.Assert.assertTrue(localTime5.equals(localTime5));
    }

    @Test
    public void test1772() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeUtils.getZone(dateTimeZone1);
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime(1, dateTimeZone2);
        org.joda.time.LocalTime localTime4 = localTime3.minusMinutes(1);
        localTime4.toString();
        localTime4.hashCode();
        org.junit.Assert.assertTrue(localTime4.equals(localTime4));
    }

    @Test
    public void test1773() throws Throwable {
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay(1, 1, 1, 1);
        org.joda.time.TimeOfDay timeOfDay1 = timeOfDay0.plusMinutes(1);
        timeOfDay1.toString();
        timeOfDay1.hashCode();
        org.junit.Assert.assertTrue(timeOfDay1.equals(timeOfDay1));
    }

    @Test
    public void test1774() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(1, chronology1);
        org.joda.time.DurationFieldType durationFieldType3 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.LocalDate localDate4 = localDate2.withFieldAdded(durationFieldType3, 1);
        localDate4.toString();
        localDate4.hashCode();
        org.junit.Assert.assertTrue(localDate4.equals(localDate4));
    }

    @Test
    public void test1775() throws Throwable {
        java.lang.Object object0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInstant1, readableInstant2);
        org.joda.time.Period period4 = new org.joda.time.Period(object0, chronology3);
        period4.toString();
        period4.hashCode();
        org.junit.Assert.assertTrue(period4.equals(period4));
    }

    @Test
    public void test1776() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now(chronology1);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime2.withCenturyOfEra(1);
        localDateTime3.toString();
        localDateTime3.hashCode();
        org.junit.Assert.assertTrue(localDateTime3.equals(localDateTime3));
    }

    @Test
    public void test1777() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod(readableInstant0, readableInstant1, periodType2);
        mutablePeriod3.addHours(1);
    }

    @Test
    public void test1778() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInstant0, readableInstant1);
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(chronology2);
        org.joda.time.LocalTime localTime4 = timeOfDay3.toLocalTime();
        localTime4.toString();
        localTime4.hashCode();
        org.junit.Assert.assertTrue(localTime4.equals(localTime4));
    }

    @Test
    public void test1779() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime(chronology1);
        org.joda.time.MutableDateTime mutableDateTime3 = mutableDateTime2.copy();
        mutableDateTime3.toString();
        mutableDateTime3.hashCode();
        org.junit.Assert.assertTrue(mutableDateTime3.equals(mutableDateTime3));
    }

    @Test
    public void test1780() throws Throwable {
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Weeks weeks3 = org.joda.time.Weeks.weeksIn(readableInterval2);
        org.joda.time.Minutes minutes4 = weeks3.toStandardMinutes();
        minutes4.toString();
        minutes4.hashCode();
        org.junit.Assert.assertTrue(minutes4.equals(minutes4));
    }

    @Test
    public void test1781() throws Throwable {
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.seconds();
        java.lang.String string1 = durationFieldType0.getName();
        string1.toString();
        string1.hashCode();
        org.junit.Assert.assertTrue(string1.equals(string1));
    }

    @Test
    public void test1782() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.LocalDate localDate2 = org.joda.time.LocalDate.now(chronology1);
        org.joda.time.LocalDate localDate3 = localDate2.withCenturyOfEra(1);
        localDate3.toString();
        localDate3.hashCode();
        org.junit.Assert.assertTrue(localDate3.equals(localDate3));
    }

    @Test
    public void test1783() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInstant0, readableInstant1);
        org.joda.time.DurationField durationField3 = chronology2.millis();
        durationField3.toString();
        durationField3.hashCode();
        org.junit.Assert.assertTrue(durationField3.equals(durationField3));
    }

    @Test
    public void test1784() throws Throwable {
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> map0 = org.joda.time.DateTimeUtils.getDefaultTimeZoneNames();
        map0.toString();
        map0.hashCode();
        org.junit.Assert.assertTrue(map0.equals(map0));
    }

    @Test
    public void test1785() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.YearMonth yearMonth2 = new org.joda.time.YearMonth(1, chronology1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.YearMonth yearMonth4 = yearMonth2.withPeriodAdded(readablePeriod3, 1);
        yearMonth4.toString();
        yearMonth4.hashCode();
        org.junit.Assert.assertTrue(yearMonth4.equals(yearMonth4));
    }

    @Test
    public void test1786() throws Throwable {
        org.joda.time.field.UnsupportedDateTimeField getMinimumValue0 = null;
        org.joda.time.ReadablePartial readablePartial1 = null;
        int[] intArr2 = null;
        int int3 = getMinimumValue0.getMinimumValue(readablePartial1, intArr2);
    }

    @Test
    public void test1787() throws Throwable {
        org.joda.time.Days days0 = org.joda.time.Days.days(1);
        org.joda.time.Minutes minutes1 = days0.toStandardMinutes();
        minutes1.toString();
        minutes1.hashCode();
        org.junit.Assert.assertTrue(minutes1.equals(minutes1));
    }

    @Test
    public void test1788() throws Throwable {
        org.joda.time.DateTimeField getLeapAmount0 = null;
        int int1 = getLeapAmount0.getLeapAmount(1);
    }

    @Test
    public void test1789() throws Throwable {
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay(1, 1, 1);
        org.joda.time.YearMonthDay.Property property1 = yearMonthDay0.year();
        property1.toString();
        property1.hashCode();
        org.junit.Assert.assertTrue(property1.equals(property1));
    }

    @Test
    public void test1790() throws Throwable {
        org.joda.time.format.PeriodFormatter periodFormatter0 = org.joda.time.format.PeriodFormat.getDefault();
        boolean boolean1 = periodFormatter0.isPrinter();
    }

    @Test
    public void test1791() throws Throwable {
        org.joda.time.field.DecoratedDurationField getWrappedField0 = null;
        org.joda.time.DurationField durationField1 = getWrappedField0.getWrappedField();
        durationField1.toString();
        durationField1.hashCode();
        org.junit.Assert.assertTrue(durationField1.equals(durationField1));
    }

    @Test
    public void test1792() throws Throwable {
        org.joda.time.field.UnsupportedDateTimeField getMinimumValue0 = null;
        org.joda.time.ReadablePartial readablePartial1 = null;
        int int2 = getMinimumValue0.getMinimumValue(readablePartial1);
    }

    @Test
    public void test1793() throws Throwable {
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.years();
        org.joda.time.field.PreciseDurationField preciseDurationField1 = new org.joda.time.field.PreciseDurationField(durationFieldType0, 1);
        preciseDurationField1.toString();
        preciseDurationField1.hashCode();
        org.junit.Assert.assertTrue(preciseDurationField1.equals(preciseDurationField1));
    }

    @Test
    public void test1794() throws Throwable {
        java.lang.Object object0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant1);
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(object0, chronology2);
        timeOfDay3.toString();
        timeOfDay3.hashCode();
        org.junit.Assert.assertTrue(timeOfDay3.equals(timeOfDay3));
    }

    @Test
    public void test1795() throws Throwable {
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.hours();
        durationFieldType0.toString();
        durationFieldType0.hashCode();
        org.junit.Assert.assertTrue(durationFieldType0.equals(durationFieldType0));
    }

    @Test
    public void test1796() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.weekyear();
        property3.toString();
        property3.hashCode();
        org.junit.Assert.assertTrue(property3.equals(property3));
    }

    @Test
    public void test1797() throws Throwable {
        org.joda.time.LocalDate.Property withMaximumValue0 = null;
        org.joda.time.LocalDate localDate1 = withMaximumValue0.withMaximumValue();
        localDate1.toString();
        localDate1.hashCode();
        org.junit.Assert.assertTrue(localDate1.equals(localDate1));
    }

    @Test
    public void test1798() throws Throwable {
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> map1 = org.joda.time.DateTimeUtils.getDefaultTimeZoneNames();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder0.appendTimeZoneName(map1);
        dateTimeFormatterBuilder2.toString();
        dateTimeFormatterBuilder2.hashCode();
        org.junit.Assert.assertTrue(dateTimeFormatterBuilder2.equals(dateTimeFormatterBuilder2));
    }

    @Test
    public void test1799() throws Throwable {
        java.lang.Object object0 = null;
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeUtils.getZone(dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(object0, dateTimeZone3);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight4.withYear(1);
        dateMidnight5.toString();
        dateMidnight5.hashCode();
        org.junit.Assert.assertTrue(dateMidnight5.equals(dateMidnight5));
    }

    @Test
    public void test1800() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        long long3 = chronology1.add(readablePeriod2, 1, 1);
    }

    @Test
    public void test1801() throws Throwable {
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder0.append(dateTimeParser1);
        dateTimeFormatterBuilder2.toString();
        dateTimeFormatterBuilder2.hashCode();
        org.junit.Assert.assertTrue(dateTimeFormatterBuilder2.equals(dateTimeFormatterBuilder2));
    }

    @Test
    public void test1802() throws Throwable {
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime(1, 1, 1);
        org.joda.time.DurationFieldType durationFieldType1 = org.joda.time.DurationFieldType.hours();
        org.joda.time.LocalTime localTime2 = localTime0.withFieldAdded(durationFieldType1, 1);
        localTime2.toString();
        localTime2.hashCode();
        org.junit.Assert.assertTrue(localTime2.equals(localTime2));
    }

    @Test
    public void test1803() throws Throwable {
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.minutes(1);
        org.joda.time.DurationFieldType durationFieldType1 = minutes0.getFieldType();
        durationFieldType1.toString();
        durationFieldType1.hashCode();
        org.junit.Assert.assertTrue(durationFieldType1.equals(durationFieldType1));
    }

    @Test
    public void test1804() throws Throwable {
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getChronology(chronology1);
        org.joda.time.Partial partial3 = new org.joda.time.Partial(dateTimeFieldType0, 1, chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.Partial partial5 = partial3.with(dateTimeFieldType4, 1);
        partial5.toString();
        partial5.hashCode();
        org.junit.Assert.assertTrue(partial5.equals(partial5));
    }

    @Test
    public void test1805() throws Throwable {
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.tTimeNoMillis();
        java.lang.Appendable appendable1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        dateTimeFormatter0.printTo(appendable1, readableInstant2);
    }

    @Test
    public void test1806() throws Throwable {
        org.joda.time.Duration duration0 = org.joda.time.Duration.standardSeconds(1);
        long long1 = duration0.getStandardSeconds();
    }

    @Test
    public void test1807() throws Throwable {
        java.lang.Object object0 = null;
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getChronology(chronology1);
        org.joda.time.MonthDay monthDay3 = new org.joda.time.MonthDay(object0, chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = monthDay3.getFieldType(1);
        dateTimeFieldType4.toString();
        dateTimeFieldType4.hashCode();
        org.junit.Assert.assertTrue(dateTimeFieldType4.equals(dateTimeFieldType4));
    }

    @Test
    public void test1808() throws Throwable {
        java.lang.Object object0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant1);
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod(object0, chronology2);
        mutablePeriod3.setPeriod(1, 1, 1, 1, 1, 1, 1, 1);
    }

    @Test
    public void test1809() throws Throwable {
        java.lang.Object object0 = null;
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getChronology(chronology1);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(object0, chronology2);
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        org.joda.time.DateMidnight dateMidnight6 = localDate3.toDateMidnight(dateTimeZone5);
        dateMidnight6.toString();
        dateMidnight6.hashCode();
        org.junit.Assert.assertTrue(dateMidnight6.equals(dateMidnight6));
    }

    @Test
    public void test1810() throws Throwable {
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.basicTTime();
        dateTimeFormatter0.toString();
        dateTimeFormatter0.hashCode();
        org.junit.Assert.assertTrue(dateTimeFormatter0.equals(dateTimeFormatter0));
    }

    @Test
    public void test1811() throws Throwable {
        org.joda.time.Period period0 = org.joda.time.Period.months(1);
        org.joda.time.Period period1 = period0.withDays(1);
        period1.toString();
        period1.hashCode();
        org.junit.Assert.assertTrue(period1.equals(period1));
    }

    @Test
    public void test1812() throws Throwable {
        java.util.Date date0 = null;
        org.joda.time.YearMonth yearMonth1 = org.joda.time.YearMonth.fromDateFields(date0);
        yearMonth1.toString();
        yearMonth1.hashCode();
        org.junit.Assert.assertTrue(yearMonth1.equals(yearMonth1));
    }

    @Test
    public void test1813() throws Throwable {
        java.lang.String string0 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = org.joda.time.format.ISODateTimeFormat.basicDateTime();
        org.joda.time.Instant instant2 = org.joda.time.Instant.parse(string0, dateTimeFormatter1);
        instant2.toString();
        instant2.hashCode();
        org.junit.Assert.assertTrue(instant2.equals(instant2));
    }

    @Test
    public void test1814() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        partial3.toString();
        partial3.hashCode();
        org.junit.Assert.assertTrue(partial3.equals(partial3));
    }

    @Test
    public void test1815() throws Throwable {
        org.joda.time.Period period0 = new org.joda.time.Period(1, 1, 1, 1, 1, 1, 1, 1);
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.Period period2 = period0.normalizedStandard(periodType1);
        period2.toString();
        period2.hashCode();
        org.junit.Assert.assertTrue(period2.equals(period2));
    }

    @Test
    public void test1816() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(1, 1, 1, 1, 1, 1, 1, chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.secondOfMinute();
        property3.toString();
        property3.hashCode();
        org.junit.Assert.assertTrue(property3.equals(property3));
    }

    @Test
    public void test1817() throws Throwable {
        org.joda.time.Seconds seconds0 = org.joda.time.Seconds.seconds(1);
        org.joda.time.Seconds seconds1 = seconds0.dividedBy(1);
        seconds1.toString();
        seconds1.hashCode();
        org.junit.Assert.assertTrue(seconds1.equals(seconds1));
    }

    @Test
    public void test1818() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeUtils.getZone(dateTimeZone1);
        org.joda.time.LocalDate localDate3 = org.joda.time.LocalDate.now(dateTimeZone2);
        org.joda.time.LocalDate.Property property4 = localDate3.weekOfWeekyear();
        property4.toString();
        property4.hashCode();
        org.junit.Assert.assertTrue(property4.equals(property4));
    }

    @Test
    public void test1819() throws Throwable {
        java.lang.String string0 = null;
        org.joda.time.MutableInterval mutableInterval1 = org.joda.time.MutableInterval.parse(string0);
        org.joda.time.ReadableDuration readableDuration2 = null;
        mutableInterval1.setDurationBeforeEnd(readableDuration2);
    }

    @Test
    public void test1820() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.MutableDateTime mutableDateTime2 = org.joda.time.MutableDateTime.now(dateTimeZone1);
        org.joda.time.ReadableDuration readableDuration3 = null;
        mutableDateTime2.add(readableDuration3, 1);
    }

    @Test
    public void test1821() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(1, chronology1);
        localDate2.toString();
        localDate2.hashCode();
        org.junit.Assert.assertTrue(localDate2.equals(localDate2));
    }

    @Test
    public void test1822() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, readableInstant2, 1);
        gJChronology3.toString();
        gJChronology3.hashCode();
        org.junit.Assert.assertTrue(gJChronology3.equals(gJChronology3));
    }

    @Test
    public void test1823() throws Throwable {
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder0.appendSignedDecimal(dateTimeFieldType1, 1, 1);
        dateTimeFormatterBuilder2.toString();
        dateTimeFormatterBuilder2.hashCode();
        org.junit.Assert.assertTrue(dateTimeFormatterBuilder2.equals(dateTimeFormatterBuilder2));
    }

    @Test
    public void test1824() throws Throwable {
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        java.lang.String string1 = null;
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSuffix(string1);
        periodFormatterBuilder2.toString();
        periodFormatterBuilder2.hashCode();
        org.junit.Assert.assertTrue(periodFormatterBuilder2.equals(periodFormatterBuilder2));
    }

    @Test
    public void test1825() throws Throwable {
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getChronology(chronology1);
        org.joda.time.Partial partial3 = new org.joda.time.Partial(dateTimeFieldType0, 1, chronology2);
        java.lang.String string4 = partial3.toStringList();
        string4.toString();
        string4.hashCode();
        org.junit.Assert.assertTrue(string4.equals(string4));
    }

    @Test
    public void test1826() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.chrono.StrictChronology strictChronology2 = org.joda.time.chrono.StrictChronology.getInstance(chronology1);
        java.util.TimeZone timeZone3 = null;
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        org.joda.time.Chronology chronology5 = strictChronology2.withZone(dateTimeZone4);
        chronology5.toString();
        chronology5.hashCode();
        org.junit.Assert.assertTrue(chronology5.equals(chronology5));
    }

    @Test
    public void test1827() throws Throwable {
        java.lang.Object object0 = null;
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Period period2 = new org.joda.time.Period(object0, periodType1);
        period2.toString();
        period2.hashCode();
        org.junit.Assert.assertTrue(period2.equals(period2));
    }

    @Test
    public void test1828() throws Throwable {
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.dateTime();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
        dateTimeFormatter1.toString();
        dateTimeFormatter1.hashCode();
        org.junit.Assert.assertTrue(dateTimeFormatter1.equals(dateTimeFormatter1));
    }

    @Test
    public void test1829() throws Throwable {
        org.joda.time.format.PeriodFormatter periodFormatter0 = org.joda.time.format.ISOPeriodFormat.alternateExtendedWithWeeks();
        periodFormatter0.toString();
        periodFormatter0.hashCode();
        org.junit.Assert.assertTrue(periodFormatter0.equals(periodFormatter0));
    }

    @Test
    public void test1830() throws Throwable {
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        mutableInterval0.setStartMillis(1);
    }

    @Test
    public void test1831() throws Throwable {
        org.joda.time.Interval interval0 = new org.joda.time.Interval(1, 1);
        interval0.toString();
        interval0.hashCode();
        org.junit.Assert.assertTrue(interval0.equals(interval0));
    }

    @Test
    public void test1832() throws Throwable {
        org.joda.time.ReadablePartial readablePartial0 = null;
        org.joda.time.ReadablePartial readablePartial1 = null;
        org.joda.time.Period period2 = org.joda.time.Period.fieldDifference(readablePartial0, readablePartial1);
        period2.toString();
        period2.hashCode();
        org.junit.Assert.assertTrue(period2.equals(period2));
    }

    @Test
    public void test1833() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime(chronology1);
        java.util.TimeZone timeZone3 = null;
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeUtils.getZone(dateTimeZone4);
        mutableDateTime2.setZoneRetainFields(dateTimeZone5);
    }

    @Test
    public void test1834() throws Throwable {
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.DateMidnight dateMidnight1 = yearMonthDay0.toDateMidnight();
        dateMidnight1.toString();
        dateMidnight1.hashCode();
        org.junit.Assert.assertTrue(dateMidnight1.equals(dateMidnight1));
    }

    @Test
    public void test1835() throws Throwable {
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.time();
        org.joda.time.Period period1 = new org.joda.time.Period(1, periodType0);
        org.joda.time.Period period2 = period1.minusMonths(1);
        period2.toString();
        period2.hashCode();
        org.junit.Assert.assertTrue(period2.equals(period2));
    }

    @Test
    public void test1836() throws Throwable {
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendTimeZoneShortName();
        dateTimeFormatterBuilder1.toString();
        dateTimeFormatterBuilder1.hashCode();
        org.junit.Assert.assertTrue(dateTimeFormatterBuilder1.equals(dateTimeFormatterBuilder1));
    }

    @Test
    public void test1837() throws Throwable {
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.ordinalDateTimeNoMillis();
        java.lang.String string1 = dateTimeFormatter0.print(1);
        string1.toString();
        string1.hashCode();
        org.junit.Assert.assertTrue(string1.equals(string1));
    }

    @Test
    public void test1838() throws Throwable {
        org.joda.time.DateTimeField dateTimeField0 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.dayOfWeek();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField2 = new org.joda.time.field.DividedDateTimeField(dateTimeField0, dateTimeFieldType1, 1);
        dividedDateTimeField2.toString();
        dividedDateTimeField2.hashCode();
        org.junit.Assert.assertTrue(dividedDateTimeField2.equals(dividedDateTimeField2));
    }

    @Test
    public void test1839() throws Throwable {
        org.joda.time.chrono.GJChronology gJChronology0 = org.joda.time.chrono.GJChronology.getInstance();
        int int1 = gJChronology0.getMinimumDaysInFirstWeek();
    }

    @Test
    public void test1840() throws Throwable {
        org.joda.time.Duration duration0 = new org.joda.time.Duration(1, 1);
        duration0.toString();
        duration0.hashCode();
        org.junit.Assert.assertTrue(duration0.equals(duration0));
    }

    @Test
    public void test1841() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeUtils.getZone(dateTimeZone1);
        int int3 = dateTimeZone2.hashCode();
    }

    @Test
    public void test1842() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeUtils.getZone(dateTimeZone1);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(1, 1, 1, 1, 1, 1, dateTimeZone2);
        org.joda.time.YearMonthDay yearMonthDay4 = dateTime3.toYearMonthDay();
        yearMonthDay4.toString();
        yearMonthDay4.hashCode();
        org.junit.Assert.assertTrue(yearMonthDay4.equals(yearMonthDay4));
    }

    @Test
    public void test1843() throws Throwable {
        java.lang.Object object0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInstant1, readableInstant2);
        org.joda.time.MutableInterval mutableInterval4 = new org.joda.time.MutableInterval(object0, chronology3);
        mutableInterval4.toString();
        mutableInterval4.hashCode();
        org.junit.Assert.assertTrue(mutableInterval4.equals(mutableInterval4));
    }

    @Test
    public void test1844() throws Throwable {
        org.joda.time.tz.DefaultNameProvider defaultNameProvider0 = new org.joda.time.tz.DefaultNameProvider();
        java.util.Locale locale1 = null;
        java.lang.String string2 = null;
        java.lang.String string3 = null;
        java.lang.String string4 = defaultNameProvider0.getName(locale1, string2, string3);
        string4.toString();
        string4.hashCode();
        org.junit.Assert.assertTrue(string4.equals(string4));
    }

    @Test
    public void test1845() throws Throwable {
        java.lang.String string0 = null;
        org.joda.time.Years years1 = org.joda.time.Years.parseYears(string0);
        org.joda.time.Years years2 = org.joda.time.Years.years(1);
        boolean boolean3 = years1.isLessThan(years2);
    }

    @Test
    public void test1846() throws Throwable {
        org.joda.time.MutableDateTime.Property add0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = add0.add(1);
        mutableDateTime1.toString();
        mutableDateTime1.hashCode();
        org.junit.Assert.assertTrue(mutableDateTime1.equals(mutableDateTime1));
    }

    @Test
    public void test1847() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.YearMonth yearMonth2 = new org.joda.time.YearMonth(1, chronology1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArr3 = yearMonth2.getFieldTypes();
        dateTimeFieldTypeArr3.toString();
        dateTimeFieldTypeArr3.hashCode();
        org.junit.Assert.assertTrue(dateTimeFieldTypeArr3.equals(dateTimeFieldTypeArr3));
    }

    @Test
    public void test1848() throws Throwable {
        org.joda.time.chrono.BuddhistChronology buddhistChronology0 = org.joda.time.chrono.BuddhistChronology.getInstanceUTC();
        java.lang.String string1 = buddhistChronology0.toString();
        string1.toString();
        string1.hashCode();
        org.junit.Assert.assertTrue(string1.equals(string1));
    }

    @Test
    public void test1849() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeUtils.getZone(dateTimeZone1);
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime(1, dateTimeZone2);
        mutableDateTime3.setHourOfDay(1);
    }

    @Test
    public void test1850() throws Throwable {
        org.joda.time.field.ZeroIsMaxDateTimeField remainder0 = null;
        long long1 = remainder0.remainder(1);
    }

    @Test
    public void test1851() throws Throwable {
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Seconds seconds3 = org.joda.time.Seconds.secondsIn(readableInterval2);
        seconds3.toString();
        seconds3.hashCode();
        org.junit.Assert.assertTrue(seconds3.equals(seconds3));
    }

    @Test
    public void test1852() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay(1, chronology1);
        org.joda.time.Interval interval3 = yearMonthDay2.toInterval();
        interval3.toString();
        interval3.hashCode();
        org.junit.Assert.assertTrue(interval3.equals(interval3));
    }

    @Test
    public void test1853() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.now(chronology1);
        int int3 = localTime2.getMinuteOfHour();
    }

    @Test
    public void test1854() throws Throwable {
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.field.PreciseDurationField preciseDurationField1 = new org.joda.time.field.PreciseDurationField(durationFieldType0, 1);
        long long2 = preciseDurationField1.getUnitMillis();
    }

    @Test
    public void test1855() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfWeek();
        property3.toString();
        property3.hashCode();
        org.junit.Assert.assertTrue(property3.equals(property3));
    }

    @Test
    public void test1856() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.monthOfYear();
        dateTimeField2.toString();
        dateTimeField2.hashCode();
        org.junit.Assert.assertTrue(dateTimeField2.equals(dateTimeField2));
    }

    @Test
    public void test1857() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(1, chronology1);
        java.util.TimeZone timeZone3 = null;
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeUtils.getZone(dateTimeZone4);
        org.joda.time.DateTime dateTime6 = localDate2.toDateTimeAtMidnight(dateTimeZone5);
        dateTime6.toString();
        dateTime6.hashCode();
        org.junit.Assert.assertTrue(dateTime6.equals(dateTime6));
    }

    @Test
    public void test1858() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInstant0, readableInstant1);
        long long3 = chronology2.getDateTimeMillis(1, 1, 1, 1, 1);
    }

    @Test
    public void test1859() throws Throwable {
        org.joda.time.LocalDate.Property roundHalfCeilingCopy0 = null;
        org.joda.time.LocalDate localDate1 = roundHalfCeilingCopy0.roundHalfCeilingCopy();
        localDate1.toString();
        localDate1.hashCode();
        org.junit.Assert.assertTrue(localDate1.equals(localDate1));
    }

    @Test
    public void test1860() throws Throwable {
        org.joda.time.field.DelegatedDateTimeField isLeap0 = null;
        boolean boolean1 = isLeap0.isLeap(1);
    }

    @Test
    public void test1861() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInstant0, readableInstant1);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.dayOfWeek();
        dateTimeField3.toString();
        dateTimeField3.hashCode();
        org.junit.Assert.assertTrue(dateTimeField3.equals(dateTimeField3));
    }

    @Test
    public void test1862() throws Throwable {
        java.lang.Object object0 = null;
        org.joda.time.Duration duration1 = new org.joda.time.Duration(object0);
        org.joda.time.Duration duration2 = duration1.plus(1);
        duration2.toString();
        duration2.hashCode();
        org.junit.Assert.assertTrue(duration2.equals(duration2));
    }

    @Test
    public void test1863() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.Interval interval2 = new org.joda.time.Interval(1, 1, dateTimeZone1);
        org.joda.time.Interval interval3 = interval2.withEndMillis(1);
        interval3.toString();
        interval3.hashCode();
        org.junit.Assert.assertTrue(interval3.equals(interval3));
    }

    @Test
    public void test1864() throws Throwable {
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay(1, 1, 1, 1);
        org.joda.time.TimeOfDay.Property property1 = timeOfDay0.millisOfSecond();
        property1.toString();
        property1.hashCode();
        org.junit.Assert.assertTrue(property1.equals(property1));
    }

    @Test
    public void test1865() throws Throwable {
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.days();
        org.joda.time.Period period1 = new org.joda.time.Period(1, periodType0);
        int int2 = period1.getHours();
    }

    @Test
    public void test1866() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket3 = new org.joda.time.format.DateTimeParserBucket(1, chronology1, locale2);
        org.joda.time.Chronology chronology4 = dateTimeParserBucket3.getChronology();
        chronology4.toString();
        chronology4.hashCode();
        org.junit.Assert.assertTrue(chronology4.equals(chronology4));
    }

    @Test
    public void test1867() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInstant0, readableInstant1);
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth(1, chronology2);
        yearMonth3.toString();
        yearMonth3.hashCode();
        org.junit.Assert.assertTrue(yearMonth3.equals(yearMonth3));
    }

    @Test
    public void test1868() throws Throwable {
        org.joda.time.field.ZeroIsMaxDateTimeField roundHalfEven0 = null;
        long long1 = roundHalfEven0.roundHalfEven(1);
    }

    @Test
    public void test1869() throws Throwable {
        org.joda.time.Period period0 = org.joda.time.Period.months(1);
        int int1 = period0.getDays();
    }

    @Test
    public void test1870() throws Throwable {
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder0.appendSignedDecimal(dateTimeFieldType1, 1, 1);
        dateTimeFormatterBuilder2.toString();
        dateTimeFormatterBuilder2.hashCode();
        org.junit.Assert.assertTrue(dateTimeFormatterBuilder2.equals(dateTimeFormatterBuilder2));
    }

    @Test
    public void test1871() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.ReadableDateTime readableDateTime2 = null;
        org.joda.time.ReadableDateTime readableDateTime3 = null;
        org.joda.time.chrono.LimitChronology limitChronology4 = org.joda.time.chrono.LimitChronology.getInstance(chronology1, readableDateTime2, readableDateTime3);
        java.lang.String string5 = limitChronology4.toString();
        string5.toString();
        string5.hashCode();
        org.junit.Assert.assertTrue(string5.equals(string5));
    }

    @Test
    public void test1872() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.LocalDate localDate2 = org.joda.time.LocalDate.now(chronology1);
        java.lang.Object object3 = null;
        boolean boolean4 = localDate2.equals(object3);
    }

    @Test
    public void test1873() throws Throwable {
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime(1, 1, 1, 1, 1);
        org.joda.time.DateTime.Property property1 = dateTime0.secondOfDay();
        property1.toString();
        property1.hashCode();
        org.junit.Assert.assertTrue(property1.equals(property1));
    }

    @Test
    public void test1874() throws Throwable {
        org.joda.time.ReadablePeriod readablePeriod0 = null;
        org.joda.time.Minutes minutes1 = org.joda.time.Minutes.standardMinutesIn(readablePeriod0);
        org.joda.time.PeriodType periodType2 = minutes1.getPeriodType();
        periodType2.toString();
        periodType2.hashCode();
        org.junit.Assert.assertTrue(periodType2.equals(periodType2));
    }

    @Test
    public void test1875() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(1, chronology1);
        int int3 = localDateTime2.getWeekOfWeekyear();
    }

    @Test
    public void test1876() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        org.joda.time.DateTime dateTime3 = dateTime2.plus(1);
        dateTime3.toString();
        dateTime3.hashCode();
        org.junit.Assert.assertTrue(dateTime3.equals(dateTime3));
    }

    @Test
    public void test1877() throws Throwable {
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant1);
        org.joda.time.Partial partial3 = new org.joda.time.Partial(dateTimeFieldType0, 1, chronology2);
        partial3.toString();
        partial3.hashCode();
        org.junit.Assert.assertTrue(partial3.equals(partial3));
    }

    @Test
    public void test1878() throws Throwable {
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Seconds seconds3 = org.joda.time.Seconds.secondsIn(readableInterval2);
        org.joda.time.Weeks weeks4 = seconds3.toStandardWeeks();
        weeks4.toString();
        weeks4.hashCode();
        org.junit.Assert.assertTrue(weeks4.equals(weeks4));
    }

    @Test
    public void test1879() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone2 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone1);
        int int3 = cachedDateTimeZone2.hashCode();
    }

    @Test
    public void test1880() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime(1, 1, 1, 1, 1, 1, 1, chronology1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.minuteOfHour();
        property3.toString();
        property3.hashCode();
        org.junit.Assert.assertTrue(property3.equals(property3));
    }

    @Test
    public void test1881() throws Throwable {
        java.lang.String string0 = null;
        org.joda.time.format.PeriodFormatter periodFormatter1 = org.joda.time.format.ISOPeriodFormat.alternateExtended();
        org.joda.time.MutablePeriod mutablePeriod2 = org.joda.time.MutablePeriod.parse(string0, periodFormatter1);
        mutablePeriod2.toString();
        mutablePeriod2.hashCode();
        org.junit.Assert.assertTrue(mutablePeriod2.equals(mutablePeriod2));
    }

    @Test
    public void test1882() throws Throwable {
        org.joda.time.field.DelegatedDateTimeField set0 = null;
        java.lang.String string1 = null;
        java.util.Locale locale2 = null;
        long long3 = set0.set(1, string1, locale2);
    }

    @Test
    public void test1883() throws Throwable {
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.Instant instant1 = instant0.minus(1);
        instant1.toString();
        instant1.hashCode();
        org.junit.Assert.assertTrue(instant1.equals(instant1));
    }

    @Test
    public void test1884() throws Throwable {
        java.lang.Object object0 = null;
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getChronology(chronology1);
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth(object0, chronology2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.Chronology chronology5 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant4);
        org.joda.time.YearMonth yearMonth6 = yearMonth3.withChronologyRetainFields(chronology5);
        yearMonth6.toString();
        yearMonth6.hashCode();
        org.junit.Assert.assertTrue(yearMonth6.equals(yearMonth6));
    }

    @Test
    public void test1885() throws Throwable {
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay1 = yearMonthDay0.minusDays(1);
        yearMonthDay1.toString();
        yearMonthDay1.hashCode();
        org.junit.Assert.assertTrue(yearMonthDay1.equals(yearMonthDay1));
    }

    @Test
    public void test1886() throws Throwable {
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfHour();
        java.lang.Number number1 = null;
        java.lang.Number number2 = null;
        java.lang.Number number3 = null;
        java.lang.String string4 = null;
        org.joda.time.IllegalFieldValueException illegalFieldValueException5 = new org.joda.time.IllegalFieldValueException(dateTimeFieldType0, number1, number2, number3, string4);
        illegalFieldValueException5.toString();
        illegalFieldValueException5.hashCode();
        org.junit.Assert.assertTrue(illegalFieldValueException5.equals(illegalFieldValueException5));
    }

    @Test
    public void test1887() throws Throwable {
        java.lang.Object object0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(object0);
        yearMonthDay1.toString();
        yearMonthDay1.hashCode();
        org.junit.Assert.assertTrue(yearMonthDay1.equals(yearMonthDay1));
    }

    @Test
    public void test1888() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.ISOChronology iSOChronology2 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        iSOChronology2.toString();
        iSOChronology2.hashCode();
        org.junit.Assert.assertTrue(iSOChronology2.equals(iSOChronology2));
    }

    @Test
    public void test1889() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInstant0, readableInstant1);
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth(chronology2);
        yearMonth3.toString();
        yearMonth3.hashCode();
        org.junit.Assert.assertTrue(yearMonth3.equals(yearMonth3));
    }

    @Test
    public void test1890() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInstant0, readableInstant1);
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(chronology2);
        dateMidnight3.toString();
        dateMidnight3.hashCode();
        org.junit.Assert.assertTrue(dateMidnight3.equals(dateMidnight3));
    }

    @Test
    public void test1891() throws Throwable {
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.Instant instant1 = instant0.withMillis(1);
        instant1.toString();
        instant1.hashCode();
        org.junit.Assert.assertTrue(instant1.equals(instant1));
    }

    @Test
    public void test1892() throws Throwable {
        org.joda.time.TimeOfDay.Property addNoWrapToCopy0 = null;
        org.joda.time.TimeOfDay timeOfDay1 = addNoWrapToCopy0.addNoWrapToCopy(1);
        timeOfDay1.toString();
        timeOfDay1.hashCode();
        org.junit.Assert.assertTrue(timeOfDay1.equals(timeOfDay1));
    }

    @Test
    public void test1893() throws Throwable {
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder0.appendOptional(dateTimeParser1);
        dateTimeFormatterBuilder2.toString();
        dateTimeFormatterBuilder2.hashCode();
        org.junit.Assert.assertTrue(dateTimeFormatterBuilder2.equals(dateTimeFormatterBuilder2));
    }

    @Test
    public void test1894() throws Throwable {
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        localTime0.toString();
        localTime0.hashCode();
        org.junit.Assert.assertTrue(localTime0.equals(localTime0));
    }

    @Test
    public void test1895() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.LocalDate localDate2 = org.joda.time.LocalDate.now(chronology1);
        java.util.TimeZone timeZone3 = null;
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeUtils.getZone(dateTimeZone4);
        org.joda.time.DateTime dateTime6 = localDate2.toDateTimeAtCurrentTime(dateTimeZone5);
        dateTime6.toString();
        dateTime6.hashCode();
        org.junit.Assert.assertTrue(dateTime6.equals(dateTime6));
    }

    @Test
    public void test1896() throws Throwable {
        org.joda.time.LocalTime.Property withMinimumValue0 = null;
        org.joda.time.LocalTime localTime1 = withMinimumValue0.withMinimumValue();
        localTime1.toString();
        localTime1.hashCode();
        org.junit.Assert.assertTrue(localTime1.equals(localTime1));
    }

    @Test
    public void test1897() throws Throwable {
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant1);
        org.joda.time.Partial partial3 = new org.joda.time.Partial(dateTimeFieldType0, 1, chronology2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArr4 = partial3.getFieldTypes();
        dateTimeFieldTypeArr4.toString();
        dateTimeFieldTypeArr4.hashCode();
        org.junit.Assert.assertTrue(dateTimeFieldTypeArr4.equals(dateTimeFieldTypeArr4));
    }

    @Test
    public void test1898() throws Throwable {
        java.lang.String string0 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = org.joda.time.format.ISODateTimeFormat.dateElementParser();
        org.joda.time.LocalDate localDate2 = org.joda.time.LocalDate.parse(string0, dateTimeFormatter1);
        localDate2.toString();
        localDate2.hashCode();
        org.junit.Assert.assertTrue(localDate2.equals(localDate2));
    }

    @Test
    public void test1899() throws Throwable {
        org.joda.time.field.DividedDateTimeField dividedDateTimeField0 = null;
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField1 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField0);
        remainderDateTimeField1.toString();
        remainderDateTimeField1.hashCode();
        org.junit.Assert.assertTrue(remainderDateTimeField1.equals(remainderDateTimeField1));
    }

    @Test
    public void test1900() throws Throwable {
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.hours();
        java.lang.String string1 = durationFieldType0.getName();
        string1.toString();
        string1.hashCode();
        org.junit.Assert.assertTrue(string1.equals(string1));
    }

    @Test
    public void test1901() throws Throwable {
        java.lang.Object object0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(object0);
        org.joda.time.DateTime dateTime2 = dateTime1.withSecondOfMinute(1);
        dateTime2.toString();
        dateTime2.hashCode();
        org.junit.Assert.assertTrue(dateTime2.equals(dateTime2));
    }

    @Test
    public void test1902() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.YearMonth yearMonth2 = org.joda.time.YearMonth.now(chronology1);
        java.lang.String string3 = yearMonth2.toString();
        string3.toString();
        string3.hashCode();
        org.junit.Assert.assertTrue(string3.equals(string3));
    }

    @Test
    public void test1903() throws Throwable {
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.dateTimeParser();
        boolean boolean1 = dateTimeFormatter0.isOffsetParsed();
    }

    @Test
    public void test1904() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInstant0, readableInstant1);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfCentury();
        dateTimeField3.toString();
        dateTimeField3.hashCode();
        org.junit.Assert.assertTrue(dateTimeField3.equals(dateTimeField3));
    }

    @Test
    public void test1905() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(chronology1);
        localDate2.toString();
        localDate2.hashCode();
        org.junit.Assert.assertTrue(localDate2.equals(localDate2));
    }

    @Test
    public void test1906() throws Throwable {
        org.joda.time.ReadablePartial readablePartial0 = null;
        org.joda.time.ReadablePartial readablePartial1 = null;
        org.joda.time.Years years2 = org.joda.time.Years.yearsBetween(readablePartial0, readablePartial1);
        years2.toString();
        years2.hashCode();
        org.junit.Assert.assertTrue(years2.equals(years2));
    }

    @Test
    public void test1907() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInstant0, readableInstant1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getChronology(chronology2);
        chronology3.toString();
        chronology3.hashCode();
        org.junit.Assert.assertTrue(chronology3.equals(chronology3));
    }

    @Test
    public void test1908() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInstant0, readableInstant1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getChronology(chronology2);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.minuteOfDay();
        dateTimeField4.toString();
        dateTimeField4.hashCode();
        org.junit.Assert.assertTrue(dateTimeField4.equals(dateTimeField4));
    }

    @Test
    public void test1909() throws Throwable {
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendSecondOfMinute(1);
        dateTimeFormatterBuilder1.toString();
        dateTimeFormatterBuilder1.hashCode();
        org.junit.Assert.assertTrue(dateTimeFormatterBuilder1.equals(dateTimeFormatterBuilder1));
    }

    @Test
    public void test1910() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.Period period2 = new org.joda.time.Period(readableInstant0, readableDuration1);
        period2.toString();
        period2.hashCode();
        org.junit.Assert.assertTrue(period2.equals(period2));
    }

    @Test
    public void test1911() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInstant0, readableInstant1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getChronology(chronology2);
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime(chronology3);
        mutableDateTime4.toString();
        mutableDateTime4.hashCode();
        org.junit.Assert.assertTrue(mutableDateTime4.equals(mutableDateTime4));
    }

    @Test
    public void test1912() throws Throwable {
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Hours hours3 = org.joda.time.Hours.hoursIn(readableInterval2);
        org.joda.time.ReadableInterval readableInterval4 = null;
        org.joda.time.ReadableInterval readableInterval5 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval4);
        org.joda.time.ReadableInterval readableInterval6 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval5);
        org.joda.time.Hours hours7 = org.joda.time.Hours.hoursIn(readableInterval6);
        org.joda.time.Hours hours8 = hours3.plus(hours7);
        hours8.toString();
        hours8.hashCode();
        org.junit.Assert.assertTrue(hours8.equals(hours8));
    }

    @Test
    public void test1913() throws Throwable {
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Seconds seconds3 = org.joda.time.Seconds.secondsIn(readableInterval2);
        org.joda.time.DurationFieldType durationFieldType4 = seconds3.getFieldType();
        durationFieldType4.toString();
        durationFieldType4.hashCode();
        org.junit.Assert.assertTrue(durationFieldType4.equals(durationFieldType4));
    }

    @Test
    public void test1914() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.LocalDate localDate3 = localDate2.withCenturyOfEra(1);
        localDate3.toString();
        localDate3.hashCode();
        org.junit.Assert.assertTrue(localDate3.equals(localDate3));
    }

    @Test
    public void test1915() throws Throwable {
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime(1, 1, 1, 1, 1, 1, 1);
        org.joda.time.DurationFieldType durationFieldType1 = org.joda.time.DurationFieldType.years();
        boolean boolean2 = localDateTime0.isSupported(durationFieldType1);
    }

    @Test
    public void test1916() throws Throwable {
        org.joda.time.MonthDay monthDay0 = new org.joda.time.MonthDay(1, 1);
        int int1 = monthDay0.getMonthOfYear();
    }

    @Test
    public void test1917() throws Throwable {
        org.joda.time.field.DecoratedDurationField isPrecise0 = null;
        boolean boolean1 = isPrecise0.isPrecise();
    }

    @Test
    public void test1918() throws Throwable {
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.timeElementParser();
        dateTimeFormatter0.toString();
        dateTimeFormatter0.hashCode();
        org.junit.Assert.assertTrue(dateTimeFormatter0.equals(dateTimeFormatter0));
    }

    @Test
    public void test1919() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.Interval interval2 = new org.joda.time.Interval(readableInstant0, readablePeriod1);
        org.joda.time.Interval interval3 = interval2.withEndMillis(1);
        interval3.toString();
        interval3.hashCode();
        org.junit.Assert.assertTrue(interval3.equals(interval3));
    }

    @Test
    public void test1920() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.minuteOfDay();
        property3.toString();
        property3.hashCode();
        org.junit.Assert.assertTrue(property3.equals(property3));
    }

    @Test
    public void test1921() throws Throwable {
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.yearOfEra();
        java.lang.Number number1 = null;
        java.lang.Number number2 = null;
        java.lang.Number number3 = null;
        java.lang.String string4 = null;
        org.joda.time.IllegalFieldValueException illegalFieldValueException5 = new org.joda.time.IllegalFieldValueException(dateTimeFieldType0, number1, number2, number3, string4);
        illegalFieldValueException5.toString();
        illegalFieldValueException5.hashCode();
        org.junit.Assert.assertTrue(illegalFieldValueException5.equals(illegalFieldValueException5));
    }

    @Test
    public void test1922() throws Throwable {
        java.lang.String string0 = null;
        org.joda.time.Years years1 = org.joda.time.Years.parseYears(string0);
        org.joda.time.DurationFieldType durationFieldType2 = years1.getFieldType();
        durationFieldType2.toString();
        durationFieldType2.hashCode();
        org.junit.Assert.assertTrue(durationFieldType2.equals(durationFieldType2));
    }

    @Test
    public void test1923() throws Throwable {
        org.joda.time.chrono.EthiopicChronology ethiopicChronology0 = org.joda.time.chrono.EthiopicChronology.getInstanceUTC();
        org.joda.time.Chronology chronology1 = ethiopicChronology0.withUTC();
        chronology1.toString();
        chronology1.hashCode();
        org.junit.Assert.assertTrue(chronology1.equals(chronology1));
    }

    @Test
    public void test1924() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInstant0, readableInstant1);
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime(chronology2);
        localDateTime3.toString();
        localDateTime3.hashCode();
        org.junit.Assert.assertTrue(localDateTime3.equals(localDateTime3));
    }

    @Test
    public void test1925() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(1, chronology1);
        org.joda.time.ReadablePartial readablePartial3 = null;
        org.joda.time.DateTime dateTime4 = dateTime2.withFields(readablePartial3);
        dateTime4.toString();
        dateTime4.hashCode();
        org.junit.Assert.assertTrue(dateTime4.equals(dateTime4));
    }

    @Test
    public void test1926() throws Throwable {
        long long0 = org.joda.time.DateTimeUtils.toJulianDayNumber(1);
    }

    @Test
    public void test1927() throws Throwable {
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        localDateTime0.toString();
        localDateTime0.hashCode();
        org.junit.Assert.assertTrue(localDateTime0.equals(localDateTime0));
    }

    @Test
    public void test1928() throws Throwable {
        org.joda.time.Years years0 = org.joda.time.Years.years(1);
        org.joda.time.Years years1 = years0.minus(1);
        years1.toString();
        years1.hashCode();
        org.junit.Assert.assertTrue(years1.equals(years1));
    }

    @Test
    public void test1929() throws Throwable {
        org.joda.time.PeriodType periodType0 = null;
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(1, 1, periodType0, chronology1);
        mutablePeriod2.setDays(1);
    }

    @Test
    public void test1930() throws Throwable {
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        java.lang.String string1 = null;
        java.lang.String string2 = null;
        java.lang.String[] stringArr3 = null;
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.appendSeparator(string1, string2, stringArr3);
        periodFormatterBuilder4.toString();
        periodFormatterBuilder4.hashCode();
        org.junit.Assert.assertTrue(periodFormatterBuilder4.equals(periodFormatterBuilder4));
    }

    @Test
    public void test1931() throws Throwable {
        java.lang.Object object0 = null;
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(object0, dateTimeZone2);
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeUtils.getZone(dateTimeZone5);
        org.joda.time.DateMidnight dateMidnight7 = localDate3.toDateMidnight(dateTimeZone6);
        dateMidnight7.toString();
        dateMidnight7.hashCode();
        org.junit.Assert.assertTrue(dateMidnight7.equals(dateMidnight7));
    }

    @Test
    public void test1932() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeUtils.getZone(dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight3 = org.joda.time.DateMidnight.now(dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight3.withYear(1);
        dateMidnight4.toString();
        dateMidnight4.hashCode();
        org.junit.Assert.assertTrue(dateMidnight4.equals(dateMidnight4));
    }

    @Test
    public void test1933() throws Throwable {
        java.lang.String string0 = null;
        org.joda.time.Minutes minutes1 = org.joda.time.Minutes.parseMinutes(string0);
        org.joda.time.Minutes minutes2 = minutes1.dividedBy(1);
        minutes2.toString();
        minutes2.hashCode();
        org.junit.Assert.assertTrue(minutes2.equals(minutes2));
    }

    @Test
    public void test1934() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(1, 1, 1, 1, 1, 1, 1, chronology1);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime2.minusMillis(1);
        localDateTime3.toString();
        localDateTime3.hashCode();
        org.junit.Assert.assertTrue(localDateTime3.equals(localDateTime3));
    }

    @Test
    public void test1935() throws Throwable {
        java.lang.Object object0 = null;
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getChronology(chronology1);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(object0, chronology2);
        org.joda.time.LocalDate localDate4 = localDate3.withDayOfYear(1);
        localDate4.toString();
        localDate4.hashCode();
        org.junit.Assert.assertTrue(localDate4.equals(localDate4));
    }

    @Test
    public void test1936() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime(dateTimeZone1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime2.property(dateTimeFieldType3);
        property4.toString();
        property4.hashCode();
        org.junit.Assert.assertTrue(property4.equals(property4));
    }

    @Test
    public void test1937() throws Throwable {
        org.joda.time.DateTimeField getAsShortText0 = null;
        org.joda.time.ReadablePartial readablePartial1 = null;
        java.util.Locale locale2 = null;
        java.lang.String string3 = getAsShortText0.getAsShortText(readablePartial1, locale2);
        string3.toString();
        string3.hashCode();
        org.junit.Assert.assertTrue(string3.equals(string3));
    }

    @Test
    public void test1938() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeUtils.getZone(dateTimeZone1);
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime(1, dateTimeZone2);
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime3.year();
        property4.toString();
        property4.hashCode();
        org.junit.Assert.assertTrue(property4.equals(property4));
    }

    @Test
    public void test1939() throws Throwable {
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.field.UnsupportedDurationField unsupportedDurationField1 = org.joda.time.field.UnsupportedDurationField.getInstance(durationFieldType0);
        long long2 = unsupportedDurationField1.getDifferenceAsLong(1, 1);
    }

    @Test
    public void test1940() throws Throwable {
        java.lang.Object object0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInstant1, readableInstant2);
        org.joda.time.Period period4 = new org.joda.time.Period(object0, chronology3);
        org.joda.time.Period period5 = period4.minusMonths(1);
        period5.toString();
        period5.hashCode();
        org.junit.Assert.assertTrue(period5.equals(period5));
    }

    @Test
    public void test1941() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.days();
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod(readableInstant0, readableInstant1, periodType2);
        org.joda.time.ReadableInterval readableInterval4 = null;
        org.joda.time.ReadableInterval readableInterval5 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval4);
        org.joda.time.ReadableInterval readableInterval6 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval5);
        org.joda.time.ReadableInterval readableInterval7 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval6);
        mutablePeriod3.setPeriod(readableInterval7);
    }

    @Test
    public void test1942() throws Throwable {
        java.lang.Object object0 = null;
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getChronology(chronology1);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(object0, chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        org.joda.time.LocalDate localDate5 = localDate3.withField(dateTimeFieldType4, 1);
        localDate5.toString();
        localDate5.hashCode();
        org.junit.Assert.assertTrue(localDate5.equals(localDate5));
    }

    @Test
    public void test1943() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.MonthDay monthDay2 = org.joda.time.MonthDay.now(chronology1);
        java.lang.String string3 = null;
        java.util.Locale locale4 = null;
        java.lang.String string5 = monthDay2.toString(string3, locale4);
        string5.toString();
        string5.hashCode();
        org.junit.Assert.assertTrue(string5.equals(string5));
    }

    @Test
    public void test1944() throws Throwable {
        java.lang.Object object0 = null;
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.Chronology chronology4 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInstant2, readableInstant3);
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod(object0, periodType1, chronology4);
        mutablePeriod5.setYears(1);
    }

    @Test
    public void test1945() throws Throwable {
        org.joda.time.Instant instant0 = new org.joda.time.Instant(1);
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTimeISO();
        mutableDateTime1.toString();
        mutableDateTime1.hashCode();
        org.junit.Assert.assertTrue(mutableDateTime1.equals(mutableDateTime1));
    }

    @Test
    public void test1946() throws Throwable {
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.time();
        org.joda.time.PeriodType periodType1 = periodType0.withMillisRemoved();
        periodType1.toString();
        periodType1.hashCode();
        org.junit.Assert.assertTrue(periodType1.equals(periodType1));
    }

    @Test
    public void test1947() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(1, chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.secondOfMinute();
        property3.toString();
        property3.hashCode();
        org.junit.Assert.assertTrue(property3.equals(property3));
    }

    @Test
    public void test1948() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInstant0, readableInstant1);
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(1, chronology2);
        org.joda.time.TimeOfDay timeOfDay4 = timeOfDay3.plusMillis(1);
        timeOfDay4.toString();
        timeOfDay4.hashCode();
        org.junit.Assert.assertTrue(timeOfDay4.equals(timeOfDay4));
    }

    @Test
    public void test1949() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeUtils.getZone(dateTimeZone1);
        int int3 = dateTimeZone2.getOffset(1);
    }

    @Test
    public void test1950() throws Throwable {
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Minutes minutes2 = org.joda.time.Minutes.minutesIn(readableInterval1);
        minutes2.toString();
        minutes2.hashCode();
        org.junit.Assert.assertTrue(minutes2.equals(minutes2));
    }

    @Test
    public void test1951() throws Throwable {
        org.joda.time.DateTimeComparator dateTimeComparator0 = org.joda.time.DateTimeComparator.getInstance();
        java.lang.String string1 = dateTimeComparator0.toString();
        string1.toString();
        string1.hashCode();
        org.junit.Assert.assertTrue(string1.equals(string1));
    }

    @Test
    public void test1952() throws Throwable {
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        localDateTime0.toString();
        localDateTime0.hashCode();
        org.junit.Assert.assertTrue(localDateTime0.equals(localDateTime0));
    }

    @Test
    public void test1953() throws Throwable {
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay(1, 1, 1);
        org.joda.time.TimeOfDay timeOfDay1 = timeOfDay0.withMillisOfSecond(1);
        timeOfDay1.toString();
        timeOfDay1.hashCode();
        org.junit.Assert.assertTrue(timeOfDay1.equals(timeOfDay1));
    }

    @Test
    public void test1954() throws Throwable {
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.time();
        org.joda.time.Period period1 = new org.joda.time.Period(1, periodType0);
        org.joda.time.Period period2 = period1.minusSeconds(1);
        period2.toString();
        period2.hashCode();
        org.junit.Assert.assertTrue(period2.equals(period2));
    }

    @Test
    public void test1955() throws Throwable {
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.dateHour();
        dateTimeFormatter0.toString();
        dateTimeFormatter0.hashCode();
        org.junit.Assert.assertTrue(dateTimeFormatter0.equals(dateTimeFormatter0));
    }

    @Test
    public void test1956() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.MonthDay monthDay2 = new org.joda.time.MonthDay(1, 1, chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = monthDay2.getFieldType(1);
        dateTimeFieldType3.toString();
        dateTimeFieldType3.hashCode();
        org.junit.Assert.assertTrue(dateTimeFieldType3.equals(dateTimeFieldType3));
    }

    @Test
    public void test1957() throws Throwable {
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatter periodFormatter1 = org.joda.time.format.ISOPeriodFormat.alternate();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.append(periodFormatter1);
        periodFormatterBuilder2.toString();
        periodFormatterBuilder2.hashCode();
        org.junit.Assert.assertTrue(periodFormatterBuilder2.equals(periodFormatterBuilder2));
    }

    @Test
    public void test1958() throws Throwable {
        org.joda.time.ReadablePeriod readablePeriod0 = null;
        org.joda.time.Weeks weeks1 = org.joda.time.Weeks.standardWeeksIn(readablePeriod0);
        org.joda.time.Weeks weeks2 = weeks1.multipliedBy(1);
        weeks2.toString();
        weeks2.hashCode();
        org.junit.Assert.assertTrue(weeks2.equals(weeks2));
    }

    @Test
    public void test1959() throws Throwable {
        org.joda.time.ReadablePeriod readablePeriod0 = null;
        org.joda.time.Hours hours1 = org.joda.time.Hours.standardHoursIn(readablePeriod0);
        int int2 = hours1.getHours();
    }

    @Test
    public void test1960() throws Throwable {
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.ReadableInterval readableInterval3 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval2);
        org.joda.time.Minutes minutes4 = org.joda.time.Minutes.minutesIn(readableInterval3);
        minutes4.toString();
        minutes4.hashCode();
        org.junit.Assert.assertTrue(minutes4.equals(minutes4));
    }

    @Test
    public void test1961() throws Throwable {
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.years();
        periodType0.toString();
        periodType0.hashCode();
        org.junit.Assert.assertTrue(periodType0.equals(periodType0));
    }

    @Test
    public void test1962() throws Throwable {
        java.lang.String string0 = null;
        org.joda.time.Years years1 = org.joda.time.Years.parseYears(string0);
        java.lang.String string2 = null;
        org.joda.time.Years years3 = org.joda.time.Years.parseYears(string2);
        org.joda.time.Years years4 = years1.minus(years3);
        years4.toString();
        years4.hashCode();
        org.junit.Assert.assertTrue(years4.equals(years4));
    }

    @Test
    public void test1963() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(1, dateTimeZone1);
        org.joda.time.LocalTime localTime3 = localTime2.withHourOfDay(1);
        localTime3.toString();
        localTime3.hashCode();
        org.junit.Assert.assertTrue(localTime3.equals(localTime3));
    }

    @Test
    public void test1964() throws Throwable {
        org.joda.time.ReadablePeriod readablePeriod0 = null;
        org.joda.time.Hours hours1 = org.joda.time.Hours.standardHoursIn(readablePeriod0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Hours hours3 = org.joda.time.Hours.standardHoursIn(readablePeriod2);
        org.joda.time.Hours hours4 = hours1.plus(hours3);
        hours4.toString();
        hours4.hashCode();
        org.junit.Assert.assertTrue(hours4.equals(hours4));
    }

    @Test
    public void test1965() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay(1, 1, 1, chronology1);
        org.joda.time.TimeOfDay timeOfDay3 = timeOfDay2.plusMinutes(1);
        timeOfDay3.toString();
        timeOfDay3.hashCode();
        org.junit.Assert.assertTrue(timeOfDay3.equals(timeOfDay3));
    }

    @Test
    public void test1966() throws Throwable {
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatter periodFormatter1 = org.joda.time.format.PeriodFormat.getDefault();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.append(periodFormatter1);
        periodFormatterBuilder2.toString();
        periodFormatterBuilder2.hashCode();
        org.junit.Assert.assertTrue(periodFormatterBuilder2.equals(periodFormatterBuilder2));
    }

    @Test
    public void test1967() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.ReadableDateTime readableDateTime2 = null;
        org.joda.time.ReadableDateTime readableDateTime3 = null;
        org.joda.time.chrono.LimitChronology limitChronology4 = org.joda.time.chrono.LimitChronology.getInstance(chronology1, readableDateTime2, readableDateTime3);
        long long5 = limitChronology4.getDateTimeMillis(1, 1, 1, 1, 1);
    }

    @Test
    public void test1968() throws Throwable {
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInstant1, readableInstant2);
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(1, periodType0, chronology3);
        mutablePeriod4.setPeriod(1);
    }

    @Test
    public void test1969() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(1, 1, 1, 1, 1, 1, 1, chronology1);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime2.minusHours(1);
        localDateTime3.toString();
        localDateTime3.hashCode();
        org.junit.Assert.assertTrue(localDateTime3.equals(localDateTime3));
    }

    @Test
    public void test1970() throws Throwable {
        org.joda.time.Days days0 = org.joda.time.Days.days(1);
        org.joda.time.Hours hours1 = days0.toStandardHours();
        hours1.toString();
        hours1.hashCode();
        org.junit.Assert.assertTrue(hours1.equals(hours1));
    }

    @Test
    public void test1971() throws Throwable {
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendWeekOfWeekyear(1);
        dateTimeFormatterBuilder1.toString();
        dateTimeFormatterBuilder1.hashCode();
        org.junit.Assert.assertTrue(dateTimeFormatterBuilder1.equals(dateTimeFormatterBuilder1));
    }

    @Test
    public void test1972() throws Throwable {
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Weeks weeks2 = org.joda.time.Weeks.weeksIn(readableInterval1);
        org.joda.time.Weeks weeks3 = weeks2.negated();
        weeks3.toString();
        weeks3.hashCode();
        org.junit.Assert.assertTrue(weeks3.equals(weeks3));
    }

    @Test
    public void test1973() throws Throwable {
        java.lang.String string0 = null;
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.LocalTime localTime4 = org.joda.time.LocalTime.parse(string0, dateTimeFormatter3);
        localTime4.toString();
        localTime4.hashCode();
        org.junit.Assert.assertTrue(localTime4.equals(localTime4));
    }

    @Test
    public void test1974() throws Throwable {
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.months();
        durationFieldType0.toString();
        durationFieldType0.hashCode();
        org.junit.Assert.assertTrue(durationFieldType0.equals(durationFieldType0));
    }

    @Test
    public void test1975() throws Throwable {
        org.joda.time.format.PeriodFormatter periodFormatter0 = org.joda.time.format.PeriodFormat.wordBased();
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.years();
        org.joda.time.format.PeriodFormatter periodFormatter2 = periodFormatter0.withParseType(periodType1);
        periodFormatter2.toString();
        periodFormatter2.hashCode();
        org.junit.Assert.assertTrue(periodFormatter2.equals(periodFormatter2));
    }

    @Test
    public void test1976() throws Throwable {
        java.lang.String string0 = null;
        org.joda.time.Months months1 = org.joda.time.Months.parseMonths(string0);
        org.joda.time.Months months2 = months1.dividedBy(1);
        months2.toString();
        months2.hashCode();
        org.junit.Assert.assertTrue(months2.equals(months2));
    }

    @Test
    public void test1977() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = null;
        org.joda.time.field.SkipUndoDateTimeField skipUndoDateTimeField3 = new org.joda.time.field.SkipUndoDateTimeField(chronology1, dateTimeField2, 1);
        skipUndoDateTimeField3.toString();
        skipUndoDateTimeField3.hashCode();
        org.junit.Assert.assertTrue(skipUndoDateTimeField3.equals(skipUndoDateTimeField3));
    }

    @Test
    public void test1978() throws Throwable {
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        java.lang.Number number1 = null;
        java.lang.String string2 = null;
        org.joda.time.IllegalFieldValueException illegalFieldValueException3 = new org.joda.time.IllegalFieldValueException(dateTimeFieldType0, number1, string2);
        illegalFieldValueException3.toString();
        illegalFieldValueException3.hashCode();
        org.junit.Assert.assertTrue(illegalFieldValueException3.equals(illegalFieldValueException3));
    }

    @Test
    public void test1979() throws Throwable {
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        int int1 = localDate0.getWeekOfWeekyear();
    }

    @Test
    public void test1980() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInstant0, readableInstant1);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.year();
        dateTimeField3.toString();
        dateTimeField3.hashCode();
        org.junit.Assert.assertTrue(dateTimeField3.equals(dateTimeField3));
    }

    @Test
    public void test1981() throws Throwable {
        org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.fromMillisOfDay(1);
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.LocalTime localTime2 = localTime0.plus(readablePeriod1);
        localTime2.toString();
        localTime2.hashCode();
        org.junit.Assert.assertTrue(localTime2.equals(localTime2));
    }

    @Test
    public void test1982() throws Throwable {
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime(1, 1, 1, 1, 1, 1);
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.DateTime dateTime3 = dateTime0.withZoneRetainFields(dateTimeZone2);
        dateTime3.toString();
        dateTime3.hashCode();
        org.junit.Assert.assertTrue(dateTime3.equals(dateTime3));
    }

    @Test
    public void test1983() throws Throwable {
        java.lang.Object object0 = null;
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getChronology(chronology1);
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(object0, chronology2);
        org.joda.time.DurationFieldType durationFieldType4 = org.joda.time.DurationFieldType.weekyears();
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.withFieldAdded(durationFieldType4, 1);
        dateMidnight5.toString();
        dateMidnight5.hashCode();
        org.junit.Assert.assertTrue(dateMidnight5.equals(dateMidnight5));
    }

    @Test
    public void test1984() throws Throwable {
        org.joda.time.YearMonth yearMonth0 = new org.joda.time.YearMonth(1, 1);
        org.joda.time.YearMonth yearMonth1 = yearMonth0.withYear(1);
        yearMonth1.toString();
        yearMonth1.hashCode();
        org.junit.Assert.assertTrue(yearMonth1.equals(yearMonth1));
    }

    @Test
    public void test1985() throws Throwable {
        java.util.Date date0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = org.joda.time.YearMonthDay.fromDateFields(date0);
        yearMonthDay1.toString();
        yearMonthDay1.hashCode();
        org.junit.Assert.assertTrue(yearMonthDay1.equals(yearMonthDay1));
    }

    @Test
    public void test1986() throws Throwable {
        org.joda.time.field.DividedDateTimeField roundFloor0 = null;
        long long1 = roundFloor0.roundFloor(1);
    }

    @Test
    public void test1987() throws Throwable {
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.hourMinute();
        java.lang.Appendable appendable1 = null;
        org.joda.time.ReadablePartial readablePartial2 = null;
        dateTimeFormatter0.printTo(appendable1, readablePartial2);
    }

    @Test
    public void test1988() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(dateTimeZone1);
        int int3 = localDateTime2.getSecondOfMinute();
    }

    @Test
    public void test1989() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.YearMonth yearMonth2 = org.joda.time.YearMonth.now(chronology1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArr3 = yearMonth2.getFieldTypes();
        dateTimeFieldTypeArr3.toString();
        dateTimeFieldTypeArr3.hashCode();
        org.junit.Assert.assertTrue(dateTimeFieldTypeArr3.equals(dateTimeFieldTypeArr3));
    }

    @Test
    public void test1990() throws Throwable {
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        mutableInterval0.setInterval(readableInstant1, readableInstant2);
    }

    @Test
    public void test1991() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        partial2.toString();
        partial2.hashCode();
        org.junit.Assert.assertTrue(partial2.equals(partial2));
    }

    @Test
    public void test1992() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        boolean boolean2 = dateTimeZone1.isStandardOffset(1);
    }

    @Test
    public void test1993() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.DateMidnight dateMidnight3 = localDate2.toDateMidnight();
        dateMidnight3.toString();
        dateMidnight3.hashCode();
        org.junit.Assert.assertTrue(dateMidnight3.equals(dateMidnight3));
    }

    @Test
    public void test1994() throws Throwable {
        org.joda.time.Duration duration0 = org.joda.time.Duration.standardHours(1);
        org.joda.time.Hours hours1 = duration0.toStandardHours();
        hours1.toString();
        hours1.hashCode();
        org.junit.Assert.assertTrue(hours1.equals(hours1));
    }

    @Test
    public void test1995() throws Throwable {
        java.lang.Object object0 = null;
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(object0, dateTimeZone2);
        org.joda.time.LocalDate localDate4 = localDate3.plusMonths(1);
        localDate4.toString();
        localDate4.hashCode();
        org.junit.Assert.assertTrue(localDate4.equals(localDate4));
    }

    @Test
    public void test1996() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeUtils.getZone(dateTimeZone1);
        org.joda.time.LocalDate localDate3 = org.joda.time.LocalDate.now(dateTimeZone2);
        org.joda.time.LocalDate localDate4 = localDate3.minusDays(1);
        localDate4.toString();
        localDate4.hashCode();
        org.junit.Assert.assertTrue(localDate4.equals(localDate4));
    }

    @Test
    public void test1997() throws Throwable {
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.years();
        org.joda.time.field.PreciseDurationField preciseDurationField1 = new org.joda.time.field.PreciseDurationField(durationFieldType0, 1);
        java.lang.Object object2 = null;
        boolean boolean3 = preciseDurationField1.equals(object2);
    }

    @Test
    public void test1998() throws Throwable {
        java.lang.String string0 = null;
        java.util.Locale locale1 = null;
        java.lang.String string2 = org.joda.time.format.DateTimeFormat.patternForStyle(string0, locale1);
        string2.toString();
        string2.hashCode();
        org.junit.Assert.assertTrue(string2.equals(string2));
    }

    @Test
    public void test1999() throws Throwable {
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime(1, 1, 1, 1, 1, 1);
        org.joda.time.DateTime dateTime1 = dateTime0.plusMinutes(1);
        dateTime1.toString();
        dateTime1.hashCode();
        org.junit.Assert.assertTrue(dateTime1.equals(dateTime1));
    }

    @Test
    public void test2000() throws Throwable {
        org.joda.time.MutablePeriod mutablePeriod0 = new org.joda.time.MutablePeriod(1, 1, 1, 1);
        mutablePeriod0.setSeconds(1);
    }

    @Test
    public void test2001() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.centuryOfEra();
        dateTimeField2.toString();
        dateTimeField2.hashCode();
        org.junit.Assert.assertTrue(dateTimeField2.equals(dateTimeField2));
    }

    @Test
    public void test2002() throws Throwable {
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.years();
        org.joda.time.field.PreciseDurationField preciseDurationField1 = new org.joda.time.field.PreciseDurationField(durationFieldType0, 1);
        long long2 = preciseDurationField1.getDifferenceAsLong(1, 1);
    }

    @Test
    public void test2003() throws Throwable {
        org.joda.time.field.ZeroIsMaxDateTimeField getLeapAmount0 = null;
        int int1 = getLeapAmount0.getLeapAmount(1);
    }

    @Test
    public void test2004() throws Throwable {
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType1 = periodType0.withWeeksRemoved();
        periodType1.toString();
        periodType1.hashCode();
        org.junit.Assert.assertTrue(periodType1.equals(periodType1));
    }

    @Test
    public void test2005() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(1, 1, 1, 1, chronology1);
        org.joda.time.LocalTime.Property property3 = localTime2.millisOfDay();
        property3.toString();
        property3.hashCode();
        org.junit.Assert.assertTrue(property3.equals(property3));
    }

    @Test
    public void test2006() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInstant0, readableInstant1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getChronology(chronology2);
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime(chronology3);
        mutableDateTime4.setMillis(1);
    }

    @Test
    public void test2007() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.ISOChronology iSOChronology2 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        java.util.TimeZone timeZone3 = null;
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeUtils.getZone(dateTimeZone4);
        org.joda.time.Chronology chronology6 = iSOChronology2.withZone(dateTimeZone5);
        chronology6.toString();
        chronology6.hashCode();
        org.junit.Assert.assertTrue(chronology6.equals(chronology6));
    }

    @Test
    public void test2008() throws Throwable {
        org.joda.time.DateTimeUtils.setCurrentMillisOffset(1);
    }

    @Test
    public void test2009() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInstant0, readableInstant1);
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(chronology2);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight3.plusMonths(1);
        dateMidnight4.toString();
        dateMidnight4.hashCode();
        org.junit.Assert.assertTrue(dateMidnight4.equals(dateMidnight4));
    }

    @Test
    public void test2010() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInstant0, readableInstant1);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(1, 1, 1, 1, 1, chronology2);
        org.joda.time.DateTime dateTime4 = dateTime3.withYearOfCentury(1);
        dateTime4.toString();
        dateTime4.hashCode();
        org.junit.Assert.assertTrue(dateTime4.equals(dateTime4));
    }

    @Test
    public void test2011() throws Throwable {
        org.joda.time.field.ScaledDurationField getMillis0 = null;
        long long1 = getMillis0.getMillis(1, 1);
    }

    @Test
    public void test2012() throws Throwable {
        org.joda.time.MutableDateTime.Property roundCeiling0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = roundCeiling0.roundCeiling();
        mutableDateTime1.toString();
        mutableDateTime1.hashCode();
        org.junit.Assert.assertTrue(mutableDateTime1.equals(mutableDateTime1));
    }

    @Test
    public void test2013() throws Throwable {
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.basicWeekDate();
        java.lang.Appendable appendable1 = null;
        dateTimeFormatter0.printTo(appendable1, 1);
    }

    @Test
    public void test2014() throws Throwable {
        org.joda.time.DateTimeField dateTimeField0 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField2 = new org.joda.time.field.DividedDateTimeField(dateTimeField0, dateTimeFieldType1, 1);
        dividedDateTimeField2.toString();
        dividedDateTimeField2.hashCode();
        org.junit.Assert.assertTrue(dividedDateTimeField2.equals(dividedDateTimeField2));
    }

    @Test
    public void test2015() throws Throwable {
        java.lang.String[] stringArr0 = null;
        org.joda.time.tz.ZoneInfoCompiler.main(stringArr0);
    }

    @Test
    public void test2016() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInstant0, readableInstant1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getChronology(chronology2);
        org.joda.time.DateMidnight dateMidnight4 = org.joda.time.DateMidnight.now(chronology3);
        dateMidnight4.toString();
        dateMidnight4.hashCode();
        org.junit.Assert.assertTrue(dateMidnight4.equals(dateMidnight4));
    }

    @Test
    public void test2017() throws Throwable {
        java.lang.Object object0 = null;
        org.joda.time.Instant instant1 = new org.joda.time.Instant(object0);
        instant1.toString();
        instant1.hashCode();
        org.junit.Assert.assertTrue(instant1.equals(instant1));
    }

    @Test
    public void test2018() throws Throwable {
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval(1, 1);
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getChronology(chronology1);
        mutableInterval0.setChronology(chronology2);
    }

    @Test
    public void test2019() throws Throwable {
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Weeks weeks3 = org.joda.time.Weeks.weeksIn(readableInterval2);
        org.joda.time.Hours hours4 = weeks3.toStandardHours();
        hours4.toString();
        hours4.hashCode();
        org.junit.Assert.assertTrue(hours4.equals(hours4));
    }

    @Test
    public void test2020() throws Throwable {
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(1, 1);
        dateTimeZone0.toString();
        dateTimeZone0.hashCode();
        org.junit.Assert.assertTrue(dateTimeZone0.equals(dateTimeZone0));
    }

    @Test
    public void test2021() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeUtils.getZone(dateTimeZone1);
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone2, 1, 1);
        org.joda.time.Instant instant4 = gJChronology3.getGregorianCutover();
        instant4.toString();
        instant4.hashCode();
        org.junit.Assert.assertTrue(instant4.equals(instant4));
    }

    @Test
    public void test2022() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.hourOfDay();
        property3.toString();
        property3.hashCode();
        org.junit.Assert.assertTrue(property3.equals(property3));
    }

    @Test
    public void test2023() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay(1, 1, 1, chronology1);
        yearMonthDay2.toString();
        yearMonthDay2.hashCode();
        org.junit.Assert.assertTrue(yearMonthDay2.equals(yearMonthDay2));
    }

    @Test
    public void test2024() throws Throwable {
        org.joda.time.DateTimeField dateTimeField0 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.dayOfWeek();
        org.joda.time.field.OffsetDateTimeField offsetDateTimeField2 = new org.joda.time.field.OffsetDateTimeField(dateTimeField0, dateTimeFieldType1, 1, 1, 1);
        offsetDateTimeField2.toString();
        offsetDateTimeField2.hashCode();
        org.junit.Assert.assertTrue(offsetDateTimeField2.equals(offsetDateTimeField2));
    }

    @Test
    public void test2025() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.Partial partial4 = partial2.minus(readablePeriod3);
        partial4.toString();
        partial4.hashCode();
        org.junit.Assert.assertTrue(partial4.equals(partial4));
    }

    @Test
    public void test2026() throws Throwable {
        java.lang.String string0 = null;
        org.joda.time.Years years1 = org.joda.time.Years.parseYears(string0);
        org.joda.time.Years years2 = years1.plus(1);
        years2.toString();
        years2.hashCode();
        org.junit.Assert.assertTrue(years2.equals(years2));
    }

    @Test
    public void test2027() throws Throwable {
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = org.joda.time.format.ISODateTimeFormat.dateHourMinuteSecondFraction();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder0.append(dateTimeFormatter1);
        dateTimeFormatterBuilder2.toString();
        dateTimeFormatterBuilder2.hashCode();
        org.junit.Assert.assertTrue(dateTimeFormatterBuilder2.equals(dateTimeFormatterBuilder2));
    }

    @Test
    public void test2028() throws Throwable {
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.weekOfWeekyear();
        property1.toString();
        property1.hashCode();
        org.junit.Assert.assertTrue(property1.equals(property1));
    }

    @Test
    public void test2029() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String string2 = dateTimeZone1.getNameKey(1);
        string2.toString();
        string2.hashCode();
        org.junit.Assert.assertTrue(string2.equals(string2));
    }

    @Test
    public void test2030() throws Throwable {
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(1, 1, 1, 1, 1, 1, dateTimeZone0);
        org.joda.time.DateTime dateTime2 = dateTime1.withWeekOfWeekyear(1);
        dateTime2.toString();
        dateTime2.hashCode();
        org.junit.Assert.assertTrue(dateTime2.equals(dateTime2));
    }

    @Test
    public void test2031() throws Throwable {
        java.lang.Object object0 = null;
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getChronology(chronology2);
        org.joda.time.Period period4 = new org.joda.time.Period(object0, periodType1, chronology3);
        period4.toString();
        period4.hashCode();
        org.junit.Assert.assertTrue(period4.equals(period4));
    }

    @Test
    public void test2032() throws Throwable {
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime(1, 1, 1, 1, 1, 1);
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInstant1, readableInstant2);
        org.joda.time.Chronology chronology4 = org.joda.time.DateTimeUtils.getChronology(chronology3);
        org.joda.time.DateTime dateTime5 = dateTime0.toDateTime(chronology4);
        dateTime5.toString();
        dateTime5.hashCode();
        org.junit.Assert.assertTrue(dateTime5.equals(dateTime5));
    }

    @Test
    public void test2033() throws Throwable {
        org.joda.time.field.ZeroIsMaxDateTimeField getMaximumValue0 = null;
        org.joda.time.ReadablePartial readablePartial1 = null;
        int int2 = getMaximumValue0.getMaximumValue(readablePartial1);
    }

    @Test
    public void test2034() throws Throwable {
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendTimeZoneId();
        dateTimeFormatterBuilder1.toString();
        dateTimeFormatterBuilder1.hashCode();
        org.junit.Assert.assertTrue(dateTimeFormatterBuilder1.equals(dateTimeFormatterBuilder1));
    }

    @Test
    public void test2035() throws Throwable {
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Weeks weeks3 = org.joda.time.Weeks.weeksIn(readableInterval2);
        int int4 = weeks3.getWeeks();
    }

    @Test
    public void test2036() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(dateTimeZone1);
        org.joda.time.DateTime dateTime3 = dateTime2.plusSeconds(1);
        dateTime3.toString();
        dateTime3.hashCode();
        org.junit.Assert.assertTrue(dateTime3.equals(dateTime3));
    }

    @Test
    public void test2037() throws Throwable {
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.yearWeekDayTime();
        periodType0.toString();
        periodType0.hashCode();
        org.junit.Assert.assertTrue(periodType0.equals(periodType0));
    }

    @Test
    public void test2038() throws Throwable {
        org.joda.time.ReadablePeriod readablePeriod0 = null;
        org.joda.time.Days days1 = org.joda.time.Days.standardDaysIn(readablePeriod0);
        org.joda.time.Days days2 = days1.minus(1);
        days2.toString();
        days2.hashCode();
        org.junit.Assert.assertTrue(days2.equals(days2));
    }

    @Test
    public void test2039() throws Throwable {
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.DateTime dateTime1 = instant0.toDateTime();
        dateTime1.toString();
        dateTime1.hashCode();
        org.junit.Assert.assertTrue(dateTime1.equals(dateTime1));
    }

    @Test
    public void test2040() throws Throwable {
        java.lang.String string0 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = org.joda.time.format.ISODateTimeFormat.dateHourMinute();
        org.joda.time.DateMidnight dateMidnight2 = org.joda.time.DateMidnight.parse(string0, dateTimeFormatter1);
        dateMidnight2.toString();
        dateMidnight2.hashCode();
        org.junit.Assert.assertTrue(dateMidnight2.equals(dateMidnight2));
    }

    @Test
    public void test2041() throws Throwable {
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfYear();
        dateTimeFieldType0.toString();
        dateTimeFieldType0.hashCode();
        org.junit.Assert.assertTrue(dateTimeFieldType0.equals(dateTimeFieldType0));
    }

    @Test
    public void test2042() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInstant0, readableInstant1);
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth(chronology2);
        org.joda.time.Interval interval4 = yearMonth3.toInterval();
        interval4.toString();
        interval4.hashCode();
        org.junit.Assert.assertTrue(interval4.equals(interval4));
    }

    @Test
    public void test2043() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        java.util.Locale locale2 = null;
        java.lang.Integer integer3 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket4 = new org.joda.time.format.DateTimeParserBucket(1, chronology1, locale2, integer3, 1);
        dateTimeParserBucket4.toString();
        dateTimeParserBucket4.hashCode();
        org.junit.Assert.assertTrue(dateTimeParserBucket4.equals(dateTimeParserBucket4));
    }

    @Test
    public void test2044() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeUtils.getZone(dateTimeZone1);
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth(dateTimeZone2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        property4.toString();
        property4.hashCode();
        org.junit.Assert.assertTrue(property4.equals(property4));
    }

    @Test
    public void test2045() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.YearMonth yearMonth2 = new org.joda.time.YearMonth(1, chronology1);
        org.joda.time.YearMonth yearMonth3 = yearMonth2.plusMonths(1);
        yearMonth3.toString();
        yearMonth3.hashCode();
        org.junit.Assert.assertTrue(yearMonth3.equals(yearMonth3));
    }

    @Test
    public void test2046() throws Throwable {
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.minutes();
        durationFieldType0.toString();
        durationFieldType0.hashCode();
        org.junit.Assert.assertTrue(durationFieldType0.equals(durationFieldType0));
    }

    @Test
    public void test2047() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeUtils.getZone(dateTimeZone1);
        org.joda.time.LocalDate localDate3 = org.joda.time.LocalDate.now(dateTimeZone2);
        org.joda.time.LocalDate.Property property4 = localDate3.dayOfYear();
        property4.toString();
        property4.hashCode();
        org.junit.Assert.assertTrue(property4.equals(property4));
    }

    @Test
    public void test2048() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(1, 1, 1, 1, 1, 1, 1, chronology1);
        dateTime2.toString();
        dateTime2.hashCode();
        org.junit.Assert.assertTrue(dateTime2.equals(dateTime2));
    }

    @Test
    public void test2049() throws Throwable {
        java.lang.Object object0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(object0);
        mutableDateTime1.setWeekOfWeekyear(1);
    }

    @Test
    public void test2050() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.ReadableDateTime readableDateTime2 = null;
        org.joda.time.ReadableDateTime readableDateTime3 = null;
        org.joda.time.chrono.LimitChronology limitChronology4 = org.joda.time.chrono.LimitChronology.getInstance(chronology1, readableDateTime2, readableDateTime3);
        long long5 = limitChronology4.getDateTimeMillis(1, 1, 1, 1);
    }

    @Test
    public void test2051() throws Throwable {
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getChronology(chronology1);
        org.joda.time.Partial partial3 = new org.joda.time.Partial(dateTimeFieldType0, 1, chronology2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.Chronology chronology5 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant4);
        org.joda.time.Partial partial6 = partial3.withChronologyRetainFields(chronology5);
        partial6.toString();
        partial6.hashCode();
        org.junit.Assert.assertTrue(partial6.equals(partial6));
    }

    @Test
    public void test2052() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeUtils.getZone(dateTimeZone1);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(1, 1, 1, 1, 1, dateTimeZone2);
        org.joda.time.DateTime dateTime4 = dateTime3.plus(1);
        dateTime4.toString();
        dateTime4.hashCode();
        org.junit.Assert.assertTrue(dateTime4.equals(dateTime4));
    }

    @Test
    public void test2053() throws Throwable {
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime(1, 1, 1, 1, 1, 1, 1);
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
    }

    @Test
    public void test2054() throws Throwable {
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.minutes(1);
        org.joda.time.Minutes minutes1 = minutes0.plus(1);
        minutes1.toString();
        minutes1.hashCode();
        org.junit.Assert.assertTrue(minutes1.equals(minutes1));
    }

    @Test
    public void test2055() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeUtils.getZone(dateTimeZone1);
        java.lang.String string3 = dateTimeZone2.getID();
        string3.toString();
        string3.hashCode();
        org.junit.Assert.assertTrue(string3.equals(string3));
    }

    @Test
    public void test2056() throws Throwable {
        org.joda.time.ReadablePeriod readablePeriod0 = null;
        org.joda.time.Weeks weeks1 = org.joda.time.Weeks.standardWeeksIn(readablePeriod0);
        org.joda.time.ReadableInterval readableInterval2 = null;
        org.joda.time.ReadableInterval readableInterval3 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval2);
        org.joda.time.Weeks weeks4 = org.joda.time.Weeks.weeksIn(readableInterval3);
        boolean boolean5 = weeks1.isGreaterThan(weeks4);
    }

    @Test
    public void test2057() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(1, dateTimeZone1);
        org.joda.time.LocalTime.Property property3 = localTime2.millisOfDay();
        property3.toString();
        property3.hashCode();
        org.junit.Assert.assertTrue(property3.equals(property3));
    }

    @Test
    public void test2058() throws Throwable {
        org.joda.time.DateTimeField getMaximumValue0 = null;
        int int1 = getMaximumValue0.getMaximumValue();
    }

    @Test
    public void test2059() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay(1, 1, 1, chronology1);
        org.joda.time.LocalDate localDate3 = yearMonthDay2.toLocalDate();
        localDate3.toString();
        localDate3.hashCode();
        org.junit.Assert.assertTrue(localDate3.equals(localDate3));
    }

    @Test
    public void test2060() throws Throwable {
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getChronology(chronology1);
        org.joda.time.Partial partial3 = new org.joda.time.Partial(dateTimeFieldType0, 1, chronology2);
        int int4 = partial3.size();
    }

    @Test
    public void test2061() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate2 = localDate1.withMonthOfYear(1);
        localDate2.toString();
        localDate2.hashCode();
        org.junit.Assert.assertTrue(localDate2.equals(localDate2));
    }

    @Test
    public void test2062() throws Throwable {
        org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder0 = new org.joda.time.tz.DateTimeZoneBuilder();
        java.lang.String string1 = null;
        java.io.OutputStream outputStream2 = null;
        dateTimeZoneBuilder0.writeTo(string1, outputStream2);
    }

    @Test
    public void test2063() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.LocalDate localDate3 = localDate2.withDayOfWeek(1);
        localDate3.toString();
        localDate3.hashCode();
        org.junit.Assert.assertTrue(localDate3.equals(localDate3));
    }

    @Test
    public void test2064() throws Throwable {
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(1, dateTimeZone0);
        org.joda.time.DateTime dateTime2 = localTime1.toDateTimeToday();
        dateTime2.toString();
        dateTime2.hashCode();
        org.junit.Assert.assertTrue(dateTime2.equals(dateTime2));
    }

    @Test
    public void test2065() throws Throwable {
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DurationFieldType durationFieldType1 = org.joda.time.DurationFieldType.millis();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.withFieldAdded(durationFieldType1, 1);
        dateMidnight2.toString();
        dateMidnight2.hashCode();
        org.junit.Assert.assertTrue(dateMidnight2.equals(dateMidnight2));
    }

    @Test
    public void test2066() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime(chronology1);
        mutableDateTime2.setMinuteOfHour(1);
    }

    @Test
    public void test2067() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.LocalDate localDate2 = org.joda.time.LocalDate.now(chronology1);
        org.joda.time.ReadablePartial readablePartial3 = null;
        int int4 = localDate2.compareTo(readablePartial3);
    }

    @Test
    public void test2068() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(1, 1, 1, 1, chronology1);
        org.joda.time.LocalTime localTime3 = localTime2.minusHours(1);
        localTime3.toString();
        localTime3.hashCode();
        org.junit.Assert.assertTrue(localTime3.equals(localTime3));
    }

    @Test
    public void test2069() throws Throwable {
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.YearMonthDay yearMonthDay1 = dateMidnight0.toYearMonthDay();
        yearMonthDay1.toString();
        yearMonthDay1.hashCode();
        org.junit.Assert.assertTrue(yearMonthDay1.equals(yearMonthDay1));
    }

    @Test
    public void test2070() throws Throwable {
        org.joda.time.field.UnsupportedDateTimeField getMaximumTextLength0 = null;
        java.util.Locale locale1 = null;
        int int2 = getMaximumTextLength0.getMaximumTextLength(locale1);
    }

    @Test
    public void test2071() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay(dateTimeZone1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.TimeOfDay timeOfDay4 = timeOfDay2.minus(readablePeriod3);
        timeOfDay4.toString();
        timeOfDay4.hashCode();
        org.junit.Assert.assertTrue(timeOfDay4.equals(timeOfDay4));
    }

    @Test
    public void test2072() throws Throwable {
        org.joda.time.field.DelegatedDateTimeField getDurationField0 = null;
        org.joda.time.DurationField durationField1 = getDurationField0.getDurationField();
        durationField1.toString();
        durationField1.hashCode();
        org.junit.Assert.assertTrue(durationField1.equals(durationField1));
    }

    @Test
    public void test2073() throws Throwable {
        java.lang.Object object0 = null;
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay(object0);
        monthDay1.toString();
        monthDay1.hashCode();
        org.junit.Assert.assertTrue(monthDay1.equals(monthDay1));
    }

    @Test
    public void test2074() throws Throwable {
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.yearWeekDayTime();
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod(1, periodType0);
        mutablePeriod1.toString();
        mutablePeriod1.hashCode();
        org.junit.Assert.assertTrue(mutablePeriod1.equals(mutablePeriod1));
    }

    @Test
    public void test2075() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.clockhourOfDay();
        dateTimeField2.toString();
        dateTimeField2.hashCode();
        org.junit.Assert.assertTrue(dateTimeField2.equals(dateTimeField2));
    }

    @Test
    public void test2076() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(1, 1, 1, 1, 1, 1, 1, chronology1);
        int int3 = localDateTime2.getMinuteOfHour();
    }

    @Test
    public void test2077() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.MonthDay monthDay2 = new org.joda.time.MonthDay(1, 1, chronology1);
        org.joda.time.MonthDay monthDay3 = monthDay2.withDayOfMonth(1);
        monthDay3.toString();
        monthDay3.hashCode();
        org.junit.Assert.assertTrue(monthDay3.equals(monthDay3));
    }

    @Test
    public void test2078() throws Throwable {
        org.joda.time.field.UnsupportedDateTimeField getDurationField0 = null;
        org.joda.time.DurationField durationField1 = getDurationField0.getDurationField();
        durationField1.toString();
        durationField1.hashCode();
        org.junit.Assert.assertTrue(durationField1.equals(durationField1));
    }

    @Test
    public void test2079() throws Throwable {
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        int int1 = yearMonthDay0.size();
    }

    @Test
    public void test2080() throws Throwable {
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime(1, 1, 1, 1);
        localTime0.toString();
        localTime0.hashCode();
        org.junit.Assert.assertTrue(localTime0.equals(localTime0));
    }

    @Test
    public void test2081() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.days();
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod(readableInstant0, readableInstant1, periodType2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        mutablePeriod3.add(readableDuration4);
    }

    @Test
    public void test2082() throws Throwable {
        java.lang.Object object0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(object0);
        java.lang.Object object2 = null;
        boolean boolean3 = localDate1.equals(object2);
    }

    @Test
    public void test2083() throws Throwable {
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeUtils.getZone(dateTimeZone3);
        org.joda.time.Interval interval5 = yearMonthDay1.toInterval(dateTimeZone4);
        interval5.toString();
        interval5.hashCode();
        org.junit.Assert.assertTrue(interval5.equals(interval5));
    }

    @Test
    public void test2084() throws Throwable {
        java.lang.String string0 = null;
        java.lang.String string1 = null;
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone2 = new org.joda.time.tz.FixedDateTimeZone(string0, string1, 1, 1);
        fixedDateTimeZone2.toString();
        fixedDateTimeZone2.hashCode();
        org.junit.Assert.assertTrue(fixedDateTimeZone2.equals(fixedDateTimeZone2));
    }

    @Test
    public void test2085() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInstant0, readableInstant1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getChronology(chronology2);
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime(chronology3);
        org.joda.time.ReadableDuration readableDuration5 = null;
        mutableDateTime4.add(readableDuration5, 1);
    }

    @Test
    public void test2086() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.MutableDateTime mutableDateTime2 = org.joda.time.MutableDateTime.now(dateTimeZone1);
        mutableDateTime2.addMonths(1);
    }

    @Test
    public void test2087() throws Throwable {
        java.util.Calendar calendar0 = null;
        org.joda.time.TimeOfDay timeOfDay1 = org.joda.time.TimeOfDay.fromCalendarFields(calendar0);
        timeOfDay1.toString();
        timeOfDay1.hashCode();
        org.junit.Assert.assertTrue(timeOfDay1.equals(timeOfDay1));
    }

    @Test
    public void test2088() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInstant0, readableInstant1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getChronology(chronology2);
        org.joda.time.DurationField durationField4 = chronology3.days();
        durationField4.toString();
        durationField4.hashCode();
        org.junit.Assert.assertTrue(durationField4.equals(durationField4));
    }

    @Test
    public void test2089() throws Throwable {
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.minutes(1);
        org.joda.time.Minutes minutes1 = minutes0.minus(1);
        minutes1.toString();
        minutes1.hashCode();
        org.junit.Assert.assertTrue(minutes1.equals(minutes1));
    }

    @Test
    public void test2090() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(1, chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfMonth();
        property3.toString();
        property3.hashCode();
        org.junit.Assert.assertTrue(property3.equals(property3));
    }

    @Test
    public void test2091() throws Throwable {
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.years();
        org.joda.time.field.PreciseDurationField preciseDurationField1 = new org.joda.time.field.PreciseDurationField(durationFieldType0, 1);
        long long2 = preciseDurationField1.getValueAsLong(1, 1);
    }

    @Test
    public void test2092() throws Throwable {
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime(1, 1, 1, 1, 1, 1, 1);
        int int1 = localDateTime0.getWeekyear();
    }

    @Test
    public void test2093() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInstant0, readableInstant1);
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth(1, 1, chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.YearMonth yearMonth5 = yearMonth3.withField(dateTimeFieldType4, 1);
        yearMonth5.toString();
        yearMonth5.hashCode();
        org.junit.Assert.assertTrue(yearMonth5.equals(yearMonth5));
    }

    @Test
    public void test2094() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.now(chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalTime.Property property4 = localTime2.property(dateTimeFieldType3);
        property4.toString();
        property4.hashCode();
        org.junit.Assert.assertTrue(property4.equals(property4));
    }

    @Test
    public void test2095() throws Throwable {
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.forOffsetMillis(1);
        dateTimeZone0.toString();
        dateTimeZone0.hashCode();
        org.junit.Assert.assertTrue(dateTimeZone0.equals(dateTimeZone0));
    }

    @Test
    public void test2096() throws Throwable {
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfHour();
        java.lang.Number number1 = null;
        java.lang.Number number2 = null;
        java.lang.Number number3 = null;
        java.lang.String string4 = null;
        org.joda.time.IllegalFieldValueException illegalFieldValueException5 = new org.joda.time.IllegalFieldValueException(dateTimeFieldType0, number1, number2, number3, string4);
        java.lang.Number number6 = illegalFieldValueException5.getLowerBound();
        number6.toString();
        number6.hashCode();
        org.junit.Assert.assertTrue(number6.equals(number6));
    }

    @Test
    public void test2097() throws Throwable {
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.dateHourMinuteSecondMillis();
        dateTimeFormatter0.toString();
        dateTimeFormatter0.hashCode();
        org.junit.Assert.assertTrue(dateTimeFormatter0.equals(dateTimeFormatter0));
    }

    @Test
    public void test2098() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay(chronology1);
        timeOfDay2.toString();
        timeOfDay2.hashCode();
        org.junit.Assert.assertTrue(timeOfDay2.equals(timeOfDay2));
    }

    @Test
    public void test2099() throws Throwable {
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime(1, 1, 1, 1, 1, 1, 1);
        org.joda.time.LocalDateTime localDateTime1 = localDateTime0.minusYears(1);
        localDateTime1.toString();
        localDateTime1.hashCode();
        org.junit.Assert.assertTrue(localDateTime1.equals(localDateTime1));
    }

    @Test
    public void test2100() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.minutes();
        org.joda.time.Period period3 = new org.joda.time.Period(readableInstant0, readableInstant1, periodType2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Period period5 = period3.withFields(readablePeriod4);
        period5.toString();
        period5.hashCode();
        org.junit.Assert.assertTrue(period5.equals(period5));
    }

    @Test
    public void test2101() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableInstant0, readablePeriod1);
        mutableInterval2.toString();
        mutableInterval2.hashCode();
        org.junit.Assert.assertTrue(mutableInterval2.equals(mutableInterval2));
    }

    @Test
    public void test2102() throws Throwable {
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.forOffsetMillis(1);
        int int1 = dateTimeZone0.getStandardOffset(1);
    }

    @Test
    public void test2103() throws Throwable {
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.hourMinute();
        org.joda.time.Chronology chronology1 = dateTimeFormatter0.getChronology();
        chronology1.toString();
        chronology1.hashCode();
        org.junit.Assert.assertTrue(chronology1.equals(chronology1));
    }

    @Test
    public void test2104() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInstant0, readableInstant1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getChronology(chronology2);
        java.util.Locale locale4 = null;
        java.lang.Integer integer5 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket(1, chronology3, locale4, integer5, 1);
        dateTimeParserBucket6.toString();
        dateTimeParserBucket6.hashCode();
        org.junit.Assert.assertTrue(dateTimeParserBucket6.equals(dateTimeParserBucket6));
    }

    @Test
    public void test2105() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.ReadableDateTime readableDateTime2 = null;
        org.joda.time.ReadableDateTime readableDateTime3 = null;
        org.joda.time.chrono.LimitChronology limitChronology4 = org.joda.time.chrono.LimitChronology.getInstance(chronology1, readableDateTime2, readableDateTime3);
        org.joda.time.DateTime dateTime5 = limitChronology4.getUpperLimit();
        dateTime5.toString();
        dateTime5.hashCode();
        org.junit.Assert.assertTrue(dateTime5.equals(dateTime5));
    }

    @Test
    public void test2106() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInstant0, readableInstant1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getChronology(chronology2);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.millisOfDay();
        dateTimeField4.toString();
        dateTimeField4.hashCode();
        org.junit.Assert.assertTrue(dateTimeField4.equals(dateTimeField4));
    }

    @Test
    public void test2107() throws Throwable {
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        dateTimeFieldType0.toString();
        dateTimeFieldType0.hashCode();
        org.junit.Assert.assertTrue(dateTimeFieldType0.equals(dateTimeFieldType0));
    }

    @Test
    public void test2108() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.LocalDate localDate3 = localDate2.withEra(1);
        localDate3.toString();
        localDate3.hashCode();
        org.junit.Assert.assertTrue(localDate3.equals(localDate3));
    }

    @Test
    public void test2109() throws Throwable {
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        int int1 = localDateTime0.getDayOfYear();
    }

    @Test
    public void test2110() throws Throwable {
        org.joda.time.chrono.IslamicChronology islamicChronology0 = org.joda.time.chrono.IslamicChronology.getInstance();
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(1, 1);
        org.joda.time.Chronology chronology2 = islamicChronology0.withZone(dateTimeZone1);
        chronology2.toString();
        chronology2.hashCode();
        org.junit.Assert.assertTrue(chronology2.equals(chronology2));
    }

    @Test
    public void test2111() throws Throwable {
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.millisOfSecond();
        dateTimeFieldType0.toString();
        dateTimeFieldType0.hashCode();
        org.junit.Assert.assertTrue(dateTimeFieldType0.equals(dateTimeFieldType0));
    }

    @Test
    public void test2112() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        java.util.Locale locale2 = null;
        java.lang.Integer integer3 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket4 = new org.joda.time.format.DateTimeParserBucket(1, chronology1, locale2, integer3, 1);
        java.lang.CharSequence charSequence5 = null;
        long long6 = dateTimeParserBucket4.computeMillis(true, charSequence5);
    }

    @Test
    public void test2113() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInstant0, readableInstant1);
        org.joda.time.Chronology chronology3 = chronology2.withUTC();
        chronology3.toString();
        chronology3.hashCode();
        org.junit.Assert.assertTrue(chronology3.equals(chronology3));
    }

    @Test
    public void test2114() throws Throwable {
        org.joda.time.Partial.Property setCopy0 = null;
        java.lang.String string1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.Partial partial3 = setCopy0.setCopy(string1, locale2);
        partial3.toString();
        partial3.hashCode();
        org.junit.Assert.assertTrue(partial3.equals(partial3));
    }

    @Test
    public void test2115() throws Throwable {
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Weeks weeks3 = org.joda.time.Weeks.weeksIn(readableInterval2);
        org.joda.time.Seconds seconds4 = weeks3.toStandardSeconds();
        seconds4.toString();
        seconds4.hashCode();
        org.junit.Assert.assertTrue(seconds4.equals(seconds4));
    }

    @Test
    public void test2116() throws Throwable {
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendHourOfHalfday(1);
        dateTimeFormatterBuilder1.toString();
        dateTimeFormatterBuilder1.hashCode();
        org.junit.Assert.assertTrue(dateTimeFormatterBuilder1.equals(dateTimeFormatterBuilder1));
    }

    @Test
    public void test2117() throws Throwable {
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime(1, 1, 1, 1, 1, 1);
        org.joda.time.DateTime dateTime1 = dateTime0.withDayOfYear(1);
        dateTime1.toString();
        dateTime1.hashCode();
        org.junit.Assert.assertTrue(dateTime1.equals(dateTime1));
    }

    @Test
    public void test2118() throws Throwable {
        java.lang.Object object0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInstant1, readableInstant2);
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay(object0, chronology3);
        int int5 = yearMonthDay4.size();
    }

    @Test
    public void test2119() throws Throwable {
        org.joda.time.tz.FixedDateTimeZone nextTransition0 = null;
        long long1 = nextTransition0.nextTransition(1);
    }

    @Test
    public void test2120() throws Throwable {
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Years years2 = org.joda.time.Years.yearsIn(readableInterval1);
        years2.toString();
        years2.hashCode();
        org.junit.Assert.assertTrue(years2.equals(years2));
    }

    @Test
    public void test2121() throws Throwable {
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.localTimeParser();
        org.joda.time.Chronology chronology1 = dateTimeFormatter0.getChronolgy();
        chronology1.toString();
        chronology1.hashCode();
        org.junit.Assert.assertTrue(chronology1.equals(chronology1));
    }

    @Test
    public void test2122() throws Throwable {
        java.lang.Object object0 = null;
        org.joda.time.Duration duration1 = new org.joda.time.Duration(object0);
        org.joda.time.Seconds seconds2 = duration1.toStandardSeconds();
        seconds2.toString();
        seconds2.hashCode();
        org.junit.Assert.assertTrue(seconds2.equals(seconds2));
    }

    @Test
    public void test2123() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        long long2 = chronology1.add(1, 1, 1);
    }

    @Test
    public void test2124() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInstant0, readableInstant1);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(1, 1, 1, 1, 1, chronology2);
        org.joda.time.DateTime.Property property4 = dateTime3.dayOfYear();
        property4.toString();
        property4.hashCode();
        org.junit.Assert.assertTrue(property4.equals(property4));
    }

    @Test
    public void test2125() throws Throwable {
        org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.fromMillisOfDay(1);
        java.lang.String string1 = localTime0.toString();
        string1.toString();
        string1.hashCode();
        org.junit.Assert.assertTrue(string1.equals(string1));
    }

    @Test
    public void test2126() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInstant0, readableInstant1);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.clockhourOfDay();
        dateTimeField3.toString();
        dateTimeField3.hashCode();
        org.junit.Assert.assertTrue(dateTimeField3.equals(dateTimeField3));
    }

    @Test
    public void test2127() throws Throwable {
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant1);
        org.joda.time.Partial partial3 = new org.joda.time.Partial(dateTimeFieldType0, 1, chronology2);
        java.lang.String string4 = partial3.toStringList();
        string4.toString();
        string4.hashCode();
        org.junit.Assert.assertTrue(string4.equals(string4));
    }

    @Test
    public void test2128() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = org.joda.time.LocalDate.now(dateTimeZone1);
        localDate2.toString();
        localDate2.hashCode();
        org.junit.Assert.assertTrue(localDate2.equals(localDate2));
    }

    @Test
    public void test2129() throws Throwable {
        java.lang.String string0 = null;
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.parse(string0);
        dateTime1.toString();
        dateTime1.hashCode();
        org.junit.Assert.assertTrue(dateTime1.equals(dateTime1));
    }

    @Test
    public void test2130() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight2.plus(1);
        dateMidnight3.toString();
        dateMidnight3.hashCode();
        org.junit.Assert.assertTrue(dateMidnight3.equals(dateMidnight3));
    }

    @Test
    public void test2131() throws Throwable {
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime(1, 1, 1, 1, 1);
        org.joda.time.DateTime dateTime1 = dateTime0.plusHours(1);
        dateTime1.toString();
        dateTime1.hashCode();
        org.junit.Assert.assertTrue(dateTime1.equals(dateTime1));
    }

    @Test
    public void test2132() throws Throwable {
        java.lang.Object object0 = null;
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(object0, dateTimeZone2);
        int int4 = localDate3.getMonthOfYear();
    }

    @Test
    public void test2133() throws Throwable {
        java.lang.String string0 = null;
        org.joda.time.Months months1 = org.joda.time.Months.parseMonths(string0);
        org.joda.time.Months months2 = months1.minus(1);
        months2.toString();
        months2.hashCode();
        org.junit.Assert.assertTrue(months2.equals(months2));
    }

    @Test
    public void test2134() throws Throwable {
        java.lang.Object object0 = null;
        org.joda.time.Instant instant1 = new org.joda.time.Instant(object0);
        org.joda.time.Instant instant2 = instant1.plus(1);
        instant2.toString();
        instant2.hashCode();
        org.junit.Assert.assertTrue(instant2.equals(instant2));
    }

    @Test
    public void test2135() throws Throwable {
        java.lang.Object object0 = null;
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod(object0);
        mutablePeriod1.toString();
        mutablePeriod1.hashCode();
        org.junit.Assert.assertTrue(mutablePeriod1.equals(mutablePeriod1));
    }

    @Test
    public void test2136() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay(1, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Chronology chronology4 = org.joda.time.DateTimeUtils.getChronology(chronology3);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay2.withChronologyRetainFields(chronology4);
        yearMonthDay5.toString();
        yearMonthDay5.hashCode();
        org.junit.Assert.assertTrue(yearMonthDay5.equals(yearMonthDay5));
    }

    @Test
    public void test2137() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInstant0, readableInstant1);
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(chronology2);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight3.withDurationAdded(1, 1);
        dateMidnight4.toString();
        dateMidnight4.hashCode();
        org.junit.Assert.assertTrue(dateMidnight4.equals(dateMidnight4));
    }

    @Test
    public void test2138() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInstant0, readableInstant1);
        org.joda.time.chrono.LenientChronology lenientChronology3 = org.joda.time.chrono.LenientChronology.getInstance(chronology2);
        org.joda.time.Chronology chronology4 = lenientChronology3.withUTC();
        chronology4.toString();
        chronology4.hashCode();
        org.junit.Assert.assertTrue(chronology4.equals(chronology4));
    }

    @Test
    public void test2139() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInstant0, readableInstant1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getChronology(chronology2);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.weekOfWeekyear();
        dateTimeField4.toString();
        dateTimeField4.hashCode();
        org.junit.Assert.assertTrue(dateTimeField4.equals(dateTimeField4));
    }

    @Test
    public void test2140() throws Throwable {
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Period period2 = new org.joda.time.Period(readableDuration0, readableInstant1);
        int int3 = period2.getDays();
    }

    @Test
    public void test2141() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.time();
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod(readableInstant0, readableInstant1, periodType2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.Chronology chronology7 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInstant5, readableInstant6);
        mutablePeriod3.setPeriod(readableDuration4, chronology7);
    }

    @Test
    public void test2142() throws Throwable {
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(1, 1);
        org.joda.time.Interval interval1 = new org.joda.time.Interval(1, 1, dateTimeZone0);
        interval1.toString();
        interval1.hashCode();
        org.junit.Assert.assertTrue(interval1.equals(interval1));
    }

    @Test
    public void test2143() throws Throwable {
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.Interval interval1 = new org.joda.time.Interval(1, 1, dateTimeZone0);
        org.joda.time.Interval interval2 = interval1.withEndMillis(1);
        interval2.toString();
        interval2.hashCode();
        org.junit.Assert.assertTrue(interval2.equals(interval2));
    }

    @Test
    public void test2144() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay(chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = timeOfDay2.getFieldType(1);
        dateTimeFieldType3.toString();
        dateTimeFieldType3.hashCode();
        org.junit.Assert.assertTrue(dateTimeFieldType3.equals(dateTimeFieldType3));
    }

    @Test
    public void test2145() throws Throwable {
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.DurationFieldType durationFieldType1 = dateTimeFieldType0.getDurationType();
        durationFieldType1.toString();
        durationFieldType1.hashCode();
        org.junit.Assert.assertTrue(durationFieldType1.equals(durationFieldType1));
    }

    @Test
    public void test2146() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.MutableDateTime mutableDateTime2 = org.joda.time.MutableDateTime.now(chronology1);
        mutableDateTime2.add(1);
    }

    @Test
    public void test2147() throws Throwable {
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.ReadableInterval readableInterval3 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval2);
        org.joda.time.Months months4 = org.joda.time.Months.monthsIn(readableInterval3);
        months4.toString();
        months4.hashCode();
        org.junit.Assert.assertTrue(months4.equals(months4));
    }

    @Test
    public void test2148() throws Throwable {
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Years years2 = org.joda.time.Years.yearsIn(readableInterval1);
        int int3 = years2.getYears();
    }

    @Test
    public void test2149() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket3 = new org.joda.time.format.DateTimeParserBucket(1, chronology1, locale2);
        java.lang.Integer integer4 = null;
        dateTimeParserBucket3.setPivotYear(integer4);
    }

    @Test
    public void test2150() throws Throwable {
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime(1, 1, 1, 1);
        org.joda.time.LocalTime.Property property1 = localTime0.millisOfDay();
        property1.toString();
        property1.hashCode();
        org.junit.Assert.assertTrue(property1.equals(property1));
    }

    @Test
    public void test2151() throws Throwable {
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.field.UnsupportedDurationField unsupportedDurationField1 = org.joda.time.field.UnsupportedDurationField.getInstance(durationFieldType0);
        org.joda.time.DurationFieldType durationFieldType2 = unsupportedDurationField1.getType();
        durationFieldType2.toString();
        durationFieldType2.hashCode();
        org.junit.Assert.assertTrue(durationFieldType2.equals(durationFieldType2));
    }

    @Test
    public void test2152() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(1, chronology0);
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight1.withMillis(1);
        dateMidnight2.toString();
        dateMidnight2.hashCode();
        org.junit.Assert.assertTrue(dateMidnight2.equals(dateMidnight2));
    }

    @Test
    public void test2153() throws Throwable {
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate(1);
        org.joda.time.Interval interval1 = localDate0.toInterval();
        interval1.toString();
        interval1.hashCode();
        org.junit.Assert.assertTrue(interval1.equals(interval1));
    }

    @Test
    public void test2154() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.DateTime dateTime4 = localDate1.toDateTimeAtMidnight(dateTimeZone3);
        dateTime4.toString();
        dateTime4.hashCode();
        org.junit.Assert.assertTrue(dateTime4.equals(dateTime4));
    }

    @Test
    public void test2155() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeUtils.getZone(dateTimeZone1);
        org.joda.time.LocalTime localTime3 = org.joda.time.LocalTime.now(dateTimeZone2);
        org.joda.time.LocalTime localTime4 = localTime3.withMillisOfSecond(1);
        localTime4.toString();
        localTime4.hashCode();
        org.junit.Assert.assertTrue(localTime4.equals(localTime4));
    }

    @Test
    public void test2156() throws Throwable {
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.time();
        org.joda.time.Period period1 = new org.joda.time.Period(1, periodType0);
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.millis();
        org.joda.time.Period period3 = period1.withField(durationFieldType2, 1);
        period3.toString();
        period3.hashCode();
        org.junit.Assert.assertTrue(period3.equals(period3));
    }

    @Test
    public void test2157() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(chronology1);
        org.joda.time.LocalTime localTime3 = localTime2.plusSeconds(1);
        localTime3.toString();
        localTime3.hashCode();
        org.junit.Assert.assertTrue(localTime3.equals(localTime3));
    }

    @Test
    public void test2158() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.MutableDateTime mutableDateTime2 = org.joda.time.MutableDateTime.now(chronology1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        mutableDateTime2.add(readablePeriod3, 1);
    }

    @Test
    public void test2159() throws Throwable {
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.forOffsetMillis(1);
        org.joda.time.chrono.JulianChronology julianChronology1 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone0);
        julianChronology1.toString();
        julianChronology1.hashCode();
        org.junit.Assert.assertTrue(julianChronology1.equals(julianChronology1));
    }

    @Test
    public void test2160() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(1, chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight1.plus(readablePeriod2);
        dateMidnight3.toString();
        dateMidnight3.hashCode();
        org.junit.Assert.assertTrue(dateMidnight3.equals(dateMidnight3));
    }

    @Test
    public void test2161() throws Throwable {
        org.joda.time.field.ScaledDurationField hashCode0 = null;
        int int1 = hashCode0.hashCode();
    }

    @Test
    public void test2162() throws Throwable {
        java.lang.Object object0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInstant1, readableInstant2);
        org.joda.time.Chronology chronology4 = org.joda.time.DateTimeUtils.getChronology(chronology3);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(object0, chronology4);
        localDateTime5.toString();
        localDateTime5.hashCode();
        org.junit.Assert.assertTrue(localDateTime5.equals(localDateTime5));
    }

    @Test
    public void test2163() throws Throwable {
        org.joda.time.chrono.IslamicChronology islamicChronology0 = org.joda.time.chrono.IslamicChronology.getInstance();
        org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType1 = islamicChronology0.getLeapYearPatternType();
        leapYearPatternType1.toString();
        leapYearPatternType1.hashCode();
        org.junit.Assert.assertTrue(leapYearPatternType1.equals(leapYearPatternType1));
    }

    @Test
    public void test2164() throws Throwable {
        org.joda.time.field.ScaledDurationField equals0 = null;
        java.lang.Object object1 = null;
        boolean boolean2 = equals0.equals(object1);
    }

    @Test
    public void test2165() throws Throwable {
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        java.lang.Number number1 = null;
        java.lang.String string2 = null;
        org.joda.time.IllegalFieldValueException illegalFieldValueException3 = new org.joda.time.IllegalFieldValueException(dateTimeFieldType0, number1, string2);
        org.joda.time.DurationFieldType durationFieldType4 = illegalFieldValueException3.getDurationFieldType();
        durationFieldType4.toString();
        durationFieldType4.hashCode();
        org.junit.Assert.assertTrue(durationFieldType4.equals(durationFieldType4));
    }

    @Test
    public void test2166() throws Throwable {
        java.lang.Object object0 = null;
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(object0, chronology1);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime2.withMonthOfYear(1);
        localDateTime3.toString();
        localDateTime3.hashCode();
        org.junit.Assert.assertTrue(localDateTime3.equals(localDateTime3));
    }

    @Test
    public void test2167() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.yearDay();
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod(readableInstant0, readableInstant1, periodType2);
        int int4 = mutablePeriod3.getMinutes();
    }

    @Test
    public void test2168() throws Throwable {
        org.joda.time.ReadablePeriod readablePeriod0 = null;
        org.joda.time.Days days1 = org.joda.time.Days.standardDaysIn(readablePeriod0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Days days3 = org.joda.time.Days.standardDaysIn(readablePeriod2);
        org.joda.time.Days days4 = days1.minus(days3);
        days4.toString();
        days4.hashCode();
        org.junit.Assert.assertTrue(days4.equals(days4));
    }

    @Test
    public void test2169() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String string2 = dateTimeZone1.getName(1);
        string2.toString();
        string2.hashCode();
        org.junit.Assert.assertTrue(string2.equals(string2));
    }

    @Test
    public void test2170() throws Throwable {
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.forOffsetMillis(1);
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(1, 1, 1, 1, 1, 1, 1, dateTimeZone0);
        mutableDateTime1.toString();
        mutableDateTime1.hashCode();
        org.junit.Assert.assertTrue(mutableDateTime1.equals(mutableDateTime1));
    }

    @Test
    public void test2171() throws Throwable {
        org.joda.time.ReadablePeriod readablePeriod0 = null;
        org.joda.time.Days days1 = org.joda.time.Days.standardDaysIn(readablePeriod0);
        org.joda.time.ReadableInterval readableInterval2 = null;
        org.joda.time.ReadableInterval readableInterval3 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval2);
        org.joda.time.Days days4 = org.joda.time.Days.daysIn(readableInterval3);
        boolean boolean5 = days1.isLessThan(days4);
    }

    @Test
    public void test2172() throws Throwable {
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.tTime();
        dateTimeFormatter0.toString();
        dateTimeFormatter0.hashCode();
        org.junit.Assert.assertTrue(dateTimeFormatter0.equals(dateTimeFormatter0));
    }

    @Test
    public void test2173() throws Throwable {
        java.lang.String string0 = null;
        org.joda.time.Hours hours1 = org.joda.time.Hours.parseHours(string0);
        hours1.toString();
        hours1.hashCode();
        org.junit.Assert.assertTrue(hours1.equals(hours1));
    }

    @Test
    public void test2174() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay(dateTimeZone1);
        org.joda.time.TimeOfDay.Property property3 = timeOfDay2.hourOfDay();
        property3.toString();
        property3.hashCode();
        org.junit.Assert.assertTrue(property3.equals(property3));
    }

    @Test
    public void test2175() throws Throwable {
        org.joda.time.field.UnsupportedDateTimeField getAsText0 = null;
        org.joda.time.ReadablePartial readablePartial1 = null;
        java.util.Locale locale2 = null;
        java.lang.String string3 = getAsText0.getAsText(readablePartial1, locale2);
        string3.toString();
        string3.hashCode();
        org.junit.Assert.assertTrue(string3.equals(string3));
    }

    @Test
    public void test2176() throws Throwable {
        java.lang.Object object0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(object0);
        org.joda.time.LocalDateTime localDateTime2 = localDateTime1.minusWeeks(1);
        localDateTime2.toString();
        localDateTime2.hashCode();
        org.junit.Assert.assertTrue(localDateTime2.equals(localDateTime2));
    }

    @Test
    public void test2177() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeUtils.getZone(dateTimeZone1);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(1, dateTimeZone2);
        org.joda.time.DateTime dateTime4 = dateTime3.plusWeeks(1);
        dateTime4.toString();
        dateTime4.hashCode();
        org.junit.Assert.assertTrue(dateTime4.equals(dateTime4));
    }

    @Test
    public void test2178() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket3 = new org.joda.time.format.DateTimeParserBucket(1, chronology1, locale2);
        java.lang.Integer integer4 = dateTimeParserBucket3.getOffsetInteger();
        integer4.toString();
        integer4.hashCode();
        org.junit.Assert.assertTrue(integer4.equals(integer4));
    }

    @Test
    public void test2179() throws Throwable {
        org.joda.time.field.OffsetDateTimeField remainder0 = null;
        long long1 = remainder0.remainder(1);
    }

    @Test
    public void test2180() throws Throwable {
        org.joda.time.tz.FixedDateTimeZone getNameKey0 = null;
        java.lang.String string1 = getNameKey0.getNameKey(1);
        string1.toString();
        string1.hashCode();
        org.junit.Assert.assertTrue(string1.equals(string1));
    }

    @Test
    public void test2181() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.YearMonth yearMonth2 = new org.joda.time.YearMonth(1, 1, chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.YearMonth.Property property4 = yearMonth2.property(dateTimeFieldType3);
        property4.toString();
        property4.hashCode();
        org.junit.Assert.assertTrue(property4.equals(property4));
    }

    @Test
    public void test2182() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime2.plusMinutes(1);
        localDateTime3.toString();
        localDateTime3.hashCode();
        org.junit.Assert.assertTrue(localDateTime3.equals(localDateTime3));
    }

    @Test
    public void test2183() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInstant0, readableInstant1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getChronology(chronology2);
        org.joda.time.DurationField durationField4 = chronology3.halfdays();
        durationField4.toString();
        durationField4.hashCode();
        org.junit.Assert.assertTrue(durationField4.equals(durationField4));
    }

    @Test
    public void test2184() throws Throwable {
        java.lang.Object object0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(object0);
        org.joda.time.YearMonthDay.Property property2 = yearMonthDay1.dayOfMonth();
        property2.toString();
        property2.hashCode();
        org.junit.Assert.assertTrue(property2.equals(property2));
    }

    @Test
    public void test2185() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.ReadablePartial readablePartial2 = null;
        int[] intArr3 = null;
        chronology1.validate(readablePartial2, intArr3);
    }

    @Test
    public void test2186() throws Throwable {
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        boolean boolean1 = dateTimeFormatterBuilder0.canBuildPrinter();
    }

    @Test
    public void test2187() throws Throwable {
        org.joda.time.ReadablePeriod readablePeriod0 = null;
        org.joda.time.Seconds seconds1 = org.joda.time.Seconds.standardSecondsIn(readablePeriod0);
        org.joda.time.Minutes minutes2 = seconds1.toStandardMinutes();
        minutes2.toString();
        minutes2.hashCode();
        org.junit.Assert.assertTrue(minutes2.equals(minutes2));
    }

    @Test
    public void test2188() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone2 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone1);
        int int3 = cachedDateTimeZone2.getOffset(1);
    }

    @Test
    public void test2189() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeUtils.getZone(dateTimeZone1);
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime(1, dateTimeZone2);
        org.joda.time.DateTimeField dateTimeField4 = null;
        mutableDateTime3.setRounding(dateTimeField4, 1);
    }

    @Test
    public void test2190() throws Throwable {
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime(1, 1, 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.LocalTime.Property property2 = localTime0.property(dateTimeFieldType1);
        property2.toString();
        property2.hashCode();
        org.junit.Assert.assertTrue(property2.equals(property2));
    }

    @Test
    public void test2191() throws Throwable {
        java.lang.Object object0 = null;
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeUtils.getZone(dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(object0, dateTimeZone3);
        org.joda.time.YearMonthDay yearMonthDay5 = dateMidnight4.toYearMonthDay();
        yearMonthDay5.toString();
        yearMonthDay5.hashCode();
        org.junit.Assert.assertTrue(yearMonthDay5.equals(yearMonthDay5));
    }

    @Test
    public void test2192() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime(dateTimeZone1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.weekOfWeekyear();
        property3.toString();
        property3.hashCode();
        org.junit.Assert.assertTrue(property3.equals(property3));
    }

    @Test
    public void test2193() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(1, dateTimeZone1);
        org.joda.time.DurationFieldType durationFieldType3 = org.joda.time.DurationFieldType.minutes();
        boolean boolean4 = localTime2.isSupported(durationFieldType3);
    }

    @Test
    public void test2194() throws Throwable {
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod(periodType0);
        mutablePeriod1.addDays(1);
    }

    @Test
    public void test2195() throws Throwable {
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.field.UnsupportedDurationField unsupportedDurationField1 = org.joda.time.field.UnsupportedDurationField.getInstance(durationFieldType0);
        int int2 = unsupportedDurationField1.getValue(1);
    }

    @Test
    public void test2196() throws Throwable {
        org.joda.time.ReadablePartial readablePartial0 = null;
        org.joda.time.ReadablePartial readablePartial1 = null;
        org.joda.time.Days days2 = org.joda.time.Days.daysBetween(readablePartial0, readablePartial1);
        days2.toString();
        days2.hashCode();
        org.junit.Assert.assertTrue(days2.equals(days2));
    }

    @Test
    public void test2197() throws Throwable {
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.dayOfYear();
        property1.toString();
        property1.hashCode();
        org.junit.Assert.assertTrue(property1.equals(property1));
    }

    @Test
    public void test2198() throws Throwable {
        java.lang.Object object0 = null;
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeUtils.getZone(dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(object0, dateTimeZone3);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight4.plus(1);
        dateMidnight5.toString();
        dateMidnight5.hashCode();
        org.junit.Assert.assertTrue(dateMidnight5.equals(dateMidnight5));
    }

    @Test
    public void test2199() throws Throwable {
        java.lang.Object object0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInstant1, readableInstant2);
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate(object0, chronology3);
        localDate4.toString();
        localDate4.hashCode();
        org.junit.Assert.assertTrue(localDate4.equals(localDate4));
    }

    @Test
    public void test2200() throws Throwable {
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfMonth();
        org.joda.time.DurationFieldType durationFieldType1 = dateTimeFieldType0.getDurationType();
        durationFieldType1.toString();
        durationFieldType1.hashCode();
        org.junit.Assert.assertTrue(durationFieldType1.equals(durationFieldType1));
    }

    @Test
    public void test2201() throws Throwable {
        org.joda.time.ReadablePeriod readablePeriod0 = null;
        org.joda.time.Weeks weeks1 = org.joda.time.Weeks.standardWeeksIn(readablePeriod0);
        org.joda.time.Weeks weeks2 = weeks1.plus(1);
        weeks2.toString();
        weeks2.hashCode();
        org.junit.Assert.assertTrue(weeks2.equals(weeks2));
    }

    @Test
    public void test2202() throws Throwable {
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.seconds();
        periodType0.toString();
        periodType0.hashCode();
        org.junit.Assert.assertTrue(periodType0.equals(periodType0));
    }

    @Test
    public void test2203() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.LocalDate localDate2 = org.joda.time.LocalDate.now(chronology1);
        int int3 = localDate2.getYearOfEra();
    }

    @Test
    public void test2204() throws Throwable {
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.PeriodType periodType1 = periodType0.withYearsRemoved();
        periodType1.toString();
        periodType1.hashCode();
        org.junit.Assert.assertTrue(periodType1.equals(periodType1));
    }

    @Test
    public void test2205() throws Throwable {
        java.lang.String string0 = null;
        org.joda.time.Minutes minutes1 = org.joda.time.Minutes.parseMinutes(string0);
        org.joda.time.Minutes minutes2 = org.joda.time.Minutes.minutes(1);
        org.joda.time.Minutes minutes3 = minutes1.plus(minutes2);
        minutes3.toString();
        minutes3.hashCode();
        org.junit.Assert.assertTrue(minutes3.equals(minutes3));
    }

    @Test
    public void test2206() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket3 = new org.joda.time.format.DateTimeParserBucket(1, chronology1, locale2);
        org.joda.time.DateTimeZone dateTimeZone4 = dateTimeParserBucket3.getZone();
        dateTimeZone4.toString();
        dateTimeZone4.hashCode();
        org.junit.Assert.assertTrue(dateTimeZone4.equals(dateTimeZone4));
    }

    @Test
    public void test2207() throws Throwable {
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstance();
        copticChronology0.toString();
        copticChronology0.hashCode();
        org.junit.Assert.assertTrue(copticChronology0.equals(copticChronology0));
    }

    @Test
    public void test2208() throws Throwable {
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.ReadableInterval readableInterval3 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval2);
        org.joda.time.Months months4 = org.joda.time.Months.monthsIn(readableInterval3);
        org.joda.time.Months months5 = months4.minus(1);
        months5.toString();
        months5.hashCode();
        org.junit.Assert.assertTrue(months5.equals(months5));
    }

    @Test
    public void test2209() throws Throwable {
        org.joda.time.chrono.IslamicChronology.LeapYearPatternType hashCode0 = null;
        int int1 = hashCode0.hashCode();
    }

    @Test
    public void test2210() throws Throwable {
        java.lang.Object object0 = null;
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(object0, dateTimeZone2);
        org.joda.time.LocalDate localDate4 = localDate3.minusMonths(1);
        localDate4.toString();
        localDate4.hashCode();
        org.junit.Assert.assertTrue(localDate4.equals(localDate4));
    }

    @Test
    public void test2211() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.MonthDay monthDay2 = new org.joda.time.MonthDay(1, chronology1);
        org.joda.time.MonthDay.Property property3 = monthDay2.dayOfMonth();
        property3.toString();
        property3.hashCode();
        org.junit.Assert.assertTrue(property3.equals(property3));
    }

    @Test
    public void test2212() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.LocalDate localDate2 = org.joda.time.LocalDate.now(chronology1);
        org.joda.time.LocalDate.Property property3 = localDate2.year();
        property3.toString();
        property3.hashCode();
        org.junit.Assert.assertTrue(property3.equals(property3));
    }

    @Test
    public void test2213() throws Throwable {
        org.joda.time.field.DelegatedDateTimeField getDifferenceAsLong0 = null;
        long long1 = getDifferenceAsLong0.getDifferenceAsLong(1, 1);
    }

    @Test
    public void test2214() throws Throwable {
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        int int1 = localDateTime0.getMillisOfDay();
    }

    @Test
    public void test2215() throws Throwable {
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        java.lang.String string1 = null;
        org.joda.time.IllegalFieldValueException illegalFieldValueException2 = new org.joda.time.IllegalFieldValueException(dateTimeFieldType0, string1);
        illegalFieldValueException2.toString();
        illegalFieldValueException2.hashCode();
        org.junit.Assert.assertTrue(illegalFieldValueException2.equals(illegalFieldValueException2));
    }

    @Test
    public void test2216() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInstant0, readableInstant1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getChronology(chronology2);
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime(chronology3);
        mutableDateTime4.setMillisOfDay(1);
    }

    @Test
    public void test2217() throws Throwable {
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(1, 1);
        org.joda.time.DateTime dateTime2 = localDate0.toDateTimeAtStartOfDay(dateTimeZone1);
        dateTime2.toString();
        dateTime2.hashCode();
        org.junit.Assert.assertTrue(dateTime2.equals(dateTime2));
    }

    @Test
    public void test2218() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay(dateTimeZone1);
        yearMonthDay2.toString();
        yearMonthDay2.hashCode();
        org.junit.Assert.assertTrue(yearMonthDay2.equals(yearMonthDay2));
    }

    @Test
    public void test2219() throws Throwable {
        java.lang.Object object0 = null;
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeUtils.getZone(dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(object0, dateTimeZone3);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight4.withCenturyOfEra(1);
        dateMidnight5.toString();
        dateMidnight5.hashCode();
        org.junit.Assert.assertTrue(dateMidnight5.equals(dateMidnight5));
    }

    @Test
    public void test2220() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay(1, 1, 1, chronology1);
        timeOfDay2.toString();
        timeOfDay2.hashCode();
        org.junit.Assert.assertTrue(timeOfDay2.equals(timeOfDay2));
    }

    @Test
    public void test2221() throws Throwable {
        java.lang.Object object0 = null;
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.minutes();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.Chronology chronology4 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInstant2, readableInstant3);
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod(object0, periodType1, chronology4);
        mutablePeriod5.add(1, 1, 1, 1, 1, 1, 1, 1);
    }

    @Test
    public void test2222() throws Throwable {
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime(1, 1, 1, 1, 1);
        org.joda.time.DateTime dateTime1 = dateTime0.withWeekOfWeekyear(1);
        dateTime1.toString();
        dateTime1.hashCode();
        org.junit.Assert.assertTrue(dateTime1.equals(dateTime1));
    }

    @Test
    public void test2223() throws Throwable {
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.days();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getChronology(chronology1);
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod(1, 1, periodType0, chronology2);
        mutablePeriod3.toString();
        mutablePeriod3.hashCode();
        org.junit.Assert.assertTrue(mutablePeriod3.equals(mutablePeriod3));
    }

    @Test
    public void test2224() throws Throwable {
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(1, 1, 1, 1, 1, 1, dateTimeZone0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.DateTime dateTime3 = dateTime1.minus(readablePeriod2);
        dateTime3.toString();
        dateTime3.hashCode();
        org.junit.Assert.assertTrue(dateTime3.equals(dateTime3));
    }

    @Test
    public void test2225() throws Throwable {
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.forOffsetMillis(1);
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(1, dateTimeZone0);
        mutableDateTime1.toString();
        mutableDateTime1.hashCode();
        org.junit.Assert.assertTrue(mutableDateTime1.equals(mutableDateTime1));
    }

    @Test
    public void test2226() throws Throwable {
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.era();
        java.lang.String string1 = null;
        org.joda.time.IllegalFieldValueException illegalFieldValueException2 = new org.joda.time.IllegalFieldValueException(dateTimeFieldType0, string1);
        org.joda.time.DurationFieldType durationFieldType3 = illegalFieldValueException2.getDurationFieldType();
        durationFieldType3.toString();
        durationFieldType3.hashCode();
        org.junit.Assert.assertTrue(durationFieldType3.equals(durationFieldType3));
    }

    @Test
    public void test2227() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime(chronology1);
        mutableDateTime2.setMillis(1);
    }

    @Test
    public void test2228() throws Throwable {
        org.joda.time.LocalDateTime.Property getField0 = null;
        org.joda.time.DateTimeField dateTimeField1 = getField0.getField();
        dateTimeField1.toString();
        dateTimeField1.hashCode();
        org.junit.Assert.assertTrue(dateTimeField1.equals(dateTimeField1));
    }

    @Test
    public void test2229() throws Throwable {
        org.joda.time.TimeOfDay timeOfDay0 = org.joda.time.TimeOfDay.fromMillisOfDay(1);
        timeOfDay0.toString();
        timeOfDay0.hashCode();
        org.junit.Assert.assertTrue(timeOfDay0.equals(timeOfDay0));
    }

    @Test
    public void test2230() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(1, dateTimeZone1);
        org.joda.time.DateTime dateTime3 = dateTime2.withMillisOfDay(1);
        dateTime3.toString();
        dateTime3.hashCode();
        org.junit.Assert.assertTrue(dateTime3.equals(dateTime3));
    }

    @Test
    public void test2231() throws Throwable {
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod(periodType0);
        mutablePeriod1.addHours(1);
    }

    @Test
    public void test2232() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis(1);
        org.joda.time.DateMidnight dateMidnight4 = yearMonthDay2.toDateMidnight(dateTimeZone3);
        dateMidnight4.toString();
        dateMidnight4.hashCode();
        org.junit.Assert.assertTrue(dateMidnight4.equals(dateMidnight4));
    }

    @Test
    public void test2233() throws Throwable {
        org.joda.time.LocalDateTime.Property withMinimumValue0 = null;
        org.joda.time.LocalDateTime localDateTime1 = withMinimumValue0.withMinimumValue();
        localDateTime1.toString();
        localDateTime1.hashCode();
        org.junit.Assert.assertTrue(localDateTime1.equals(localDateTime1));
    }

    @Test
    public void test2234() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeUtils.getZone(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone2);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.minuteOfHour();
        property4.toString();
        property4.hashCode();
        org.junit.Assert.assertTrue(property4.equals(property4));
    }

    @Test
    public void test2235() throws Throwable {
        org.joda.time.format.PeriodFormatter periodFormatter0 = org.joda.time.format.ISOPeriodFormat.alternate();
        java.util.Locale locale1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = periodFormatter0.withLocale(locale1);
        periodFormatter2.toString();
        periodFormatter2.hashCode();
        org.junit.Assert.assertTrue(periodFormatter2.equals(periodFormatter2));
    }

    @Test
    public void test2236() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeUtils.getZone(dateTimeZone1);
        org.joda.time.LocalDate localDate3 = org.joda.time.LocalDate.now(dateTimeZone2);
        org.joda.time.LocalDate.Property property4 = localDate3.dayOfMonth();
        property4.toString();
        property4.hashCode();
        org.junit.Assert.assertTrue(property4.equals(property4));
    }

    @Test
    public void test2237() throws Throwable {
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        mutableDateTime0.setMinuteOfHour(1);
    }

    @Test
    public void test2238() throws Throwable {
        org.joda.time.MutableDateTime.Property set0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = set0.set(1);
        mutableDateTime1.toString();
        mutableDateTime1.hashCode();
        org.junit.Assert.assertTrue(mutableDateTime1.equals(mutableDateTime1));
    }

    @Test
    public void test2239() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod(readableInstant0, readableInstant1, periodType2);
        mutablePeriod3.setMonths(1);
    }

    @Test
    public void test2240() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.weekyear();
        dateTimeField2.toString();
        dateTimeField2.hashCode();
        org.junit.Assert.assertTrue(dateTimeField2.equals(dateTimeField2));
    }

    @Test
    public void test2241() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(1, dateTimeZone1);
        org.joda.time.DateTime dateTime3 = dateTime2.withYearOfCentury(1);
        dateTime3.toString();
        dateTime3.hashCode();
        org.junit.Assert.assertTrue(dateTime3.equals(dateTime3));
    }

    @Test
    public void test2242() throws Throwable {
        org.joda.time.DateTimeField dateTimeField0 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.field.OffsetDateTimeField offsetDateTimeField2 = new org.joda.time.field.OffsetDateTimeField(dateTimeField0, dateTimeFieldType1, 1, 1, 1);
        offsetDateTimeField2.toString();
        offsetDateTimeField2.hashCode();
        org.junit.Assert.assertTrue(offsetDateTimeField2.equals(offsetDateTimeField2));
    }

    @Test
    public void test2243() throws Throwable {
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendMinuteOfHour(1);
        dateTimeFormatterBuilder1.toString();
        dateTimeFormatterBuilder1.hashCode();
        org.junit.Assert.assertTrue(dateTimeFormatterBuilder1.equals(dateTimeFormatterBuilder1));
    }

    @Test
    public void test2244() throws Throwable {
        org.joda.time.MonthDay monthDay0 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay1 = monthDay0.withMonthOfYear(1);
        monthDay1.toString();
        monthDay1.hashCode();
        org.junit.Assert.assertTrue(monthDay1.equals(monthDay1));
    }

    @Test
    public void test2245() throws Throwable {
        org.joda.time.field.ZeroIsMaxDateTimeField getMinimumValue0 = null;
        org.joda.time.ReadablePartial readablePartial1 = null;
        int int2 = getMinimumValue0.getMinimumValue(readablePartial1);
    }

    @Test
    public void test2246() throws Throwable {
        org.joda.time.format.PeriodFormatter periodFormatter0 = org.joda.time.format.ISOPeriodFormat.alternate();
        boolean boolean1 = periodFormatter0.isParser();
    }

    @Test
    public void test2247() throws Throwable {
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate(1, 1, 1);
        localDate0.toString();
        localDate0.hashCode();
        org.junit.Assert.assertTrue(localDate0.equals(localDate0));
    }

    @Test
    public void test2248() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay(1, 1, 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis(1);
        org.joda.time.DateTime dateTime4 = timeOfDay2.toDateTimeToday(dateTimeZone3);
        dateTime4.toString();
        dateTime4.hashCode();
        org.junit.Assert.assertTrue(dateTime4.equals(dateTime4));
    }

    @Test
    public void test2249() throws Throwable {
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.weekyears();
        java.lang.String string1 = durationFieldType0.getName();
        string1.toString();
        string1.hashCode();
        org.junit.Assert.assertTrue(string1.equals(string1));
    }

    @Test
    public void test2250() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInstant0, readableInstant1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getChronology(chronology2);
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(chronology3);
        localDateTime4.toString();
        localDateTime4.hashCode();
        org.junit.Assert.assertTrue(localDateTime4.equals(localDateTime4));
    }

    @Test
    public void test2251() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInstant0, readableInstant1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getChronology(chronology2);
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(chronology3);
        dateTime4.toString();
        dateTime4.hashCode();
        org.junit.Assert.assertTrue(dateTime4.equals(dateTime4));
    }

    @Test
    public void test2252() throws Throwable {
        java.lang.Object object0 = null;
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.standard();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getChronology(chronology2);
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(object0, periodType1, chronology3);
        mutablePeriod4.toString();
        mutablePeriod4.hashCode();
        org.junit.Assert.assertTrue(mutablePeriod4.equals(mutablePeriod4));
    }

    @Test
    public void test2253() throws Throwable {
        java.lang.Object object0 = null;
        org.joda.time.Duration duration1 = new org.joda.time.Duration(object0);
        org.joda.time.Duration duration2 = duration1.toDuration();
        duration2.toString();
        duration2.hashCode();
        org.junit.Assert.assertTrue(duration2.equals(duration2));
    }

    @Test
    public void test2254() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeUtils.getZone(dateTimeZone1);
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime(dateTimeZone2);
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime3.millisOfDay();
        property4.toString();
        property4.hashCode();
        org.junit.Assert.assertTrue(property4.equals(property4));
    }

    @Test
    public void test2255() throws Throwable {
        org.joda.time.tz.UTCProvider uTCProvider0 = new org.joda.time.tz.UTCProvider();
        java.lang.String string1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = uTCProvider0.getZone(string1);
        dateTimeZone2.toString();
        dateTimeZone2.hashCode();
        org.junit.Assert.assertTrue(dateTimeZone2.equals(dateTimeZone2));
    }

    @Test
    public void test2256() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(1, 1, 1, 1, 1, 1, chronology1);
        dateTime2.toString();
        dateTime2.hashCode();
        org.junit.Assert.assertTrue(dateTime2.equals(dateTime2));
    }

    @Test
    public void test2257() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay(dateTimeZone1);
        java.util.TimeZone timeZone3 = null;
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeUtils.getZone(dateTimeZone4);
        org.joda.time.DateTime dateTime6 = yearMonthDay2.toDateTimeAtMidnight(dateTimeZone5);
        dateTime6.toString();
        dateTime6.hashCode();
        org.junit.Assert.assertTrue(dateTime6.equals(dateTime6));
    }

    @Test
    public void test2258() throws Throwable {
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate(1);
        org.joda.time.LocalDate localDate1 = localDate0.withDayOfYear(1);
        localDate1.toString();
        localDate1.hashCode();
        org.junit.Assert.assertTrue(localDate1.equals(localDate1));
    }

    @Test
    public void test2259() throws Throwable {
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        java.lang.String string1 = null;
        org.joda.time.IllegalFieldValueException illegalFieldValueException2 = new org.joda.time.IllegalFieldValueException(dateTimeFieldType0, string1);
        java.lang.Number number3 = illegalFieldValueException2.getUpperBound();
        number3.toString();
        number3.hashCode();
        org.junit.Assert.assertTrue(number3.equals(number3));
    }

    @Test
    public void test2260() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket3 = new org.joda.time.format.DateTimeParserBucket(1, chronology1, locale2);
        java.lang.Integer integer4 = null;
        dateTimeParserBucket3.setOffset(integer4);
    }

    @Test
    public void test2261() throws Throwable {
        org.joda.time.DateTimeField dateTimeField0 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField2 = new org.joda.time.field.RemainderDateTimeField(dateTimeField0, dateTimeFieldType1, 1);
        remainderDateTimeField2.toString();
        remainderDateTimeField2.hashCode();
        org.junit.Assert.assertTrue(remainderDateTimeField2.equals(remainderDateTimeField2));
    }

    @Test
    public void test2262() throws Throwable {
        java.lang.Object object0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInstant1, readableInstant2);
        org.joda.time.MutableInterval mutableInterval4 = new org.joda.time.MutableInterval(object0, chronology3);
        java.lang.Object object5 = mutableInterval4.clone();
        object5.toString();
        object5.hashCode();
        org.junit.Assert.assertTrue(object5.equals(object5));
    }

    @Test
    public void test2263() throws Throwable {
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.weekyears();
        java.lang.String string1 = null;
        org.joda.time.IllegalFieldValueException illegalFieldValueException2 = new org.joda.time.IllegalFieldValueException(durationFieldType0, string1);
        org.joda.time.DurationFieldType durationFieldType3 = illegalFieldValueException2.getDurationFieldType();
        durationFieldType3.toString();
        durationFieldType3.hashCode();
        org.junit.Assert.assertTrue(durationFieldType3.equals(durationFieldType3));
    }

    @Test
    public void test2264() throws Throwable {
        org.joda.time.ReadablePeriod readablePeriod0 = null;
        org.joda.time.Hours hours1 = org.joda.time.Hours.standardHoursIn(readablePeriod0);
        org.joda.time.PeriodType periodType2 = hours1.getPeriodType();
        periodType2.toString();
        periodType2.hashCode();
        org.junit.Assert.assertTrue(periodType2.equals(periodType2));
    }

    @Test
    public void test2265() throws Throwable {
        org.joda.time.DateTimeField dateTimeField0 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.field.OffsetDateTimeField offsetDateTimeField2 = new org.joda.time.field.OffsetDateTimeField(dateTimeField0, dateTimeFieldType1, 1);
        offsetDateTimeField2.toString();
        offsetDateTimeField2.hashCode();
        org.junit.Assert.assertTrue(offsetDateTimeField2.equals(offsetDateTimeField2));
    }

    @Test
    public void test2266() throws Throwable {
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight(1, 1, 1);
        org.joda.time.DateMidnight.Property property1 = dateMidnight0.centuryOfEra();
        property1.toString();
        property1.hashCode();
        org.junit.Assert.assertTrue(property1.equals(property1));
    }

    @Test
    public void test2267() throws Throwable {
        org.joda.time.MonthDay monthDay0 = new org.joda.time.MonthDay();
        org.joda.time.LocalDate localDate1 = monthDay0.toLocalDate(1);
        localDate1.toString();
        localDate1.hashCode();
        org.junit.Assert.assertTrue(localDate1.equals(localDate1));
    }

    @Test
    public void test2268() throws Throwable {
        org.joda.time.MutablePeriod mutablePeriod0 = new org.joda.time.MutablePeriod(1, 1, 1, 1);
        mutablePeriod0.add(1);
    }

    @Test
    public void test2269() throws Throwable {
        org.joda.time.ReadablePeriod readablePeriod0 = null;
        org.joda.time.Weeks weeks1 = org.joda.time.Weeks.standardWeeksIn(readablePeriod0);
        org.joda.time.Duration duration2 = weeks1.toStandardDuration();
        duration2.toString();
        duration2.hashCode();
        org.junit.Assert.assertTrue(duration2.equals(duration2));
    }

    @Test
    public void test2270() throws Throwable {
        org.joda.time.LocalDateTime.Property roundHalfEvenCopy0 = null;
        org.joda.time.LocalDateTime localDateTime1 = roundHalfEvenCopy0.roundHalfEvenCopy();
        localDateTime1.toString();
        localDateTime1.hashCode();
        org.junit.Assert.assertTrue(localDateTime1.equals(localDateTime1));
    }

    @Test
    public void test2271() throws Throwable {
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Weeks weeks2 = org.joda.time.Weeks.weeksIn(readableInterval1);
        org.joda.time.Seconds seconds3 = weeks2.toStandardSeconds();
        seconds3.toString();
        seconds3.hashCode();
        org.junit.Assert.assertTrue(seconds3.equals(seconds3));
    }

    @Test
    public void test2272() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeUtils.getZone(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone2);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.weekyear();
        property4.toString();
        property4.hashCode();
        org.junit.Assert.assertTrue(property4.equals(property4));
    }

    @Test
    public void test2273() throws Throwable {
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.ReadableInterval readableInterval3 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval2);
        org.joda.time.Months months4 = org.joda.time.Months.monthsIn(readableInterval3);
        org.joda.time.Months months5 = months4.negated();
        months5.toString();
        months5.hashCode();
        org.junit.Assert.assertTrue(months5.equals(months5));
    }

    @Test
    public void test2274() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeUtils.getZone(dateTimeZone1);
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime(1, dateTimeZone2);
        mutableDateTime3.setMinuteOfHour(1);
    }

    @Test
    public void test2275() throws Throwable {
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.hourMinuteSecondMillis();
        dateTimeFormatter0.toString();
        dateTimeFormatter0.hashCode();
        org.junit.Assert.assertTrue(dateTimeFormatter0.equals(dateTimeFormatter0));
    }

    @Test
    public void test2276() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.time();
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod(readableInstant0, readableInstant1, periodType2);
        mutablePeriod3.addMinutes(1);
    }

    @Test
    public void test2277() throws Throwable {
        org.joda.time.DateTimeField dateTimeField0 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.field.DelegatedDateTimeField delegatedDateTimeField2 = new org.joda.time.field.DelegatedDateTimeField(dateTimeField0, dateTimeFieldType1);
        delegatedDateTimeField2.toString();
        delegatedDateTimeField2.hashCode();
        org.junit.Assert.assertTrue(delegatedDateTimeField2.equals(delegatedDateTimeField2));
    }

    @Test
    public void test2278() throws Throwable {
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder0.appendFraction(dateTimeFieldType1, 1, 1);
        dateTimeFormatterBuilder2.toString();
        dateTimeFormatterBuilder2.hashCode();
        org.junit.Assert.assertTrue(dateTimeFormatterBuilder2.equals(dateTimeFormatterBuilder2));
    }

    @Test
    public void test2279() throws Throwable {
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
    }

    @Test
    public void test2280() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.MonthDay monthDay2 = new org.joda.time.MonthDay(1, 1, chronology1);
        int int3 = monthDay2.size();
    }

    @Test
    public void test2281() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInstant0, readableInstant1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getChronology(chronology2);
        org.joda.time.ReadablePartial readablePartial4 = null;
        int[] intArr5 = null;
        chronology3.validate(readablePartial4, intArr5);
    }

    @Test
    public void test2282() throws Throwable {
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Minutes minutes2 = org.joda.time.Minutes.minutesIn(readableInterval1);
        org.joda.time.Minutes minutes3 = minutes2.minus(1);
        minutes3.toString();
        minutes3.hashCode();
        org.junit.Assert.assertTrue(minutes3.equals(minutes3));
    }

    @Test
    public void test2283() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.Partial partial4 = partial2.withPeriodAdded(readablePeriod3, 1);
        partial4.toString();
        partial4.hashCode();
        org.junit.Assert.assertTrue(partial4.equals(partial4));
    }

    @Test
    public void test2284() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay(1, 1, 1, chronology1);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.Chronology chronology5 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInstant3, readableInstant4);
        org.joda.time.TimeOfDay timeOfDay6 = timeOfDay2.withChronologyRetainFields(chronology5);
        timeOfDay6.toString();
        timeOfDay6.hashCode();
        org.junit.Assert.assertTrue(timeOfDay6.equals(timeOfDay6));
    }

    @Test
    public void test2285() throws Throwable {
        org.joda.time.Instant instant0 = org.joda.time.Instant.ofEpochSecond(1);
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTimeISO();
        mutableDateTime1.toString();
        mutableDateTime1.hashCode();
        org.junit.Assert.assertTrue(mutableDateTime1.equals(mutableDateTime1));
    }

    @Test
    public void test2286() throws Throwable {
        org.joda.time.Duration duration0 = new org.joda.time.Duration(1);
        duration0.toString();
        duration0.hashCode();
        org.junit.Assert.assertTrue(duration0.equals(duration0));
    }

    @Test
    public void test2287() throws Throwable {
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.field.PreciseDurationField preciseDurationField1 = new org.joda.time.field.PreciseDurationField(durationFieldType0, 1);
        java.lang.Object object2 = null;
        boolean boolean3 = preciseDurationField1.equals(object2);
    }

    @Test
    public void test2288() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.minutes();
        org.joda.time.Period period3 = new org.joda.time.Period(readableInstant0, readableInstant1, periodType2);
        int int4 = period3.getMinutes();
    }

    @Test
    public void test2289() throws Throwable {
        org.joda.time.MonthDay.Property setCopy0 = null;
        java.lang.String string1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.MonthDay monthDay3 = setCopy0.setCopy(string1, locale2);
        monthDay3.toString();
        monthDay3.hashCode();
        org.junit.Assert.assertTrue(monthDay3.equals(monthDay3));
    }

    @Test
    public void test2290() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        java.util.Locale locale2 = null;
        java.lang.Integer integer3 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket4 = new org.joda.time.format.DateTimeParserBucket(1, chronology1, locale2, integer3, 1);
        dateTimeParserBucket4.toString();
        dateTimeParserBucket4.hashCode();
        org.junit.Assert.assertTrue(dateTimeParserBucket4.equals(dateTimeParserBucket4));
    }

    @Test
    public void test2291() throws Throwable {
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        partial0.toString();
        partial0.hashCode();
        org.junit.Assert.assertTrue(partial0.equals(partial0));
    }

    @Test
    public void test2292() throws Throwable {
        org.joda.time.field.DelegatedDateTimeField set0 = null;
        java.lang.String string1 = null;
        long long2 = set0.set(1, string1);
    }

    @Test
    public void test2293() throws Throwable {
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Seconds seconds3 = org.joda.time.Seconds.secondsIn(readableInterval2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Seconds seconds5 = org.joda.time.Seconds.standardSecondsIn(readablePeriod4);
        org.joda.time.Seconds seconds6 = seconds3.minus(seconds5);
        seconds6.toString();
        seconds6.hashCode();
        org.junit.Assert.assertTrue(seconds6.equals(seconds6));
    }

    @Test
    public void test2294() throws Throwable {
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendTwoDigitYear(1, true);
        dateTimeFormatterBuilder1.toString();
        dateTimeFormatterBuilder1.hashCode();
        org.junit.Assert.assertTrue(dateTimeFormatterBuilder1.equals(dateTimeFormatterBuilder1));
    }

    @Test
    public void test2295() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeUtils.getZone(dateTimeZone1);
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(dateTimeZone2);
        timeOfDay3.toString();
        timeOfDay3.hashCode();
        org.junit.Assert.assertTrue(timeOfDay3.equals(timeOfDay3));
    }

    @Test
    public void test2296() throws Throwable {
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay(1, 1);
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.TimeOfDay timeOfDay2 = timeOfDay0.minus(readablePeriod1);
        timeOfDay2.toString();
        timeOfDay2.hashCode();
        org.junit.Assert.assertTrue(timeOfDay2.equals(timeOfDay2));
    }

    @Test
    public void test2297() throws Throwable {
        org.joda.time.field.DividedDateTimeField dividedDateTimeField0 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField2 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField0, dateTimeFieldType1);
        remainderDateTimeField2.toString();
        remainderDateTimeField2.hashCode();
        org.junit.Assert.assertTrue(remainderDateTimeField2.equals(remainderDateTimeField2));
    }

    @Test
    public void test2298() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket3 = new org.joda.time.format.DateTimeParserBucket(1, chronology1, locale2);
        dateTimeParserBucket3.reset();
    }

    @Test
    public void test2299() throws Throwable {
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.era();
        java.lang.String string1 = null;
        org.joda.time.IllegalFieldValueException illegalFieldValueException2 = new org.joda.time.IllegalFieldValueException(dateTimeFieldType0, string1);
        java.lang.String string3 = illegalFieldValueException2.getIllegalStringValue();
        string3.toString();
        string3.hashCode();
        org.junit.Assert.assertTrue(string3.equals(string3));
    }

    @Test
    public void test2300() throws Throwable {
        org.joda.time.Seconds seconds0 = org.joda.time.Seconds.seconds(1);
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.ReadableInterval readableInterval3 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval2);
        org.joda.time.Seconds seconds4 = org.joda.time.Seconds.secondsIn(readableInterval3);
        org.joda.time.Seconds seconds5 = seconds0.minus(seconds4);
        seconds5.toString();
        seconds5.hashCode();
        org.junit.Assert.assertTrue(seconds5.equals(seconds5));
    }

    @Test
    public void test2301() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeUtils.getZone(dateTimeZone1);
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime(dateTimeZone2);
        org.joda.time.LocalTime.Property property4 = localTime3.secondOfMinute();
        property4.toString();
        property4.hashCode();
        org.junit.Assert.assertTrue(property4.equals(property4));
    }

    @Test
    public void test2302() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(1, chronology1);
        org.joda.time.DateTime dateTime3 = dateTime2.toDateTime();
        dateTime3.toString();
        dateTime3.hashCode();
        org.junit.Assert.assertTrue(dateTime3.equals(dateTime3));
    }

    @Test
    public void test2303() throws Throwable {
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.years();
        org.joda.time.field.PreciseDurationField preciseDurationField1 = new org.joda.time.field.PreciseDurationField(durationFieldType0, 1);
        long long2 = preciseDurationField1.getUnitMillis();
    }

    @Test
    public void test2304() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime(1, 1, 1, 1, 1, 1, 1, chronology1);
        mutableDateTime2.setMillis(1);
    }

    @Test
    public void test2305() throws Throwable {
        java.lang.Object object0 = null;
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.minutes();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.Chronology chronology4 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInstant2, readableInstant3);
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod(object0, periodType1, chronology4);
        mutablePeriod5.setSeconds(1);
    }

    @Test
    public void test2306() throws Throwable {
        java.lang.Object object0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInstant1, readableInstant2);
        org.joda.time.Chronology chronology4 = org.joda.time.DateTimeUtils.getChronology(chronology3);
        org.joda.time.MonthDay monthDay5 = new org.joda.time.MonthDay(object0, chronology4);
        monthDay5.toString();
        monthDay5.hashCode();
        org.junit.Assert.assertTrue(monthDay5.equals(monthDay5));
    }

    @Test
    public void test2307() throws Throwable {
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime(1, 1, 1, 1, 1, 1, 1);
        int int1 = localDateTime0.getMinuteOfHour();
    }

    @Test
    public void test2308() throws Throwable {
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.time();
        boolean boolean1 = dateTimeFormatter0.isParser();
    }

    @Test
    public void test2309() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeUtils.getZone(dateTimeZone1);
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth(dateTimeZone2);
        org.joda.time.LocalDate localDate4 = yearMonth3.toLocalDate(1);
        localDate4.toString();
        localDate4.hashCode();
        org.junit.Assert.assertTrue(localDate4.equals(localDate4));
    }

    @Test
    public void test2310() throws Throwable {
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(1, 1, 1, 1, 1, 1, dateTimeZone0);
        org.joda.time.LocalDate localDate2 = dateTime1.toLocalDate();
        localDate2.toString();
        localDate2.hashCode();
        org.junit.Assert.assertTrue(localDate2.equals(localDate2));
    }

    @Test
    public void test2311() throws Throwable {
        java.lang.Object object0 = null;
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getChronology(chronology1);
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod(object0, chronology2);
        mutablePeriod3.toString();
        mutablePeriod3.hashCode();
        org.junit.Assert.assertTrue(mutablePeriod3.equals(mutablePeriod3));
    }

    @Test
    public void test2312() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(1, 1, 1, 1, 1, 1, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.hourOfDay();
        property3.toString();
        property3.hashCode();
        org.junit.Assert.assertTrue(property3.equals(property3));
    }

    @Test
    public void test2313() throws Throwable {
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(1, 1);
        org.joda.time.DateTime dateTime2 = yearMonthDay0.toDateTimeAtCurrentTime(dateTimeZone1);
        dateTime2.toString();
        dateTime2.hashCode();
        org.junit.Assert.assertTrue(dateTime2.equals(dateTime2));
    }

    @Test
    public void test2314() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeUtils.getZone(dateTimeZone1);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(1, 1, 1, 1, 1, 1, dateTimeZone2);
        org.joda.time.DateTime dateTime4 = dateTime3.plusMillis(1);
        dateTime4.toString();
        dateTime4.hashCode();
        org.junit.Assert.assertTrue(dateTime4.equals(dateTime4));
    }

    @Test
    public void test2315() throws Throwable {
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.yearOfCentury();
        dateTimeFieldType0.toString();
        dateTimeFieldType0.hashCode();
        org.junit.Assert.assertTrue(dateTimeFieldType0.equals(dateTimeFieldType0));
    }

    @Test
    public void test2316() throws Throwable {
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.lang.String string1 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder0.appendPattern(string1);
        dateTimeFormatterBuilder2.toString();
        dateTimeFormatterBuilder2.hashCode();
        org.junit.Assert.assertTrue(dateTimeFormatterBuilder2.equals(dateTimeFormatterBuilder2));
    }

    @Test
    public void test2317() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(dateTimeZone1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.dayOfWeek();
        org.joda.time.DateTime.Property property4 = dateTime2.property(dateTimeFieldType3);
        property4.toString();
        property4.hashCode();
        org.junit.Assert.assertTrue(property4.equals(property4));
    }

    @Test
    public void test2318() throws Throwable {
        java.lang.Object object0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(object0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(1);
        org.joda.time.Interval interval3 = localDate1.toInterval(dateTimeZone2);
        interval3.toString();
        interval3.hashCode();
        org.junit.Assert.assertTrue(interval3.equals(interval3));
    }

    @Test
    public void test2319() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.yearOfCentury();
        dateTimeField2.toString();
        dateTimeField2.hashCode();
        org.junit.Assert.assertTrue(dateTimeField2.equals(dateTimeField2));
    }

    @Test
    public void test2320() throws Throwable {
        java.lang.Appendable appendable0 = null;
        org.joda.time.format.FormatUtils.appendUnpaddedInteger(appendable0, 1);
    }

    @Test
    public void test2321() throws Throwable {
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.centuryOfEra();
        dateTimeFieldType0.toString();
        dateTimeFieldType0.hashCode();
        org.junit.Assert.assertTrue(dateTimeFieldType0.equals(dateTimeFieldType0));
    }

    @Test
    public void test2322() throws Throwable {
        java.lang.Object object0 = null;
        org.joda.time.PeriodType periodType1 = null;
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(object0, periodType1);
        mutablePeriod2.setValue(1, 1);
    }

    @Test
    public void test2323() throws Throwable {
        org.joda.time.field.UnsupportedDateTimeField set0 = null;
        org.joda.time.ReadablePartial readablePartial1 = null;
        int[] intArr2 = null;
        int[] intArr3 = set0.set(readablePartial1, 1, intArr2, 1);
        intArr3.toString();
        intArr3.hashCode();
        org.junit.Assert.assertTrue(intArr3.equals(intArr3));
    }

    @Test
    public void test2324() throws Throwable {
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.minuteOfHour();
        property1.toString();
        property1.hashCode();
        org.junit.Assert.assertTrue(property1.equals(property1));
    }

    @Test
    public void test2325() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(chronology1);
        org.joda.time.DateTime dateTime3 = dateTime2.minusMonths(1);
        dateTime3.toString();
        dateTime3.hashCode();
        org.junit.Assert.assertTrue(dateTime3.equals(dateTime3));
    }

    @Test
    public void test2326() throws Throwable {
        org.joda.time.DateTime.Property getField0 = null;
        org.joda.time.DateTimeField dateTimeField1 = getField0.getField();
        dateTimeField1.toString();
        dateTimeField1.hashCode();
        org.junit.Assert.assertTrue(dateTimeField1.equals(dateTimeField1));
    }

    @Test
    public void test2327() throws Throwable {
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.fullTime();
        dateTimeFormatter0.toString();
        dateTimeFormatter0.hashCode();
        org.junit.Assert.assertTrue(dateTimeFormatter0.equals(dateTimeFormatter0));
    }

    @Test
    public void test2328() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.chrono.StrictChronology strictChronology2 = org.joda.time.chrono.StrictChronology.getInstance(chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(1, 1);
        org.joda.time.Chronology chronology4 = strictChronology2.withZone(dateTimeZone3);
        chronology4.toString();
        chronology4.hashCode();
        org.junit.Assert.assertTrue(chronology4.equals(chronology4));
    }

    @Test
    public void test2329() throws Throwable {
        java.lang.String string0 = null;
        org.joda.time.Years years1 = org.joda.time.Years.parseYears(string0);
        org.joda.time.PeriodType periodType2 = years1.getPeriodType();
        periodType2.toString();
        periodType2.hashCode();
        org.junit.Assert.assertTrue(periodType2.equals(periodType2));
    }

    @Test
    public void test2330() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.MutableDateTime mutableDateTime2 = org.joda.time.MutableDateTime.now(chronology1);
        mutableDateTime2.setWeekOfWeekyear(1);
    }

    @Test
    public void test2331() throws Throwable {
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder0.appendFixedSignedDecimal(dateTimeFieldType1, 1);
        dateTimeFormatterBuilder2.toString();
        dateTimeFormatterBuilder2.hashCode();
        org.junit.Assert.assertTrue(dateTimeFormatterBuilder2.equals(dateTimeFormatterBuilder2));
    }

    @Test
    public void test2332() throws Throwable {
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInstant1, readableInstant2);
        boolean boolean4 = dateTimeFieldType0.isSupported(chronology3);
    }

    @Test
    public void test2333() throws Throwable {
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate(1);
        org.joda.time.LocalDate localDate1 = localDate0.plusMonths(1);
        localDate1.toString();
        localDate1.hashCode();
        org.junit.Assert.assertTrue(localDate1.equals(localDate1));
    }

    @Test
    public void test2334() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay(1, chronology1);
        org.joda.time.YearMonthDay.Property property3 = yearMonthDay2.monthOfYear();
        property3.toString();
        property3.hashCode();
        org.junit.Assert.assertTrue(property3.equals(property3));
    }

    @Test
    public void test2335() throws Throwable {
        org.joda.time.field.ScaledDurationField getUnitMillis0 = null;
        long long1 = getUnitMillis0.getUnitMillis();
    }

    @Test
    public void test2336() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeUtils.getZone(dateTimeZone1);
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime(dateTimeZone2);
        org.joda.time.LocalTime localTime4 = localTime3.withMillisOfSecond(1);
        localTime4.toString();
        localTime4.hashCode();
        org.junit.Assert.assertTrue(localTime4.equals(localTime4));
    }

    @Test
    public void test2337() throws Throwable {
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime(1, 1, 1, 1, 1, 1);
        localDateTime0.toString();
        localDateTime0.hashCode();
        org.junit.Assert.assertTrue(localDateTime0.equals(localDateTime0));
    }

    @Test
    public void test2338() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime(1, chronology1);
        mutableDateTime2.addMillis(1);
    }

    @Test
    public void test2339() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeUtils.getZone(dateTimeZone1);
        org.joda.time.LocalDate localDate3 = org.joda.time.LocalDate.now(dateTimeZone2);
        org.joda.time.ReadablePartial readablePartial4 = null;
        org.joda.time.LocalDate localDate5 = localDate3.withFields(readablePartial4);
        localDate5.toString();
        localDate5.hashCode();
        org.junit.Assert.assertTrue(localDate5.equals(localDate5));
    }

    @Test
    public void test2340() throws Throwable {
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.standard();
        org.joda.time.DurationFieldType durationFieldType1 = periodType0.getFieldType(1);
        durationFieldType1.toString();
        durationFieldType1.hashCode();
        org.junit.Assert.assertTrue(durationFieldType1.equals(durationFieldType1));
    }

    @Test
    public void test2341() throws Throwable {
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.field.UnsupportedDurationField unsupportedDurationField1 = org.joda.time.field.UnsupportedDurationField.getInstance(durationFieldType0);
        int int2 = unsupportedDurationField1.getDifference(1, 1);
    }

    @Test
    public void test2342() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime(chronology1);
        mutableDateTime2.add(1);
    }

    @Test
    public void test2343() throws Throwable {
        org.joda.time.DateTimeField dateTimeField0 = null;
        org.joda.time.DurationField durationField1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField3 = new org.joda.time.field.RemainderDateTimeField(dateTimeField0, durationField1, dateTimeFieldType2, 1);
        remainderDateTimeField3.toString();
        remainderDateTimeField3.hashCode();
        org.junit.Assert.assertTrue(remainderDateTimeField3.equals(remainderDateTimeField3));
    }

    @Test
    public void test2344() throws Throwable {
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.standard();
        org.joda.time.Period period1 = new org.joda.time.Period(1, 1, 1, 1, 1, 1, 1, 1, periodType0);
        org.joda.time.Period period2 = period1.plusSeconds(1);
        period2.toString();
        period2.hashCode();
        org.junit.Assert.assertTrue(period2.equals(period2));
    }

    @Test
    public void test2345() throws Throwable {
        org.joda.time.YearMonth yearMonth0 = new org.joda.time.YearMonth(1);
        org.joda.time.LocalDate localDate1 = yearMonth0.toLocalDate(1);
        localDate1.toString();
        localDate1.hashCode();
        org.junit.Assert.assertTrue(localDate1.equals(localDate1));
    }

    @Test
    public void test2346() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(dateTimeZone1);
        org.joda.time.DurationFieldType durationFieldType3 = org.joda.time.DurationFieldType.centuries();
        boolean boolean4 = localDateTime2.isSupported(durationFieldType3);
    }

    @Test
    public void test2347() throws Throwable {
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime(1);
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(1, 1);
        mutableDateTime0.setZone(dateTimeZone1);
    }

    @Test
    public void test2348() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeUtils.getZone(dateTimeZone1);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(1, 1, 1, 1, 1, dateTimeZone2);
        org.joda.time.DateTime dateTime4 = dateTime3.minusWeeks(1);
        dateTime4.toString();
        dateTime4.hashCode();
        org.junit.Assert.assertTrue(dateTime4.equals(dateTime4));
    }

    @Test
    public void test2349() throws Throwable {
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.field.PreciseDurationField preciseDurationField1 = new org.joda.time.field.PreciseDurationField(durationFieldType0, 1);
        long long2 = preciseDurationField1.getValueAsLong(1, 1);
    }

    @Test
    public void test2350() throws Throwable {
        int int0 = org.joda.time.field.FieldUtils.safeMultiply(1, 1);
    }

    @Test
    public void test2351() throws Throwable {
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate(1);
        int int1 = localDate0.getYearOfCentury();
    }

    @Test
    public void test2352() throws Throwable {
        org.joda.time.Years years0 = org.joda.time.Years.years(1);
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Years years3 = org.joda.time.Years.yearsIn(readableInterval2);
        boolean boolean4 = years0.isLessThan(years3);
    }

    @Test
    public void test2353() throws Throwable {
        java.lang.Object object0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(object0);
        org.joda.time.YearMonthDay yearMonthDay2 = yearMonthDay1.minusYears(1);
        yearMonthDay2.toString();
        yearMonthDay2.hashCode();
        org.junit.Assert.assertTrue(yearMonthDay2.equals(yearMonthDay2));
    }

    @Test
    public void test2354() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.YearMonth yearMonth2 = new org.joda.time.YearMonth(1, 1, chronology1);
        int int3 = yearMonth2.getYear();
    }

    @Test
    public void test2355() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now(chronology1);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime2.withMillisOfSecond(1);
        localDateTime3.toString();
        localDateTime3.hashCode();
        org.junit.Assert.assertTrue(localDateTime3.equals(localDateTime3));
    }

    @Test
    public void test2356() throws Throwable {
        java.lang.Object object0 = null;
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Period period2 = new org.joda.time.Period(object0, periodType1);
        org.joda.time.Period period3 = period2.normalizedStandard();
        period3.toString();
        period3.hashCode();
        org.junit.Assert.assertTrue(period3.equals(period3));
    }

    @Test
    public void test2357() throws Throwable {
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.ReadableInterval readableInterval3 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval2);
        org.joda.time.Minutes minutes4 = org.joda.time.Minutes.minutesIn(readableInterval3);
        org.joda.time.PeriodType periodType5 = minutes4.getPeriodType();
        periodType5.toString();
        periodType5.hashCode();
        org.junit.Assert.assertTrue(periodType5.equals(periodType5));
    }

    @Test
    public void test2358() throws Throwable {
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.minutes(1);
        org.joda.time.Duration duration1 = minutes0.toStandardDuration();
        duration1.toString();
        duration1.hashCode();
        org.junit.Assert.assertTrue(duration1.equals(duration1));
    }

    @Test
    public void test2359() throws Throwable {
        java.lang.String string0 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = org.joda.time.format.ISODateTimeFormat.dateHourMinuteSecond();
        org.joda.time.Instant instant2 = org.joda.time.Instant.parse(string0, dateTimeFormatter1);
        instant2.toString();
        instant2.hashCode();
        org.junit.Assert.assertTrue(instant2.equals(instant2));
    }

    @Test
    public void test2360() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        long long2 = chronology1.getDateTimeMillis(1, 1, 1, 1);
    }

    @Test
    public void test2361() throws Throwable {
        java.lang.Object object0 = null;
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.Chronology chronology4 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInstant2, readableInstant3);
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod(object0, periodType1, chronology4);
        int int6 = mutablePeriod5.getYears();
    }

    @Test
    public void test2362() throws Throwable {
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.minutes(1);
        int int1 = minutes0.getMinutes();
    }

    @Test
    public void test2363() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(1, chronology1);
        localTime2.toString();
        localTime2.hashCode();
        org.junit.Assert.assertTrue(localTime2.equals(localTime2));
    }

    @Test
    public void test2364() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateMidnight dateMidnight2 = org.joda.time.DateMidnight.now(chronology1);
        dateMidnight2.toString();
        dateMidnight2.hashCode();
        org.junit.Assert.assertTrue(dateMidnight2.equals(dateMidnight2));
    }

    @Test
    public void test2365() throws Throwable {
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate(1, 1, 1);
        org.joda.time.DurationFieldType durationFieldType1 = org.joda.time.DurationFieldType.seconds();
        boolean boolean2 = localDate0.isSupported(durationFieldType1);
    }

    @Test
    public void test2366() throws Throwable {
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendTwoDigitWeekyear(1);
        dateTimeFormatterBuilder1.toString();
        dateTimeFormatterBuilder1.hashCode();
        org.junit.Assert.assertTrue(dateTimeFormatterBuilder1.equals(dateTimeFormatterBuilder1));
    }

    @Test
    public void test2367() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = org.joda.time.LocalDate.now(dateTimeZone1);
        org.joda.time.DateTime dateTime3 = localDate2.toDateTimeAtStartOfDay();
        dateTime3.toString();
        dateTime3.hashCode();
        org.junit.Assert.assertTrue(dateTime3.equals(dateTime3));
    }

    @Test
    public void test2368() throws Throwable {
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.dateHourMinuteSecondMillis();
        java.lang.String string1 = null;
        org.joda.time.LocalDateTime localDateTime2 = dateTimeFormatter0.parseLocalDateTime(string1);
        localDateTime2.toString();
        localDateTime2.hashCode();
        org.junit.Assert.assertTrue(localDateTime2.equals(localDateTime2));
    }

    @Test
    public void test2369() throws Throwable {
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.hour();
        java.util.Locale locale1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withLocale(locale1);
        dateTimeFormatter2.toString();
        dateTimeFormatter2.hashCode();
        org.junit.Assert.assertTrue(dateTimeFormatter2.equals(dateTimeFormatter2));
    }

    @Test
    public void test2370() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(1, chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        boolean boolean4 = localDateTime2.isSupported(dateTimeFieldType3);
    }

    @Test
    public void test2371() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(1, 1, 1, 1, 1, 1, 1, chronology1);
        org.joda.time.ReadablePartial readablePartial3 = null;
        int int4 = localDateTime2.compareTo(readablePartial3);
    }

    @Test
    public void test2372() throws Throwable {
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant1);
        boolean boolean3 = durationFieldType0.isSupported(chronology2);
    }

    @Test
    public void test2373() throws Throwable {
        java.lang.String string0 = null;
        org.joda.time.Years years1 = org.joda.time.Years.parseYears(string0);
        org.joda.time.Years years2 = years1.multipliedBy(1);
        years2.toString();
        years2.hashCode();
        org.junit.Assert.assertTrue(years2.equals(years2));
    }

    @Test
    public void test2374() throws Throwable {
        org.joda.time.Duration duration0 = org.joda.time.Duration.standardHours(1);
        long long1 = duration0.getStandardSeconds();
    }

    @Test
    public void test2375() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        long long1 = org.joda.time.DateTimeUtils.getInstantMillis(readableInstant0);
    }

    @Test
    public void test2376() throws Throwable {
        org.joda.time.Instant instant0 = new org.joda.time.Instant(1);
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.Instant instant2 = instant0.plus(readableDuration1);
        instant2.toString();
        instant2.hashCode();
        org.junit.Assert.assertTrue(instant2.equals(instant2));
    }

    @Test
    public void test2377() throws Throwable {
        org.joda.time.field.DelegatedDateTimeField getAsText0 = null;
        org.joda.time.ReadablePartial readablePartial1 = null;
        java.util.Locale locale2 = null;
        java.lang.String string3 = getAsText0.getAsText(readablePartial1, locale2);
        string3.toString();
        string3.hashCode();
        org.junit.Assert.assertTrue(string3.equals(string3));
    }

    @Test
    public void test2378() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay(1, 1, 1, chronology1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.TimeOfDay timeOfDay4 = timeOfDay2.minus(readablePeriod3);
        timeOfDay4.toString();
        timeOfDay4.hashCode();
        org.junit.Assert.assertTrue(timeOfDay4.equals(timeOfDay4));
    }

    @Test
    public void test2379() throws Throwable {
        org.joda.time.Instant instant0 = org.joda.time.Instant.ofEpochSecond(1);
        org.joda.time.Instant instant1 = instant0.withMillis(1);
        instant1.toString();
        instant1.hashCode();
        org.junit.Assert.assertTrue(instant1.equals(instant1));
    }

    @Test
    public void test2380() throws Throwable {
        org.joda.time.YearMonth.Property setCopy0 = null;
        java.lang.String string1 = null;
        org.joda.time.YearMonth yearMonth2 = setCopy0.setCopy(string1);
        yearMonth2.toString();
        yearMonth2.hashCode();
        org.junit.Assert.assertTrue(yearMonth2.equals(yearMonth2));
    }

    @Test
    public void test2381() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay(1, 1, 1, chronology1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.TimeOfDay timeOfDay4 = timeOfDay2.minus(readablePeriod3);
        timeOfDay4.toString();
        timeOfDay4.hashCode();
        org.junit.Assert.assertTrue(timeOfDay4.equals(timeOfDay4));
    }

    @Test
    public void test2382() throws Throwable {
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.ReadableInterval readableInterval3 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval2);
        org.joda.time.Minutes minutes4 = org.joda.time.Minutes.minutesIn(readableInterval3);
        org.joda.time.DurationFieldType durationFieldType5 = minutes4.getFieldType();
        durationFieldType5.toString();
        durationFieldType5.hashCode();
        org.junit.Assert.assertTrue(durationFieldType5.equals(durationFieldType5));
    }

    @Test
    public void test2383() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.yearOfEra();
        dateTimeField2.toString();
        dateTimeField2.hashCode();
        org.junit.Assert.assertTrue(dateTimeField2.equals(dateTimeField2));
    }

    @Test
    public void test2384() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInstant0, readableInstant1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getChronology(chronology2);
        org.joda.time.DateMidnight dateMidnight4 = org.joda.time.DateMidnight.now(chronology3);
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.plus(readableDuration5);
        dateMidnight6.toString();
        dateMidnight6.hashCode();
        org.junit.Assert.assertTrue(dateMidnight6.equals(dateMidnight6));
    }

    @Test
    public void test2385() throws Throwable {
        org.joda.time.Period period0 = org.joda.time.Period.years(1);
        org.joda.time.Period period1 = period0.normalizedStandard();
        period1.toString();
        period1.hashCode();
        org.junit.Assert.assertTrue(period1.equals(period1));
    }

    @Test
    public void test2386() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.fromMillisOfDay(1, chronology1);
        localTime2.toString();
        localTime2.hashCode();
        org.junit.Assert.assertTrue(localTime2.equals(localTime2));
    }

    @Test
    public void test2387() throws Throwable {
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.standard();
        org.joda.time.Period period1 = new org.joda.time.Period(1, 1, 1, 1, 1, 1, 1, 1, periodType0);
        org.joda.time.Period period2 = period1.withSeconds(1);
        period2.toString();
        period2.hashCode();
        org.junit.Assert.assertTrue(period2.equals(period2));
    }

    @Test
    public void test2388() throws Throwable {
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.dateTimeNoMillis();
        java.lang.StringBuilder stringBuilder1 = null;
        dateTimeFormatter0.printTo(stringBuilder1, 1);
    }

    @Test
    public void test2389() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInstant0, readableInstant1);
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay3.withField(dateTimeFieldType4, 1);
        timeOfDay5.toString();
        timeOfDay5.hashCode();
        org.junit.Assert.assertTrue(timeOfDay5.equals(timeOfDay5));
    }

    @Test
    public void test2390() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Period period2 = new org.joda.time.Period(readableInstant0, readableInstant1);
        org.joda.time.DurationFieldType durationFieldType3 = org.joda.time.DurationFieldType.eras();
        org.joda.time.Period period4 = period2.withField(durationFieldType3, 1);
        period4.toString();
        period4.hashCode();
        org.junit.Assert.assertTrue(period4.equals(period4));
    }

    @Test
    public void test2391() throws Throwable {
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.Instant instant2 = instant0.withDurationAdded(readableDuration1, 1);
        instant2.toString();
        instant2.hashCode();
        org.junit.Assert.assertTrue(instant2.equals(instant2));
    }

    @Test
    public void test2392() throws Throwable {
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfHour();
        java.lang.Number number1 = null;
        java.lang.Number number2 = null;
        java.lang.Number number3 = null;
        java.lang.String string4 = null;
        org.joda.time.IllegalFieldValueException illegalFieldValueException5 = new org.joda.time.IllegalFieldValueException(dateTimeFieldType0, number1, number2, number3, string4);
        org.joda.time.DurationFieldType durationFieldType6 = illegalFieldValueException5.getDurationFieldType();
        durationFieldType6.toString();
        durationFieldType6.hashCode();
        org.junit.Assert.assertTrue(durationFieldType6.equals(durationFieldType6));
    }

    @Test
    public void test2393() throws Throwable {
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime(1, 1, 1, 1, 1);
        localDateTime0.toString();
        localDateTime0.hashCode();
        org.junit.Assert.assertTrue(localDateTime0.equals(localDateTime0));
    }

    @Test
    public void test2394() throws Throwable {
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay(1, 1, 1);
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInstant1, readableInstant2);
        org.joda.time.Chronology chronology4 = org.joda.time.DateTimeUtils.getChronology(chronology3);
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay0.withChronologyRetainFields(chronology4);
        timeOfDay5.toString();
        timeOfDay5.hashCode();
        org.junit.Assert.assertTrue(timeOfDay5.equals(timeOfDay5));
    }

    @Test
    public void test2395() throws Throwable {
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.year();
        property1.toString();
        property1.hashCode();
        org.junit.Assert.assertTrue(property1.equals(property1));
    }

    @Test
    public void test2396() throws Throwable {
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(1);
        org.joda.time.Chronology chronology2 = copticChronology0.withZone(dateTimeZone1);
        chronology2.toString();
        chronology2.hashCode();
        org.junit.Assert.assertTrue(chronology2.equals(chronology2));
    }

    @Test
    public void test2397() throws Throwable {
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Years years2 = org.joda.time.Years.yearsIn(readableInterval1);
        org.joda.time.Years years3 = years2.negated();
        years3.toString();
        years3.hashCode();
        org.junit.Assert.assertTrue(years3.equals(years3));
    }

    @Test
    public void test2398() throws Throwable {
        org.joda.time.Period period0 = org.joda.time.Period.years(1);
        org.joda.time.Period period1 = period0.plusYears(1);
        period1.toString();
        period1.hashCode();
        org.junit.Assert.assertTrue(period1.equals(period1));
    }

    @Test
    public void test2399() throws Throwable {
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendMillis();
        periodFormatterBuilder1.toString();
        periodFormatterBuilder1.hashCode();
        org.junit.Assert.assertTrue(periodFormatterBuilder1.equals(periodFormatterBuilder1));
    }

    @Test
    public void test2400() throws Throwable {
        java.lang.Object object0 = null;
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(object0, chronology1);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime2.minusMinutes(1);
        localDateTime3.toString();
        localDateTime3.hashCode();
        org.junit.Assert.assertTrue(localDateTime3.equals(localDateTime3));
    }

    @Test
    public void test2401() throws Throwable {
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.weekyear();
        dateTimeFormatter0.toString();
        dateTimeFormatter0.hashCode();
        org.junit.Assert.assertTrue(dateTimeFormatter0.equals(dateTimeFormatter0));
    }

    @Test
    public void test2402() throws Throwable {
        org.joda.time.field.DelegatedDateTimeField set0 = null;
        long long1 = set0.set(1, 1);
    }

    @Test
    public void test2403() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone2 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone3 = cachedDateTimeZone2.getUncachedZone();
        dateTimeZone3.toString();
        dateTimeZone3.hashCode();
        org.junit.Assert.assertTrue(dateTimeZone3.equals(dateTimeZone3));
    }

    @Test
    public void test2404() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Partial partial4 = partial2.withField(dateTimeFieldType3, 1);
        partial4.toString();
        partial4.hashCode();
        org.junit.Assert.assertTrue(partial4.equals(partial4));
    }

    @Test
    public void test2405() throws Throwable {
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.weekyearWeek();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear(1);
        dateTimeFormatter1.toString();
        dateTimeFormatter1.hashCode();
        org.junit.Assert.assertTrue(dateTimeFormatter1.equals(dateTimeFormatter1));
    }

    @Test
    public void test2406() throws Throwable {
        org.joda.time.field.UnsupportedDateTimeField set0 = null;
        java.lang.String string1 = null;
        java.util.Locale locale2 = null;
        long long3 = set0.set(1, string1, locale2);
    }

    @Test
    public void test2407() throws Throwable {
        java.lang.Object object0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(object0);
        org.joda.time.LocalDate localDate2 = localDate1.withMonthOfYear(1);
        localDate2.toString();
        localDate2.hashCode();
        org.junit.Assert.assertTrue(localDate2.equals(localDate2));
    }

    @Test
    public void test2408() throws Throwable {
        org.joda.time.tz.ZoneInfoProvider zoneInfoProvider0 = new org.joda.time.tz.ZoneInfoProvider();
        java.util.Set<java.lang.String> set1 = zoneInfoProvider0.getAvailableIDs();
        set1.toString();
        set1.hashCode();
        org.junit.Assert.assertTrue(set1.equals(set1));
    }

    @Test
    public void test2409() throws Throwable {
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.mediumDate();
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInstant1, readableInstant2);
        org.joda.time.Chronology chronology4 = org.joda.time.DateTimeUtils.getChronology(chronology3);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter0.withChronology(chronology4);
        dateTimeFormatter5.toString();
        dateTimeFormatter5.hashCode();
        org.junit.Assert.assertTrue(dateTimeFormatter5.equals(dateTimeFormatter5));
    }

    @Test
    public void test2410() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.LocalDate localDate2 = org.joda.time.LocalDate.now(chronology1);
        int int3 = localDate2.size();
    }

    @Test
    public void test2411() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInstant0, readableInstant1);
        org.joda.time.DateTimeField dateTimeField3 = null;
        org.joda.time.field.SkipUndoDateTimeField skipUndoDateTimeField4 = new org.joda.time.field.SkipUndoDateTimeField(chronology2, dateTimeField3, 1);
        skipUndoDateTimeField4.toString();
        skipUndoDateTimeField4.hashCode();
        org.junit.Assert.assertTrue(skipUndoDateTimeField4.equals(skipUndoDateTimeField4));
    }

    @Test
    public void test2412() throws Throwable {
        org.joda.time.Period period0 = new org.joda.time.Period(1);
        period0.toString();
        period0.hashCode();
        org.junit.Assert.assertTrue(period0.equals(period0));
    }

    @Test
    public void test2413() throws Throwable {
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant1);
        org.joda.time.Partial partial3 = new org.joda.time.Partial(dateTimeFieldType0, 1, chronology2);
        int int4 = partial3.getValue(1);
    }

    @Test
    public void test2414() throws Throwable {
        org.joda.time.Duration duration0 = org.joda.time.Duration.standardHours(1);
        org.joda.time.Duration duration1 = duration0.toDuration();
        duration1.toString();
        duration1.hashCode();
        org.junit.Assert.assertTrue(duration1.equals(duration1));
    }

    @Test
    public void test2415() throws Throwable {
        java.lang.Object object0 = null;
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime(object0, dateTimeZone2);
        org.joda.time.ReadablePartial readablePartial4 = null;
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withFields(readablePartial4);
        localDateTime5.toString();
        localDateTime5.hashCode();
        org.junit.Assert.assertTrue(localDateTime5.equals(localDateTime5));
    }

    @Test
    public void test2416() throws Throwable {
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser[] dateTimeParserArr2 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder0.append(dateTimePrinter1, dateTimeParserArr2);
        dateTimeFormatterBuilder3.toString();
        dateTimeFormatterBuilder3.hashCode();
        org.junit.Assert.assertTrue(dateTimeFormatterBuilder3.equals(dateTimeFormatterBuilder3));
    }

    @Test
    public void test2417() throws Throwable {
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate(1, 1, 1);
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getChronology(chronology1);
        org.joda.time.LocalTime localTime3 = org.joda.time.LocalTime.now(chronology2);
        org.joda.time.LocalDateTime localDateTime4 = localDate0.toLocalDateTime(localTime3);
        localDateTime4.toString();
        localDateTime4.hashCode();
        org.junit.Assert.assertTrue(localDateTime4.equals(localDateTime4));
    }

    @Test
    public void test2418() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime(1, 1, 1, 1, 1, 1, 1, chronology1);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.Chronology chronology4 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant3);
        mutableDateTime2.setChronology(chronology4);
    }

    @Test
    public void test2419() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInstant0, readableInstant1);
        long long3 = chronology2.getDateTimeMillis(1, 1, 1, 1);
    }

    @Test
    public void test2420() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInstant0, readableInstant1);
        org.joda.time.LocalTime localTime3 = org.joda.time.LocalTime.now(chronology2);
        int int4 = localTime3.getSecondOfMinute();
    }

    @Test
    public void test2421() throws Throwable {
        java.lang.Object object0 = null;
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getChronology(chronology1);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(object0, chronology2);
        org.joda.time.DateTime dateTime4 = dateTime3.withMillisOfSecond(1);
        dateTime4.toString();
        dateTime4.hashCode();
        org.junit.Assert.assertTrue(dateTime4.equals(dateTime4));
    }

    @Test
    public void test2422() throws Throwable {
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.ReadableInterval readableInterval3 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval2);
        org.joda.time.Minutes minutes4 = org.joda.time.Minutes.minutesIn(readableInterval3);
        org.joda.time.Days days5 = minutes4.toStandardDays();
        days5.toString();
        days5.hashCode();
        org.junit.Assert.assertTrue(days5.equals(days5));
    }

    @Test
    public void test2423() throws Throwable {
        org.joda.time.DateTimeField getMaximumValue0 = null;
        org.joda.time.ReadablePartial readablePartial1 = null;
        int int2 = getMaximumValue0.getMaximumValue(readablePartial1);
    }

    @Test
    public void test2424() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Period period2 = new org.joda.time.Period(readableInstant0, readableInstant1);
        org.joda.time.DurationFieldType durationFieldType3 = org.joda.time.DurationFieldType.hours();
        org.joda.time.Period period4 = period2.withFieldAdded(durationFieldType3, 1);
        period4.toString();
        period4.hashCode();
        org.junit.Assert.assertTrue(period4.equals(period4));
    }

    @Test
    public void test2425() throws Throwable {
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.days();
        org.joda.time.Period period1 = new org.joda.time.Period(1, 1, periodType0);
        period1.toString();
        period1.hashCode();
        org.junit.Assert.assertTrue(period1.equals(period1));
    }

    @Test
    public void test2426() throws Throwable {
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendTwoDigitYear(1);
        dateTimeFormatterBuilder1.toString();
        dateTimeFormatterBuilder1.hashCode();
        org.junit.Assert.assertTrue(dateTimeFormatterBuilder1.equals(dateTimeFormatterBuilder1));
    }

    @Test
    public void test2427() throws Throwable {
        org.joda.time.format.PeriodFormatter periodFormatter0 = org.joda.time.format.ISOPeriodFormat.standard();
        java.util.Locale locale1 = periodFormatter0.getLocale();
        locale1.toString();
        locale1.hashCode();
        org.junit.Assert.assertTrue(locale1.equals(locale1));
    }

    @Test
    public void test2428() throws Throwable {
        java.io.Writer writer0 = null;
        org.joda.time.format.FormatUtils.writePaddedInteger(writer0, 1, 1);
    }

    @Test
    public void test2429() throws Throwable {
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.hour();
        boolean boolean1 = dateTimeFormatter0.isPrinter();
    }

    @Test
    public void test2430() throws Throwable {
        java.lang.Object object0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInstant1, readableInstant2);
        org.joda.time.MutableInterval mutableInterval4 = new org.joda.time.MutableInterval(object0, chronology3);
        org.joda.time.ReadableDuration readableDuration5 = null;
        mutableInterval4.setDurationAfterStart(readableDuration5);
    }

    @Test
    public void test2431() throws Throwable {
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.Instant instant2 = instant0.plus(readableDuration1);
        instant2.toString();
        instant2.hashCode();
        org.junit.Assert.assertTrue(instant2.equals(instant2));
    }

    @Test
    public void test2432() throws Throwable {
        java.lang.Object object0 = null;
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getChronology(chronology1);
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(object0, chronology2);
        org.joda.time.DurationFieldType durationFieldType4 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.withFieldAdded(durationFieldType4, 1);
        dateMidnight5.toString();
        dateMidnight5.hashCode();
        org.junit.Assert.assertTrue(dateMidnight5.equals(dateMidnight5));
    }

    @Test
    public void test2433() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Duration duration2 = new org.joda.time.Duration(readableInstant0, readableInstant1);
        duration2.toString();
        duration2.hashCode();
        org.junit.Assert.assertTrue(duration2.equals(duration2));
    }

    @Test
    public void test2434() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInstant0, readableInstant1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getChronology(chronology2);
        java.util.Locale locale4 = null;
        java.lang.Integer integer5 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket(1, chronology3, locale4, integer5, 1);
        org.joda.time.Chronology chronology7 = dateTimeParserBucket6.getChronology();
        chronology7.toString();
        chronology7.hashCode();
        org.junit.Assert.assertTrue(chronology7.equals(chronology7));
    }

    @Test
    public void test2435() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInstant0, readableInstant1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getChronology(chronology2);
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay(1, 1, 1, 1, chronology3);
        timeOfDay4.toString();
        timeOfDay4.hashCode();
        org.junit.Assert.assertTrue(timeOfDay4.equals(timeOfDay4));
    }

    @Test
    public void test2436() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GregorianChronology gregorianChronology2 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone1);
        org.joda.time.Chronology chronology3 = gregorianChronology2.withUTC();
        chronology3.toString();
        chronology3.hashCode();
        org.junit.Assert.assertTrue(chronology3.equals(chronology3));
    }

    @Test
    public void test2437() throws Throwable {
        org.joda.time.ReadablePeriod readablePeriod0 = null;
        org.joda.time.Hours hours1 = org.joda.time.Hours.standardHoursIn(readablePeriod0);
        org.joda.time.ReadableInterval readableInterval2 = null;
        org.joda.time.ReadableInterval readableInterval3 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval2);
        org.joda.time.ReadableInterval readableInterval4 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval3);
        org.joda.time.Hours hours5 = org.joda.time.Hours.hoursIn(readableInterval4);
        boolean boolean6 = hours1.isLessThan(hours5);
    }

    @Test
    public void test2438() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableInstant0, readablePeriod1);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        mutableInterval2.setInterval(readableInstant3, readableInstant4);
    }

    @Test
    public void test2439() throws Throwable {
        java.lang.String string0 = null;
        org.joda.time.Hours hours1 = org.joda.time.Hours.parseHours(string0);
        org.joda.time.DurationFieldType durationFieldType2 = hours1.getFieldType();
        durationFieldType2.toString();
        durationFieldType2.hashCode();
        org.junit.Assert.assertTrue(durationFieldType2.equals(durationFieldType2));
    }

    @Test
    public void test2440() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(1, chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.LocalDate.Property property4 = localDate2.property(dateTimeFieldType3);
        property4.toString();
        property4.hashCode();
        org.junit.Assert.assertTrue(property4.equals(property4));
    }

    @Test
    public void test2441() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeUtils.getZone(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone2);
        java.util.TimeZone timeZone4 = null;
        java.util.Date date5 = localDateTime3.toDate(timeZone4);
        date5.toString();
        date5.hashCode();
        org.junit.Assert.assertTrue(date5.equals(date5));
    }

    @Test
    public void test2442() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(1, 1, 1, 1, 1, 1, 1, chronology1);
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.DateTime dateTime4 = dateTime2.plus(readableDuration3);
        dateTime4.toString();
        dateTime4.hashCode();
        org.junit.Assert.assertTrue(dateTime4.equals(dateTime4));
    }

    @Test
    public void test2443() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeUtils.getZone(dateTimeZone1);
        org.joda.time.LocalDate localDate3 = org.joda.time.LocalDate.now(dateTimeZone2);
        org.joda.time.LocalDate localDate4 = localDate3.withYearOfEra(1);
        localDate4.toString();
        localDate4.hashCode();
        org.junit.Assert.assertTrue(localDate4.equals(localDate4));
    }

    @Test
    public void test2444() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInstant0, readableInstant1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getChronology(chronology2);
        org.joda.time.DateMidnight dateMidnight4 = org.joda.time.DateMidnight.now(chronology3);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight4.plus(1);
        dateMidnight5.toString();
        dateMidnight5.hashCode();
        org.junit.Assert.assertTrue(dateMidnight5.equals(dateMidnight5));
    }

    @Test
    public void test2445() throws Throwable {
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Weeks weeks3 = org.joda.time.Weeks.weeksIn(readableInterval2);
        org.joda.time.PeriodType periodType4 = weeks3.getPeriodType();
        periodType4.toString();
        periodType4.hashCode();
        org.junit.Assert.assertTrue(periodType4.equals(periodType4));
    }

    @Test
    public void test2446() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        java.util.Locale locale2 = null;
        java.lang.Integer integer3 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket4 = new org.joda.time.format.DateTimeParserBucket(1, chronology1, locale2, integer3, 1);
        java.lang.Integer integer5 = null;
        dateTimeParserBucket4.setPivotYear(integer5);
    }

    @Test
    public void test2447() throws Throwable {
        org.joda.time.format.PeriodFormatter periodFormatter0 = org.joda.time.format.ISOPeriodFormat.alternateExtendedWithWeeks();
        org.joda.time.format.PeriodParser periodParser1 = periodFormatter0.getParser();
        periodParser1.toString();
        periodParser1.hashCode();
        org.junit.Assert.assertTrue(periodParser1.equals(periodParser1));
    }

    @Test
    public void test2448() throws Throwable {
        org.joda.time.format.PeriodFormatter periodFormatter0 = org.joda.time.format.ISOPeriodFormat.alternateExtendedWithWeeks();
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        java.lang.String string2 = periodFormatter0.print(readablePeriod1);
        string2.toString();
        string2.hashCode();
        org.junit.Assert.assertTrue(string2.equals(string2));
    }

    @Test
    public void test2449() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInstant0, readableInstant1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getChronology(chronology2);
        java.util.Locale locale4 = null;
        java.lang.Integer integer5 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket(1, chronology3, locale4, integer5, 1);
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        dateTimeParserBucket6.setZone(dateTimeZone8);
    }

    @Test
    public void test2450() throws Throwable {
        org.joda.time.tz.FixedDateTimeZone equals0 = null;
        java.lang.Object object1 = null;
        boolean boolean2 = equals0.equals(object1);
    }

    @Test
    public void test2451() throws Throwable {
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.years();
        org.joda.time.field.PreciseDurationField preciseDurationField1 = new org.joda.time.field.PreciseDurationField(durationFieldType0, 1);
        boolean boolean2 = preciseDurationField1.isPrecise();
    }

    @Test
    public void test2452() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(chronology1);
        org.joda.time.LocalTime.Property property3 = localTime2.secondOfMinute();
        property3.toString();
        property3.hashCode();
        org.junit.Assert.assertTrue(property3.equals(property3));
    }

    @Test
    public void test2453() throws Throwable {
        org.joda.time.Seconds seconds0 = org.joda.time.Seconds.seconds(1);
        org.joda.time.Seconds seconds1 = seconds0.negated();
        seconds1.toString();
        seconds1.hashCode();
        org.junit.Assert.assertTrue(seconds1.equals(seconds1));
    }

    @Test
    public void test2454() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeUtils.getZone(dateTimeZone1);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(1, 1, 1, 1, 1, dateTimeZone2);
        org.joda.time.DateTime.Property property4 = dateTime3.dayOfMonth();
        property4.toString();
        property4.hashCode();
        org.junit.Assert.assertTrue(property4.equals(property4));
    }

    @Test
    public void test2455() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(1, 1, 1, 1, 1, 1, chronology1);
        dateTime2.toString();
        dateTime2.hashCode();
        org.junit.Assert.assertTrue(dateTime2.equals(dateTime2));
    }

    @Test
    public void test2456() throws Throwable {
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.GJChronology gJChronology1 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0);
        long long2 = gJChronology1.getDateTimeMillis(1, 1, 1, 1);
    }

    @Test
    public void test2457() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeUtils.getZone(dateTimeZone1);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(1, dateTimeZone2);
        localDate3.toString();
        localDate3.hashCode();
        org.junit.Assert.assertTrue(localDate3.equals(localDate3));
    }

    @Test
    public void test2458() throws Throwable {
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.hourMinuteSecond();
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeUtils.getZone(dateTimeZone2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter0.withZone(dateTimeZone3);
        dateTimeFormatter4.toString();
        dateTimeFormatter4.hashCode();
        org.junit.Assert.assertTrue(dateTimeFormatter4.equals(dateTimeFormatter4));
    }

    @Test
    public void test2459() throws Throwable {
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.DurationField durationField1 = null;
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField2 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField1);
        unsupportedDateTimeField2.toString();
        unsupportedDateTimeField2.hashCode();
        org.junit.Assert.assertTrue(unsupportedDateTimeField2.equals(unsupportedDateTimeField2));
    }

    @Test
    public void test2460() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod(readableInstant0, readableInstant1, periodType2);
        mutablePeriod3.clear();
    }

    @Test
    public void test2461() throws Throwable {
        java.lang.Object object0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInstant1, readableInstant2);
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay(object0, chronology3);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.Chronology chronology6 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant5);
        org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay4.withChronologyRetainFields(chronology6);
        yearMonthDay7.toString();
        yearMonthDay7.hashCode();
        org.junit.Assert.assertTrue(yearMonthDay7.equals(yearMonthDay7));
    }

    @Test
    public void test2462() throws Throwable {
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod(periodType0);
        mutablePeriod1.setValue(1, 1);
    }

    @Test
    public void test2463() throws Throwable {
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.forOffsetMillis(1);
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(1, 1, 1, 1, 1, 1, dateTimeZone0);
        dateTime1.toString();
        dateTime1.hashCode();
        org.junit.Assert.assertTrue(dateTime1.equals(dateTime1));
    }

    @Test
    public void test2464() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay(1, 1, 1, chronology1);
        org.joda.time.TimeOfDay timeOfDay3 = timeOfDay2.minusMillis(1);
        timeOfDay3.toString();
        timeOfDay3.hashCode();
        org.junit.Assert.assertTrue(timeOfDay3.equals(timeOfDay3));
    }

    @Test
    public void test2465() throws Throwable {
        org.joda.time.Period period0 = org.joda.time.Period.days(1);
        org.joda.time.Period period1 = period0.withMonths(1);
        period1.toString();
        period1.hashCode();
        org.junit.Assert.assertTrue(period1.equals(period1));
    }

    @Test
    public void test2466() throws Throwable {
        java.util.Calendar calendar0 = null;
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromCalendarFields(calendar0);
        localTime1.toString();
        localTime1.hashCode();
        org.junit.Assert.assertTrue(localTime1.equals(localTime1));
    }

    @Test
    public void test2467() throws Throwable {
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.tTime();
        java.lang.String string1 = null;
        org.joda.time.DateTime dateTime2 = dateTimeFormatter0.parseDateTime(string1);
        dateTime2.toString();
        dateTime2.hashCode();
        org.junit.Assert.assertTrue(dateTime2.equals(dateTime2));
    }

    @Test
    public void test2468() throws Throwable {
        java.lang.Object object0 = null;
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getChronology(chronology1);
        org.joda.time.MonthDay monthDay3 = new org.joda.time.MonthDay(object0, chronology2);
        int int4 = monthDay3.getDayOfMonth();
    }

    @Test
    public void test2469() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInstant0, readableInstant1);
        org.joda.time.Interval interval3 = new org.joda.time.Interval(1, 1, chronology2);
        org.joda.time.Interval interval4 = interval3.withStartMillis(1);
        interval4.toString();
        interval4.hashCode();
        org.junit.Assert.assertTrue(interval4.equals(interval4));
    }

    @Test
    public void test2470() throws Throwable {
        java.lang.String string0 = null;
        java.lang.String string1 = null;
        org.joda.time.IllegalFieldValueException illegalFieldValueException2 = new org.joda.time.IllegalFieldValueException(string0, string1);
        illegalFieldValueException2.toString();
        illegalFieldValueException2.hashCode();
        org.junit.Assert.assertTrue(illegalFieldValueException2.equals(illegalFieldValueException2));
    }

    @Test
    public void test2471() throws Throwable {
        java.lang.String string0 = null;
        org.joda.time.format.PeriodFormatter periodFormatter1 = org.joda.time.format.ISOPeriodFormat.alternate();
        org.joda.time.MutablePeriod mutablePeriod2 = org.joda.time.MutablePeriod.parse(string0, periodFormatter1);
        mutablePeriod2.toString();
        mutablePeriod2.hashCode();
        org.junit.Assert.assertTrue(mutablePeriod2.equals(mutablePeriod2));
    }

    @Test
    public void test2472() throws Throwable {
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(1, 1);
        long long1 = dateTimeZone0.adjustOffset(1, true);
    }

    @Test
    public void test2473() throws Throwable {
        java.lang.Object object0 = null;
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getChronology(chronology1);
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(object0, chronology2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        mutableInterval3.setDurationAfterStart(readableDuration4);
    }

    @Test
    public void test2474() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeUtils.getZone(dateTimeZone1);
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone2, 1, 1);
        long long4 = gJChronology3.getDateTimeMillis(1, 1, 1, 1);
    }

    @Test
    public void test2475() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(1, 1, 1, 1, 1, 1, 1, chronology1);
        org.joda.time.DateTime dateTime3 = dateTime2.withSecondOfMinute(1);
        dateTime3.toString();
        dateTime3.hashCode();
        org.junit.Assert.assertTrue(dateTime3.equals(dateTime3));
    }

    @Test
    public void test2476() throws Throwable {
        org.joda.time.TimeOfDay timeOfDay0 = org.joda.time.TimeOfDay.fromMillisOfDay(1);
        int int1 = timeOfDay0.getMinuteOfHour();
    }

    @Test
    public void test2477() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeUtils.getZone(dateTimeZone1);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(1, 1, 1, 1, 1, dateTimeZone2);
        org.joda.time.DateTime dateTime4 = dateTime3.withYearOfEra(1);
        dateTime4.toString();
        dateTime4.hashCode();
        org.junit.Assert.assertTrue(dateTime4.equals(dateTime4));
    }

    @Test
    public void test2478() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.yearDay();
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod(readableInstant0, readableInstant1, periodType2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Chronology chronology5 = org.joda.time.DateTimeUtils.getChronology(chronology4);
        mutablePeriod3.setPeriod(1, chronology5);
    }

    @Test
    public void test2479() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(1, chronology1);
        java.util.Date date3 = localDate2.toDate();
        date3.toString();
        date3.hashCode();
        org.junit.Assert.assertTrue(date3.equals(date3));
    }

    @Test
    public void test2480() throws Throwable {
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.basicOrdinalDateTime();
        java.lang.String string1 = dateTimeFormatter0.print(1);
        string1.toString();
        string1.hashCode();
        org.junit.Assert.assertTrue(string1.equals(string1));
    }

    @Test
    public void test2481() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInstant0, readableInstant1);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.minuteOfDay();
        dateTimeField3.toString();
        dateTimeField3.hashCode();
        org.junit.Assert.assertTrue(dateTimeField3.equals(dateTimeField3));
    }

    @Test
    public void test2482() throws Throwable {
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.Period period1 = new org.joda.time.Period(1, periodType0);
        period1.toString();
        period1.hashCode();
        org.junit.Assert.assertTrue(period1.equals(period1));
    }

    @Test
    public void test2483() throws Throwable {
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight(1, 1, 1);
        org.joda.time.DateMidnight dateMidnight1 = dateMidnight0.minusWeeks(1);
        dateMidnight1.toString();
        dateMidnight1.hashCode();
        org.junit.Assert.assertTrue(dateMidnight1.equals(dateMidnight1));
    }

    @Test
    public void test2484() throws Throwable {
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Weeks weeks3 = org.joda.time.Weeks.weeksIn(readableInterval2);
        org.joda.time.Weeks weeks4 = weeks3.minus(1);
        weeks4.toString();
        weeks4.hashCode();
        org.junit.Assert.assertTrue(weeks4.equals(weeks4));
    }

    @Test
    public void test2485() throws Throwable {
        org.joda.time.MonthDay monthDay0 = new org.joda.time.MonthDay();
        int int1 = monthDay0.size();
    }

    @Test
    public void test2486() throws Throwable {
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.longDateTime();
        dateTimeFormatter0.toString();
        dateTimeFormatter0.hashCode();
        org.junit.Assert.assertTrue(dateTimeFormatter0.equals(dateTimeFormatter0));
    }

    @Test
    public void test2487() throws Throwable {
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Hours hours3 = org.joda.time.Hours.hoursIn(readableInterval2);
        org.joda.time.Weeks weeks4 = hours3.toStandardWeeks();
        weeks4.toString();
        weeks4.hashCode();
        org.junit.Assert.assertTrue(weeks4.equals(weeks4));
    }

    @Test
    public void test2488() throws Throwable {
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.forOffsetMillis(1);
        org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType1 = null;
        org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0, leapYearPatternType1);
        islamicChronology2.toString();
        islamicChronology2.hashCode();
        org.junit.Assert.assertTrue(islamicChronology2.equals(islamicChronology2));
    }

    @Test
    public void test2489() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeUtils.getZone(dateTimeZone1);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(1, dateTimeZone2);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.DateTime.Property property5 = dateTime3.property(dateTimeFieldType4);
        property5.toString();
        property5.hashCode();
        org.junit.Assert.assertTrue(property5.equals(property5));
    }

    @Test
    public void test2490() throws Throwable {
        org.joda.time.DateTimeField set0 = null;
        long long1 = set0.set(1, 1);
    }

    @Test
    public void test2491() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime(chronology1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.centuryOfEra();
        property3.toString();
        property3.hashCode();
        org.junit.Assert.assertTrue(property3.equals(property3));
    }

    @Test
    public void test2492() throws Throwable {
        org.joda.time.DateMidnight.Property roundCeilingCopy0 = null;
        org.joda.time.DateMidnight dateMidnight1 = roundCeilingCopy0.roundCeilingCopy();
        dateMidnight1.toString();
        dateMidnight1.hashCode();
        org.junit.Assert.assertTrue(dateMidnight1.equals(dateMidnight1));
    }

    @Test
    public void test2493() throws Throwable {
        org.joda.time.Instant instant0 = new org.joda.time.Instant(1);
        org.joda.time.Instant instant1 = instant0.toInstant();
        instant1.toString();
        instant1.hashCode();
        org.junit.Assert.assertTrue(instant1.equals(instant1));
    }

    @Test
    public void test2494() throws Throwable {
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(1, 1);
        long long1 = dateTimeZone0.convertLocalToUTC(1, true, 1);
    }

    @Test
    public void test2495() throws Throwable {
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.forOffsetMillis(1);
        org.joda.time.DateMidnight dateMidnight1 = org.joda.time.DateMidnight.now(dateTimeZone0);
        dateMidnight1.toString();
        dateMidnight1.hashCode();
        org.junit.Assert.assertTrue(dateMidnight1.equals(dateMidnight1));
    }

    @Test
    public void test2496() throws Throwable {
        java.lang.Object object0 = null;
        org.joda.time.Instant instant1 = new org.joda.time.Instant(object0);
        org.joda.time.Instant instant2 = instant1.withMillis(1);
        instant2.toString();
        instant2.hashCode();
        org.junit.Assert.assertTrue(instant2.equals(instant2));
    }

    @Test
    public void test2497() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.MutableDateTime mutableDateTime2 = org.joda.time.MutableDateTime.now(chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.dayOfWeek();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime2.property(dateTimeFieldType3);
        property4.toString();
        property4.hashCode();
        org.junit.Assert.assertTrue(property4.equals(property4));
    }

    @Test
    public void test2498() throws Throwable {
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField0 = null;
        org.joda.time.DurationField durationField1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField3 = new org.joda.time.field.DividedDateTimeField(remainderDateTimeField0, durationField1, dateTimeFieldType2);
        dividedDateTimeField3.toString();
        dividedDateTimeField3.hashCode();
        org.junit.Assert.assertTrue(dividedDateTimeField3.equals(dividedDateTimeField3));
    }

    @Test
    public void test2499() throws Throwable {
        java.lang.Object object0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant1);
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(object0, chronology2);
        org.joda.time.DurationFieldType durationFieldType4 = org.joda.time.DurationFieldType.millis();
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay3.withFieldAdded(durationFieldType4, 1);
        timeOfDay5.toString();
        timeOfDay5.hashCode();
        org.junit.Assert.assertTrue(timeOfDay5.equals(timeOfDay5));
    }

    @Test
    public void test2500() throws Throwable {
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.printZeroAlways();
        periodFormatterBuilder1.toString();
        periodFormatterBuilder1.hashCode();
        org.junit.Assert.assertTrue(periodFormatterBuilder1.equals(periodFormatterBuilder1));
    }

    @Test
    public void test2501() throws Throwable {
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(1, 1);
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(1, dateTimeZone0);
        mutableDateTime1.toString();
        mutableDateTime1.hashCode();
        org.junit.Assert.assertTrue(mutableDateTime1.equals(mutableDateTime1));
    }

    @Test
    public void test2502() throws Throwable {
        java.lang.String string0 = null;
        org.joda.time.Hours hours1 = org.joda.time.Hours.parseHours(string0);
        org.joda.time.PeriodType periodType2 = hours1.getPeriodType();
        periodType2.toString();
        periodType2.hashCode();
        org.junit.Assert.assertTrue(periodType2.equals(periodType2));
    }

    @Test
    public void test2503() throws Throwable {
        java.lang.Object object0 = null;
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.Period period2 = new org.joda.time.Period(object0, periodType1);
        period2.toString();
        period2.hashCode();
        org.junit.Assert.assertTrue(period2.equals(period2));
    }

    @Test
    public void test2504() throws Throwable {
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime(1, 1, 1, 1, 1, 1, 1);
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.dayOfMonth();
        property1.toString();
        property1.hashCode();
        org.junit.Assert.assertTrue(property1.equals(property1));
    }

    @Test
    public void test2505() throws Throwable {
        org.joda.time.Interval interval0 = new org.joda.time.Interval(1, 1);
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.ReadableInterval readableInterval3 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval2);
        org.joda.time.Interval interval4 = interval0.gap(readableInterval3);
        interval4.toString();
        interval4.hashCode();
        org.junit.Assert.assertTrue(interval4.equals(interval4));
    }

    @Test
    public void test2506() throws Throwable {
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.DurationFieldType durationFieldType1 = dateTimeFieldType0.getRangeDurationType();
        durationFieldType1.toString();
        durationFieldType1.hashCode();
        org.junit.Assert.assertTrue(durationFieldType1.equals(durationFieldType1));
    }

    @Test
    public void test2507() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInstant0, readableInstant1);
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime(chronology2);
        int int4 = localDateTime3.getMinuteOfHour();
    }

    @Test
    public void test2508() throws Throwable {
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.Number number1 = null;
        java.lang.String string2 = null;
        org.joda.time.IllegalFieldValueException illegalFieldValueException3 = new org.joda.time.IllegalFieldValueException(dateTimeFieldType0, number1, string2);
        illegalFieldValueException3.toString();
        illegalFieldValueException3.hashCode();
        org.junit.Assert.assertTrue(illegalFieldValueException3.equals(illegalFieldValueException3));
    }

    @Test
    public void test2509() throws Throwable {
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.centuryOfEra();
        property1.toString();
        property1.hashCode();
        org.junit.Assert.assertTrue(property1.equals(property1));
    }

    @Test
    public void test2510() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Months months2 = org.joda.time.Months.monthsBetween(readableInstant0, readableInstant1);
        months2.toString();
        months2.hashCode();
        org.junit.Assert.assertTrue(months2.equals(months2));
    }

    @Test
    public void test2511() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime(1, 1, 1, 1, 1, 1, 1, chronology1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.minuteOfDay();
        property3.toString();
        property3.hashCode();
        org.junit.Assert.assertTrue(property3.equals(property3));
    }

    @Test
    public void test2512() throws Throwable {
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.mediumTime();
        java.lang.Appendable appendable1 = null;
        dateTimeFormatter0.printTo(appendable1, 1);
    }

    @Test
    public void test2513() throws Throwable {
        java.lang.String string0 = null;
        org.joda.time.Hours hours1 = org.joda.time.Hours.parseHours(string0);
        org.joda.time.ReadableInterval readableInterval2 = null;
        org.joda.time.ReadableInterval readableInterval3 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval2);
        org.joda.time.ReadableInterval readableInterval4 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval3);
        org.joda.time.Hours hours5 = org.joda.time.Hours.hoursIn(readableInterval4);
        org.joda.time.Hours hours6 = hours1.plus(hours5);
        hours6.toString();
        hours6.hashCode();
        org.junit.Assert.assertTrue(hours6.equals(hours6));
    }

    @Test
    public void test2514() throws Throwable {
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate(1, 1, 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        boolean boolean2 = localDate0.isSupported(dateTimeFieldType1);
    }

    @Test
    public void test2515() throws Throwable {
        java.lang.Object object0 = null;
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(object0, dateTimeZone2);
        org.joda.time.LocalDate localDate4 = localDate3.withYearOfCentury(1);
        localDate4.toString();
        localDate4.hashCode();
        org.junit.Assert.assertTrue(localDate4.equals(localDate4));
    }

    @Test
    public void test2516() throws Throwable {
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime(1, 1, 1, 1, 1, 1);
        int int1 = localDateTime0.getMillisOfDay();
    }

    @Test
    public void test2517() throws Throwable {
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.ReadableInterval readableInterval3 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval2);
        org.joda.time.Minutes minutes4 = org.joda.time.Minutes.minutesIn(readableInterval3);
        int int5 = minutes4.getMinutes();
    }

    @Test
    public void test2518() throws Throwable {
        org.joda.time.ReadablePeriod readablePeriod0 = null;
        org.joda.time.Days days1 = org.joda.time.Days.standardDaysIn(readablePeriod0);
        org.joda.time.Days days2 = days1.negated();
        days2.toString();
        days2.hashCode();
        org.junit.Assert.assertTrue(days2.equals(days2));
    }

    @Test
    public void test2519() throws Throwable {
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.centuries();
        java.lang.String string1 = null;
        org.joda.time.IllegalFieldValueException illegalFieldValueException2 = new org.joda.time.IllegalFieldValueException(durationFieldType0, string1);
        illegalFieldValueException2.toString();
        illegalFieldValueException2.hashCode();
        org.junit.Assert.assertTrue(illegalFieldValueException2.equals(illegalFieldValueException2));
    }

    @Test
    public void test2520() throws Throwable {
        org.joda.time.chrono.JulianChronology julianChronology0 = org.joda.time.chrono.JulianChronology.getInstance();
        org.joda.time.Chronology chronology1 = julianChronology0.withUTC();
        chronology1.toString();
        chronology1.hashCode();
        org.junit.Assert.assertTrue(chronology1.equals(chronology1));
    }

    @Test
    public void test2521() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.util.Locale locale2 = null;
        java.lang.String string3 = dateTimeZone1.getName(1, locale2);
        string3.toString();
        string3.hashCode();
        org.junit.Assert.assertTrue(string3.equals(string3));
    }

    @Test
    public void test2522() throws Throwable {
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.ReadableInterval readableInterval3 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval2);
        org.joda.time.Months months4 = org.joda.time.Months.monthsIn(readableInterval3);
        java.lang.String string5 = null;
        org.joda.time.Months months6 = org.joda.time.Months.parseMonths(string5);
        org.joda.time.Months months7 = months4.minus(months6);
        months7.toString();
        months7.hashCode();
        org.junit.Assert.assertTrue(months7.equals(months7));
    }

    @Test
    public void test2523() throws Throwable {
        org.joda.time.MonthDay monthDay0 = new org.joda.time.MonthDay(1, 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.MonthDay.Property property2 = monthDay0.property(dateTimeFieldType1);
        property2.toString();
        property2.hashCode();
        org.junit.Assert.assertTrue(property2.equals(property2));
    }

    @Test
    public void test2524() throws Throwable {
        org.joda.time.MonthDay monthDay0 = new org.joda.time.MonthDay(1, 1);
        org.joda.time.LocalDate localDate1 = monthDay0.toLocalDate(1);
        localDate1.toString();
        localDate1.hashCode();
        org.junit.Assert.assertTrue(localDate1.equals(localDate1));
    }

    @Test
    public void test2525() throws Throwable {
        org.joda.time.YearMonth.Property getYearMonth0 = null;
        org.joda.time.YearMonth yearMonth1 = getYearMonth0.getYearMonth();
        yearMonth1.toString();
        yearMonth1.hashCode();
        org.junit.Assert.assertTrue(yearMonth1.equals(yearMonth1));
    }

    @Test
    public void test2526() throws Throwable {
        java.lang.Object object0 = null;
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.days();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.Chronology chronology4 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInstant2, readableInstant3);
        org.joda.time.Period period5 = new org.joda.time.Period(object0, periodType1, chronology4);
        period5.toString();
        period5.hashCode();
        org.junit.Assert.assertTrue(period5.equals(period5));
    }

    @Test
    public void test2527() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInstant0, readableInstant1);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(1, 1, 1, 1, 1, 1, 1, chronology2);
        dateTime3.toString();
        dateTime3.hashCode();
        org.junit.Assert.assertTrue(dateTime3.equals(dateTime3));
    }

    @Test
    public void test2528() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = org.joda.time.LocalDate.now(dateTimeZone1);
        int int3 = localDate2.getCenturyOfEra();
    }

    @Test
    public void test2529() throws Throwable {
        java.lang.Object object0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(object0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime1.property(dateTimeFieldType2);
        property3.toString();
        property3.hashCode();
        org.junit.Assert.assertTrue(property3.equals(property3));
    }

    @Test
    public void test2530() throws Throwable {
        org.joda.time.Duration duration0 = org.joda.time.Duration.standardHours(1);
        long long1 = duration0.getStandardMinutes();
    }

    @Test
    public void test2531() throws Throwable {
        org.joda.time.ReadablePeriod readablePeriod0 = null;
        org.joda.time.Days days1 = org.joda.time.Days.standardDaysIn(readablePeriod0);
        org.joda.time.Duration duration2 = days1.toStandardDuration();
        duration2.toString();
        duration2.hashCode();
        org.junit.Assert.assertTrue(duration2.equals(duration2));
    }

    @Test
    public void test2532() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateMidnight dateMidnight2 = org.joda.time.DateMidnight.now(chronology1);
        org.joda.time.DateMidnight.Property property3 = dateMidnight2.weekyear();
        property3.toString();
        property3.hashCode();
        org.junit.Assert.assertTrue(property3.equals(property3));
    }

    @Test
    public void test2533() throws Throwable {
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.dateOptionalTimeParser();
        dateTimeFormatter0.toString();
        dateTimeFormatter0.hashCode();
        org.junit.Assert.assertTrue(dateTimeFormatter0.equals(dateTimeFormatter0));
    }

    @Test
    public void test2534() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(1, 1, 1, 1, 1, 1, 1, chronology1);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime2.withEra(1);
        localDateTime3.toString();
        localDateTime3.hashCode();
        org.junit.Assert.assertTrue(localDateTime3.equals(localDateTime3));
    }

    @Test
    public void test2535() throws Throwable {
        java.lang.Object object0 = null;
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeUtils.getZone(dateTimeZone2);
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(object0, dateTimeZone3);
        dateTime4.toString();
        dateTime4.hashCode();
        org.junit.Assert.assertTrue(dateTime4.equals(dateTime4));
    }

    @Test
    public void test2536() throws Throwable {
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.forOffsetMillis(1);
        boolean boolean1 = dateTimeZone0.isStandardOffset(1);
    }

    @Test
    public void test2537() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod(1, chronology0);
        mutablePeriod1.setPeriod(1);
    }

    @Test
    public void test2538() throws Throwable {
        java.lang.Object object0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant1);
        org.joda.time.MonthDay monthDay3 = new org.joda.time.MonthDay(object0, chronology2);
        monthDay3.toString();
        monthDay3.hashCode();
        org.junit.Assert.assertTrue(monthDay3.equals(monthDay3));
    }

    @Test
    public void test2539() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInstant0, readableInstant1);
        org.joda.time.LocalTime localTime3 = org.joda.time.LocalTime.now(chronology2);
        org.joda.time.DateTime dateTime4 = localTime3.toDateTimeToday();
        dateTime4.toString();
        dateTime4.hashCode();
        org.junit.Assert.assertTrue(dateTime4.equals(dateTime4));
    }

    @Test
    public void test2540() throws Throwable {
        org.joda.time.field.DividedDateTimeField addWrapField0 = null;
        long long1 = addWrapField0.addWrapField(1, 1);
    }

    @Test
    public void test2541() throws Throwable {
        java.lang.Object object0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(1);
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(object0, dateTimeZone1);
        localTime2.toString();
        localTime2.hashCode();
        org.junit.Assert.assertTrue(localTime2.equals(localTime2));
    }

    @Test
    public void test2542() throws Throwable {
        org.joda.time.ReadablePeriod readablePeriod0 = null;
        org.joda.time.Seconds seconds1 = org.joda.time.Seconds.standardSecondsIn(readablePeriod0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Seconds seconds3 = org.joda.time.Seconds.standardSecondsIn(readablePeriod2);
        boolean boolean4 = seconds1.isGreaterThan(seconds3);
    }

    @Test
    public void test2543() throws Throwable {
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.forOffsetMillis(1);
        long long1 = dateTimeZone0.convertLocalToUTC(1, true, 1);
    }

    @Test
    public void test2544() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.millisOfSecond();
        property3.toString();
        property3.hashCode();
        org.junit.Assert.assertTrue(property3.equals(property3));
    }

    @Test
    public void test2545() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInstant0, readableInstant1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getChronology(chronology2);
        org.joda.time.DurationField durationField4 = chronology3.centuries();
        durationField4.toString();
        durationField4.hashCode();
        org.junit.Assert.assertTrue(durationField4.equals(durationField4));
    }

    @Test
    public void test2546() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = null;
        org.joda.time.field.SkipUndoDateTimeField skipUndoDateTimeField3 = new org.joda.time.field.SkipUndoDateTimeField(chronology1, dateTimeField2);
        skipUndoDateTimeField3.toString();
        skipUndoDateTimeField3.hashCode();
        org.junit.Assert.assertTrue(skipUndoDateTimeField3.equals(skipUndoDateTimeField3));
    }

    @Test
    public void test2547() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInstant0, readableInstant1);
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth(1, 1, chronology2);
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        org.joda.time.Interval interval6 = yearMonth3.toInterval(dateTimeZone5);
        interval6.toString();
        interval6.hashCode();
        org.junit.Assert.assertTrue(interval6.equals(interval6));
    }

    @Test
    public void test2548() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateMidnight dateMidnight2 = org.joda.time.DateMidnight.now(chronology1);
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight2.minusDays(1);
        dateMidnight3.toString();
        dateMidnight3.hashCode();
        org.junit.Assert.assertTrue(dateMidnight3.equals(dateMidnight3));
    }

    @Test
    public void test2549() throws Throwable {
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime(1);
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.millisOfDay();
        property1.toString();
        property1.hashCode();
        org.junit.Assert.assertTrue(property1.equals(property1));
    }

    @Test
    public void test2550() throws Throwable {
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.Interval interval1 = yearMonthDay0.toInterval();
        interval1.toString();
        interval1.hashCode();
        org.junit.Assert.assertTrue(interval1.equals(interval1));
    }

    @Test
    public void test2551() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay(1, 1, chronology1);
        org.joda.time.TimeOfDay timeOfDay3 = timeOfDay2.minusMillis(1);
        timeOfDay3.toString();
        timeOfDay3.hashCode();
        org.junit.Assert.assertTrue(timeOfDay3.equals(timeOfDay3));
    }

    @Test
    public void test2552() throws Throwable {
        java.lang.Object object0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInstant1, readableInstant2);
        org.joda.time.Chronology chronology4 = org.joda.time.DateTimeUtils.getChronology(chronology3);
        org.joda.time.Interval interval5 = new org.joda.time.Interval(object0, chronology4);
        interval5.toString();
        interval5.hashCode();
        org.junit.Assert.assertTrue(interval5.equals(interval5));
    }

    @Test
    public void test2553() throws Throwable {
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Interval interval2 = new org.joda.time.Interval(readableDuration0, readableInstant1);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.Interval interval4 = interval2.withEnd(readableInstant3);
        interval4.toString();
        interval4.hashCode();
        org.junit.Assert.assertTrue(interval4.equals(interval4));
    }

    @Test
    public void test2554() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInstant0, readableInstant1);
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth(chronology2);
        org.joda.time.YearMonth yearMonth4 = yearMonth3.plusYears(1);
        yearMonth4.toString();
        yearMonth4.hashCode();
        org.junit.Assert.assertTrue(yearMonth4.equals(yearMonth4));
    }

    @Test
    public void test2555() throws Throwable {
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = localDateTime0.withDayOfYear(1);
        localDateTime1.toString();
        localDateTime1.hashCode();
        org.junit.Assert.assertTrue(localDateTime1.equals(localDateTime1));
    }

    @Test
    public void test2556() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInstant0, readableInstant1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getChronology(chronology2);
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(chronology3);
        org.joda.time.DateTime.Property property5 = dateTime4.minuteOfHour();
        property5.toString();
        property5.hashCode();
        org.junit.Assert.assertTrue(property5.equals(property5));
    }

    @Test
    public void test2557() throws Throwable {
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(1, 1);
        java.lang.String string1 = dateTimeZone0.getID();
        string1.toString();
        string1.hashCode();
        org.junit.Assert.assertTrue(string1.equals(string1));
    }

    @Test
    public void test2558() throws Throwable {
        org.joda.time.Duration duration0 = new org.joda.time.Duration(1, 1);
        org.joda.time.Duration duration1 = duration0.plus(1);
        duration1.toString();
        duration1.hashCode();
        org.junit.Assert.assertTrue(duration1.equals(duration1));
    }

    @Test
    public void test2559() throws Throwable {
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.years();
        org.joda.time.field.PreciseDurationField preciseDurationField1 = new org.joda.time.field.PreciseDurationField(durationFieldType0, 1);
        long long2 = preciseDurationField1.getMillis(1, 1);
    }

    @Test
    public void test2560() throws Throwable {
        org.joda.time.LocalDate.Property getLocalDate0 = null;
        org.joda.time.LocalDate localDate1 = getLocalDate0.getLocalDate();
        localDate1.toString();
        localDate1.hashCode();
        org.junit.Assert.assertTrue(localDate1.equals(localDate1));
    }

    @Test
    public void test2561() throws Throwable {
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.eras();
        java.lang.String string1 = durationFieldType0.getName();
        string1.toString();
        string1.hashCode();
        org.junit.Assert.assertTrue(string1.equals(string1));
    }

    @Test
    public void test2562() throws Throwable {
        java.lang.Object object0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant1);
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod(object0, chronology2);
        org.joda.time.MutablePeriod mutablePeriod4 = mutablePeriod3.copy();
        mutablePeriod4.toString();
        mutablePeriod4.hashCode();
        org.junit.Assert.assertTrue(mutablePeriod4.equals(mutablePeriod4));
    }

    @Test
    public void test2563() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeUtils.getZone(dateTimeZone1);
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime(1, 1, 1, 1, 1, 1, 1, dateTimeZone2);
        mutableDateTime3.toString();
        mutableDateTime3.hashCode();
        org.junit.Assert.assertTrue(mutableDateTime3.equals(mutableDateTime3));
    }

    @Test
    public void test2564() throws Throwable {
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.field.UnsupportedDurationField unsupportedDurationField1 = org.joda.time.field.UnsupportedDurationField.getInstance(durationFieldType0);
        org.joda.time.DurationField durationField2 = null;
        int int3 = unsupportedDurationField1.compareTo(durationField2);
    }

    @Test
    public void test2565() throws Throwable {
        org.joda.time.Days days0 = org.joda.time.Days.days(1);
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Days days3 = org.joda.time.Days.daysIn(readableInterval2);
        boolean boolean4 = days0.isGreaterThan(days3);
    }

    @Test
    public void test2566() throws Throwable {
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.mediumDate();
        org.joda.time.format.DateTimeParser dateTimeParser1 = dateTimeFormatter0.getParser();
        dateTimeParser1.toString();
        dateTimeParser1.hashCode();
        org.junit.Assert.assertTrue(dateTimeParser1.equals(dateTimeParser1));
    }

    @Test
    public void test2567() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(1, 1, 1, 1, 1, 1, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.secondOfMinute();
        property3.toString();
        property3.hashCode();
        org.junit.Assert.assertTrue(property3.equals(property3));
    }

    @Test
    public void test2568() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.now(dateTimeZone1);
        localTime2.toString();
        localTime2.hashCode();
        org.junit.Assert.assertTrue(localTime2.equals(localTime2));
    }

    @Test
    public void test2569() throws Throwable {
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay(1);
        yearMonthDay0.toString();
        yearMonthDay0.hashCode();
        org.junit.Assert.assertTrue(yearMonthDay0.equals(yearMonthDay0));
    }

    @Test
    public void test2570() throws Throwable {
        org.joda.time.tz.UTCProvider uTCProvider0 = new org.joda.time.tz.UTCProvider();
        java.util.Set<java.lang.String> set1 = uTCProvider0.getAvailableIDs();
        set1.toString();
        set1.hashCode();
        org.junit.Assert.assertTrue(set1.equals(set1));
    }

    @Test
    public void test2571() throws Throwable {
        org.joda.time.Period period0 = new org.joda.time.Period(1, 1);
        org.joda.time.Period period1 = period0.plusMinutes(1);
        period1.toString();
        period1.hashCode();
        org.junit.Assert.assertTrue(period1.equals(period1));
    }

    @Test
    public void test2572() throws Throwable {
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Weeks weeks3 = org.joda.time.Weeks.weeksIn(readableInterval2);
        org.joda.time.Weeks weeks4 = weeks3.dividedBy(1);
        weeks4.toString();
        weeks4.hashCode();
        org.junit.Assert.assertTrue(weeks4.equals(weeks4));
    }

    @Test
    public void test2573() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        java.lang.String string3 = partial2.toStringList();
        string3.toString();
        string3.hashCode();
        org.junit.Assert.assertTrue(string3.equals(string3));
    }

    @Test
    public void test2574() throws Throwable {
        java.lang.Object object0 = null;
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getChronology(chronology2);
        org.joda.time.Period period4 = new org.joda.time.Period(object0, periodType1, chronology3);
        org.joda.time.Period period5 = period4.withHours(1);
        period5.toString();
        period5.hashCode();
        org.junit.Assert.assertTrue(period5.equals(period5));
    }

    @Test
    public void test2575() throws Throwable {
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime(1, chronology1);
        mutableDateTime2.setMillisOfDay(1);
    }

    @Test
    public void test2576() throws Throwable {
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = localDateTime0.withMillisOfSecond(1);
        localDateTime1.toString();
        localDateTime1.hashCode();
        org.junit.Assert.assertTrue(localDateTime1.equals(localDateTime1));
    }

    @Test
    public void test2577() throws Throwable {
        org.joda.time.tz.DefaultNameProvider defaultNameProvider0 = new org.joda.time.tz.DefaultNameProvider();
        java.util.Locale locale1 = null;
        java.lang.String string2 = null;
        java.lang.String string3 = null;
        java.lang.String string4 = defaultNameProvider0.getShortName(locale1, string2, string3);
        string4.toString();
        string4.hashCode();
        org.junit.Assert.assertTrue(string4.equals(string4));
    }

    @Test
    public void test2578() throws Throwable {
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(1, chronology1);
        int int3 = localDateTime2.getCenturyOfEra();
    }

    @Test
    public void test2579() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone2 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone1);
        int int3 = cachedDateTimeZone2.getStandardOffset(1);
    }

    @Test
    public void test2580() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeUtils.getZone(dateTimeZone1);
        org.joda.time.LocalDate localDate3 = org.joda.time.LocalDate.now(dateTimeZone2);
        int int4 = localDate3.getDayOfYear();
    }

    @Test
    public void test2581() throws Throwable {
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeUtils.getZone(dateTimeZone1);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(1, 1, 1, 1, 1, 1, dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime4 = dateTime3.toLocalDateTime();
        localDateTime4.toString();
        localDateTime4.hashCode();
        org.junit.Assert.assertTrue(localDateTime4.equals(localDateTime4));
    }

    @Test
    public void test2582() throws Throwable {
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(1, 1);
        org.joda.time.chrono.BuddhistChronology buddhistChronology1 = org.joda.time.chrono.BuddhistChronology.getInstance(dateTimeZone0);
        buddhistChronology1.toString();
        buddhistChronology1.hashCode();
        org.junit.Assert.assertTrue(buddhistChronology1.equals(buddhistChronology1));
    }

    @Test
    public void test2583() throws Throwable {
        org.joda.time.tz.ZoneInfoProvider zoneInfoProvider0 = new org.joda.time.tz.ZoneInfoProvider();
        java.lang.String string1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = zoneInfoProvider0.getZone(string1);
        dateTimeZone2.toString();
        dateTimeZone2.hashCode();
        org.junit.Assert.assertTrue(dateTimeZone2.equals(dateTimeZone2));
    }

    @Test
    public void test2584() throws Throwable {
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.minutes(1);
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.Minutes minutes2 = org.joda.time.Minutes.standardMinutesIn(readablePeriod1);
        boolean boolean3 = minutes0.isLessThan(minutes2);
    }

    @Test
    public void test2585() throws Throwable {
        org.joda.time.Duration duration0 = org.joda.time.Duration.standardSeconds(1);
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.Duration duration2 = duration0.minus(readableDuration1);
        duration2.toString();
        duration2.hashCode();
        org.junit.Assert.assertTrue(duration2.equals(duration2));
    }

    @Test
    public void test2586() throws Throwable {
        org.joda.time.DateTime.Property withMinimumValue0 = null;
        org.joda.time.DateTime dateTime1 = withMinimumValue0.withMinimumValue();
        dateTime1.toString();
        dateTime1.hashCode();
        org.junit.Assert.assertTrue(dateTime1.equals(dateTime1));
    }
}
